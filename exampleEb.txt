import{queryClient}from"@brdp/engine";import{QueryClientProvider}from"@tanstack/react-query";import{Provider}from"react-redux";import{RouterProvider}from"react-router";import router from"./routes/routes";import store from"./store/store";const App=()=>{return(<Provider store={store}><QueryClientProvider client={queryClient}><RouterProvider router={router}/></QueryClientProvider></Provider>)};export default App;
import{unstableSetRender}from"antd";import React from"react";import ReactDOM,{createRoot}from"react-dom/client";unstableSetRender((node,container)=>{(container as any)._reactRoot||=createRoot(container);const root=(container as any)._reactRoot;root.render(node);return async()=>{await new Promise((resolve)=>setTimeout(resolve,0));root.unmount()}});import App from"@/App";const rootEl=document.getElementById("root");if(rootEl){const root=ReactDOM.createRoot(rootEl);root.render(<React.StrictMode><App/></React.StrictMode>)}
import("./bootstrap");
import{queryClient}from"@brdp/engine";import{QueryClientProvider}from"@tanstack/react-query";import{useEffect}from"react";import{Provider}from"react-redux";import{RouterProvider}from"react-router";import router from"./routes/routes";import store from"./store/store";export default function EbillRemoteApp(){useEffect(()=>{console.log("[x] EBill Remote App!")},[]);return(<Provider store={store}><QueryClientProvider client={queryClient}><RouterProvider router={router}/></QueryClientProvider></Provider>)}
export type SelectboxDataType={code:string;name:string};export type ApprovalReferenceDataType={number:string;name:string};export type BillTypeDataType={code:string;name:string;convertDebtLoanTypeCode:string|null;enable:boolean|null};export const convertSelectboxData=(data:SelectboxDataType[])=>{return data?.map((item:SelectboxDataType)=>({value:item.code,label:item.name}))};export const formatSelectOptionsWithCode=(data:SelectboxDataType[])=>{return data?.map((item:SelectboxDataType)=>({label:`${item.name} - ${item.code}`,value:item.code}))};export const convertSelectboxDataName=(data:SelectboxDataType[])=>{return data?.map((item:SelectboxDataType)=>({value:`${item.code}-${item.name}`,label:`${item.name} - ${item.code}`}))};export const convertApprovalReferenceData=(data:ApprovalReferenceDataType[])=>{return data?.map((item:ApprovalReferenceDataType)=>({label:`${item.name} - ${item.number}`,value:item.number}))};
export const downloadBase64File=({file,fileName,extension}:{file:string;fileName:string;extension:string})=>{const mimeTypes:Record<string,string>={pdf:"application/pdf",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",xls:"application/vnd.ms-excel",docx:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",doc:"application/msword",txt:"text/plain",csv:"text/csv",zip:"application/zip",default:"application/octet-stream"};const mimeType=mimeTypes[extension.toLowerCase()]||mimeTypes.default;const byteCharacters=atob(file);const byteNumbers=Array.from(byteCharacters,(c)=>c.charCodeAt(0));const byteArray=new Uint8Array(byteNumbers);const blob=new Blob([byteArray],{type:mimeType});const link=document.createElement("a");link.href=URL.createObjectURL(blob);link.download=fileName;link.click();URL.revokeObjectURL(link.href)};
const formatNumber=(value:unknown,useGrouping=true):string=>{return new Intl.NumberFormat("fa-IR",{useGrouping}).format(Number(value))};const pluralize=(count:number,singular:string,plural:string):string=>{return count>1?plural:singular};export{formatNumber,pluralize};
import store from"@/store/store";import{dismissAllModals,ditchModal,hideModal,modalSelector,modalSizes,type ModalSliceType,pushModal}from"@brdp/engine";import{isFunction}from"@brdp/utils";import{Flex,Modal}from"antd";import{useCallback}from"react";import{useDispatch,useSelector}from"react-redux";const useAppModal=function useAppModal(){const dispatch=useDispatch();const show=showAppModal;const hide=hideAppModal;const ditchAll=ditchAllModal;const Component=()=>{const modals=useSelector(modalSelector);const modalsList=Object.keys(modals);return modalsList.map((item)=>{const{element,id,title,icon,options}=modals[item]as ModalSliceType;const hasOnCancel=isFunction(options?.onCancel);const hasOnOk=isFunction(options?.onOk);const isClosable=options?.closable||false;return(<Modal key={item}closable={isClosable}open={options?.showing}okText={options?.okText||false}cancelText={options?.cancelText||false}centered title={title?(<Flex align="center"justify="flex-start"gap="small">{icon}{title}</Flex>):null}confirmLoading={options?.confirmLoading||false}width={modalSizes[options?.size??"default"]}maskClosable={false}keyboard={isClosable}rootClassName="brdp-modal brdp-ebill-modal"onCancel={(event)=>{if(isFunction(options?.onCancel)){options?.onCancel(event)}dispatch(hideModal({id}))}}onOk={(event)=>{if(isFunction(options?.onOk)){options?.onOk(event)}}}afterClose={()=>{dispatch(ditchModal({id}))}}footer={(_,{OkBtn,CancelBtn})=>{if(hasOnCancel||hasOnOk){return(<>{hasOnCancel&&<CancelBtn/>}{hasOnOk&&<OkBtn/>}</>)}return null}}>{element}</Modal>)})};return{show,ditchAll,hide,Component:useCallback(Component,[])}};export const showAppModal=({title,id,icon,element,options}:ModalSliceType)=>{store.dispatch(pushModal({element:element,id:id,title:title,icon:icon,options:{cancelText:options?.cancelText,okText:options?.okText,closable:options?.closable,confirmLoading:options?.confirmLoading,size:options?.size,showing:options?.showing,onCancel:options?.onCancel,onOk:options?.onOk}}));return()=>{hideAppModal(id)}};export const hideAppModal=(id:string)=>{store.dispatch(hideModal({id:id}))};export const ditchAllModal=()=>{store.dispatch(dismissAllModals())};export default useAppModal;
import{useState}from"react";interface monthItem{value:1|2|3|4|5|6|7|8|9|10|11|12;label:"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"|"10"|"11"|"12";disabled:boolean}type TMonthsList=monthItem[];const monthsList:TMonthsList=[{value:1,label:"1",disabled:false},{value:2,label:"2",disabled:false},{value:3,label:"3",disabled:false},{value:4,label:"4",disabled:false},{value:5,label:"5",disabled:false},{value:6,label:"6",disabled:false},{value:7,label:"7",disabled:false},{value:8,label:"8",disabled:false},{value:9,label:"9",disabled:false},{value:10,label:"10",disabled:false},{value:11,label:"11",disabled:false},{value:12,label:"12",disabled:false}];const useMonthSelector=()=>{const[monthsFrom,setMonthFrom]=useState(monthsList);const[monthsTo,setMonthTo]=useState(monthsList);const getMonthsList=(type:"from"|"to")=>type==="from"?monthsFrom:monthsTo;const setMonthsList=(type:"from"|"to",selectedMonth:number)=>{if(type==="from"){setMonthTo(monthsList.map((m)=>({...m,disabled:m.value<=selectedMonth})))}else{setMonthFrom(monthsList.map((m)=>({...m,disabled:m.value>=selectedMonth})))}};return{getMonthsList,setMonthsList}};export{useMonthSelector};
import{APIResponseType}from"@brdp/engine";export type ErrorType=string|APIResponseType<null>;export interface IApiResultData<T>{items:T[];pageNumber:number;pageSize:number;totalCount:number}
import{configureStore}from"@reduxjs/toolkit";import{modalReducer}from"@brdp/engine";const store=configureStore({reducer:{modalReducer:modalReducer},middleware:(getDefaultMiddleware)=>getDefaultMiddleware({serializableCheck:false}),devTools:process.env.NODE_ENV!=="production"});export type RootState=ReturnType<typeof store.getState>;export type AppDispatch=typeof store.dispatch;export default store;
import{useDispatch,useSelector,useStore}from"react-redux";import type{RootState,AppDispatch}from"@/store/store";export const useAppDispatch=useDispatch.withTypes<AppDispatch>();export const useAppSelector=useSelector.withTypes<RootState>();export const useAppStore=useStore.withTypes<RootState>();
import{type IBaratSearchHistoryParams}from"@/pages/configuration/hook/use-search-barat-history-api";import{type EbillFilesManagementDataType}from"@/pages/ebill-files-management/ebill-files-management-page";import{type ViewRequestDetailsProps}from"@/pages/ebill-files-management/modals/central-bank-management/components/central-bank-services/modals/view-request-details";import{type EditBaratFileQuery}from"@/pages/ebill-files-management/modals/edit-barat-file/edit-barat-file";import{URLDefinition}from"@brdp/engine";import{GeneralObject,objectToQueryString}from"@brdp/utils";const General={BASE:"api/ebill",EXTERNAL:"ExternalServices/EBill"}as const satisfies URLDefinition;const ExternalServices={GET_ASSURANCE_TYPE:()=>`/${General.EXTERNAL}/GetAssuranceType`,SEARCH_HISTORY:(params?:IBaratSearchHistoryParams)=>`/${General.EXTERNAL}/GetConfigurationHistory?${objectToQueryString(params)}`,GET_CITY:()=>`/${General.EXTERNAL}/GetCity`,GET_PROOF_LOAD:(billNumber:string)=>`/${General.EXTERNAL}/GetProofLoad?billNumber=${billNumber}`,GET_APPROVAL_REFERENCE:()=>`/${General.EXTERNAL}/GetApprovalReference`,GET_CONVERT_DEBT_TYPE:()=>`/${General.EXTERNAL}/GetConvertDebtType`,GET_ECONOMICAL_SECTION:()=>`/${General.EXTERNAL}/GetEconomicalSection`,GET_ECONOMICAL_SUB:(params?:string)=>`/${General.EXTERNAL}/GetEconomicalSection/${params}`,GET_CUSTOMER_TYPE:()=>`ExternalServices/Common/GetStaticType?Name=CustomerType&Subsystem=3`,GET_PERSON_TYPE:()=>`ExternalServices/Common/GetStaticType?Name=PersonTypes&Subsystem=3`,GET_GENDER_TYPE:()=>`ExternalServices/Common/GetStaticType?Name=GenderOptions&Subsystem=3`}as const satisfies URLDefinition;const EbillServices={GET_ALL_BILL_TYPES:()=>`/${General.BASE}/service/bill-types`,GET_ALL_BILL_STATUS:()=>`/${General.BASE}/service/bill-status`,GET_GENDER:()=>`/${General.BASE}/gender`,GET_BENEFICIARY_TYPES:()=>`/${General.BASE}/beneficiary-types`,GET_PERSON_TYPES:()=>`/${General.BASE}/person-types`};const Configuration={GET_HISTORY:()=>`/${General.BASE}/configuration/history`,GET_INFO:()=>`/${General.BASE}/configuration/info`,GET_NULL_INFO:()=>`/${General.BASE}/null-info`,POST_NEW:()=>`/${General.BASE}/configuration/add`}as const satisfies URLDefinition;const CommissionRate={CREATE:()=>`/${General.BASE}/basic-info/commission-rate/create`,UPDATE:()=>`/${General.BASE}/basic-info/commission-rate/update`,SEARCH:(params:GeneralObject)=>`/${General.BASE}/basic-info/commission-rate/search?${objectToQueryString(params)}`}as const satisfies URLDefinition;const ProofType={GET:()=>`/${General.BASE}/basic-info/proof-type`,SEARCH:(params:GeneralObject)=>`/${General.BASE}/basic-info/proof-type/search?${objectToQueryString(params)}`,UPDATE:(code:string)=>`/${General.BASE}/basic-info/proof-type/${code}/update`,CREATE:()=>`/${General.BASE}/basic-info/proof-type/create`,DEACTIVATE:(code:string)=>`/${General.BASE}/basic-info/proof-type/${code}/deactivate`,ACTIVATE:(code:string)=>`/${General.BASE}/basic-info/proof-type/${code}/activate`};const EbillTypesManagement={GET_EBILL_TYPE_BY_CODE:(code:string)=>`/${General.BASE}/type/get-by-code?code=${code}`,GET_EBILL_TYPES:(params:{code?:string;deletedType?:boolean;pageSize:number;pageNumber:number})=>`/${General.BASE}/type/search?${objectToQueryString(params)}`,POST_EBILL_TYPE:()=>`/${General.BASE}/type/create`,PATCH_EBILL_TYPE:()=>`/${General.BASE}/type/update`,DELETE_EBILL_TYPE:({code}:{code:string})=>`/${General.BASE}/type/${code}/delete`};const EbillFilesManagement={GET_EBILL_FILES:(params:EbillFilesManagementDataType)=>`/${General.BASE}/search?${objectToQueryString(params)}`,POST_CUSTOMER_ISSUANCE:()=>`/${General.BASE}/customer-issuance`,POST_CUSTOMER_ISSUANCE_BACK:()=>`/${General.BASE}/customer-issuance-back`,POST_BANK_ISSUANCE:()=>`/${General.BASE}/bank-issuance`,CREATE:()=>`/${General.BASE}/create`,LOAD:(params:EditBaratFileQuery)=>`/${General.BASE}/load?${objectToQueryString(params)}`,UPDATE:()=>`/${General.BASE}/update`,GET_EBILL_DETAIL:(billNumber:string)=>`/${General.BASE}/load-view-data?billNumber=${billNumber}`,CREATE_ASSURANCE:()=>`${General.BASE}/assurance/add`,GET_ASSURANCE_DATA:(billNumber:string)=>`/${General.BASE}/assurance/data?billNumber=${billNumber}`};const Sanction={GET_CAN_ADD_ITEM:(billNumber:string)=>`/${General.BASE}/sanction/can-add-item?billNumber=${billNumber}`,APPROVE_SANCTION:()=>`/${General.BASE}/sanction/approve`,GET_SANCTIONS_DATA:(billNumber:string)=>`/${General.BASE}/sanction/data?billNumber=${billNumber}`,GET_SANCTION_DETAILS:(sanctionSerial:number)=>`/${General.BASE}/sanction/details?sanctionSerial=${sanctionSerial}`,ADD_SANCTION:()=>`/${General.BASE}/sanction/add`};const Proof={LOAD:(billNumber:string)=>`/${General.BASE}/proof/load?billNumber=${billNumber}`,DELETE:({billNumber,proofType}:{billNumber:string;proofType:string})=>`/${General.BASE}/proof/${billNumber}/${proofType}/delete`,GET_PROOF_TYPES:()=>`/${General.BASE}/proof`,ADD:()=>`/${General.BASE}/proof/add`};const Spm={SEARCH:(params:{pageSize:number;pageNumber:number;billNumber:string})=>`/${General.BASE}/spm/search?${objectToQueryString(params)}`,VIEW:(params:ViewRequestDetailsProps)=>`/${General.BASE}/spm/view?${objectToQueryString(params)}`,ACTION:(billNumber:string)=>`/${General.BASE}/spm/action?billNumber=${billNumber}`,UNIQUE_NUMBER_PRE_ACTION:(billNumber:string)=>`/${General.BASE}/spm/unique-number/pre-action?billNumber=${billNumber}`,UNIQUE_NUMBER_DATA:(billNumber:string)=>`/${General.BASE}/spm/unique-number/data?billNumber=${billNumber}`,UNIQUE_NUMBER_REQUEST:()=>`/${General.BASE}/spm/unique-number/request`};const ReceiveAmount={GET_PRIMARY_DATA:(params:{billNumber:string;branchCode:string})=>`/${General.BASE}/receive-amount/load?${objectToQueryString(params)}`,GET_RECEIVED_AMOUNTS:(params:{billNumber:string;branchCode:string})=>`/${General.BASE}/receive-amount/get-received-amounts?${objectToQueryString(params)}`,RETURN:`/${General.BASE}/receive-amount/return`,RECEIVE:`/${General.BASE}/receive-amount/receive`}as const satisfies URLDefinition;export const Services={Configuration,CommissionRate,ExternalServices,EbillServices,ProofType,EbillTypesManagement,EbillFilesManagement,Sanction,Proof,Spm,ReceiveAmount}as const;
const Paths={Root:"/",Dashboard:"/dashboard/ebill",configurations:"/dashboard/ebill/configurations",baseInfo:"/dashboard/ebill/base-info",commissionRate:"/dashboard/ebill/base-info/commission-rate",proofTypes:"/dashboard/ebill/base-info/proof-types",filesManagement:"/dashboard/ebill/ebill-files-management",typesManagement:"/dashboard/ebill/ebill-types-management"}as const;export type PathKeys=keyof typeof Paths;export default Paths;
import CommissionRate from"@/pages/base-info/commission-rate/commission-rate-page";import ProofType from"@/pages/base-info/proof-type/proof-typs-page";import{BaratConfigurations}from"@/pages/configuration/barat-landing-page";import DashboardPage from"@/pages/dashboard/dashboard-page";import EbillFilesManagement from"@/pages/ebill-files-management/ebill-files-management-page";import EbillTypesManagement from"@/pages/ebill-types-management/ebill-types-management-page";import AppConfigProvider from"@/provider/app-config-provider";import ErrorPage from"@/routes/ErrorPage";import Paths from"@/routes/Paths";import{Typography}from"@brdp/ui";import{createBrowserRouter,Navigate}from"react-router";const routes=createBrowserRouter([{path:Paths.Dashboard,Component:AppConfigProvider,errorElement:<ErrorPage/>,children:[{index:true,element:<DashboardPage/>},{path:Paths.configurations,element:<BaratConfigurations/>},{path:Paths.commissionRate,element:<CommissionRate/>},{path:Paths.proofTypes,element:<ProofType/>},{path:Paths.filesManagement,element:<EbillFilesManagement/>},{path:Paths.typesManagement,element:<EbillTypesManagement/>},{path:"*",element:<Typography text="Ø²ÛŒØ±Ø³Ø§Ù…Ø§Ù†Ù‡ Ù…ÙˆØ±Ø¯ Ù†Ø¸Ø± Ù¾ÛŒØ¯Ø§ Ù†Ø´Ø¯!"/>}]},{path:"*",element:<Navigate to={Paths.Dashboard}replace/>}]);export default routes;
import Paths from"@/routes/Paths";import useAppModal from"@/utils/hooks/useAppModal";import{IconsList}from"@brdp/ui";import{ThemedLayout,type UiConfig}from"@brdp/ui/themed-layout";import{Spin,ThemeConfig}from"antd";import{ConfigProviderProps}from"antd/lib";import{Outlet}from"react-router";const theme:ThemeConfig={token:{colorPrimary:"#0C74B5",fontFamily:"IRANSansX",colorSplit:"#DFDFDF",colorTextPlaceholder:"rgba(0,0,0,0.25)"},components:{Card:{headerBg:"#f9fafd"},Collapse:{headerPadding:0},Menu:{darkItemSelectedBg:"rgba(0, 0, 0, 0.5)",darkSubMenuItemBg:"rgba(0, 0, 0, 0.15)",iconSize:20,darkPopupBg:"#222a32",itemHeight:48,itemMarginBlock:0,itemMarginInline:8},Typography:{colorTextHeading:"#0C74B5"},Layout:{siderBg:"linear-gradient(180deg, #2e3743 0%, #192227 100%)"}},cssVar:{prefix:"ant"},hashed:false};const themeConfig:ConfigProviderProps={theme};const useCurrentUserData={data:{resultData:{userInformationService:{roleTitle:"Ú©Ø§Ø±Ø´Ù†Ø§Ø³ Ø§Ø±Ø´Ø¯ ØªÙˆØ³Ø¹Ù‡ Ù…Ø­ØµÙˆÙ„",fullName:"Ù†ÛŒÙ…Ø§ Ù„Ø·ÛŒÙÛŒ"}}},isLoading:false,menuItems:[{key:"Ù…Ø¯ÛŒØ±ÛŒØª Ø§ÙˆØ±Ø§Ù‚",label:"Ù…Ø¯ÛŒØ±ÛŒØª Ø§ÙˆØ±Ø§Ù‚",icon:<IconsList.UserIcon/>},{key:"Ù…Ø¯ÛŒØ±ÛŒØª Ù…Ø´ØªØ±ÛŒØ§Ù†",label:"Ù…Ø¯ÛŒØ±ÛŒØª Ù…Ø´ØªØ±ÛŒØ§Ù†",icon:<IconsList.UserIcon/>}],currentMenuItems:[{key:Paths.configurations,label:"ØªÙ†Ø¸ÛŒÙ…Ø§Øª Ø¨Ø±Ø§Øª"},{key:Paths.baseInfo,label:"Ø§Ø·Ù„Ø§Ø¹Ø§Øª Ù¾Ø§ÛŒÙ‡",children:[{key:Paths.proofTypes,label:"Ø§Ù†ÙˆØ§Ø¹ Ù…Ø¯Ø±Ú©"},{key:Paths.commissionRate,label:"Ù†Ø±Ø® Ú©Ø§Ø±Ù…Ø²Ø¯"}]},{key:Paths.typesManagement,label:"Ù…Ø¯ÛŒØ±ÛŒØª Ø§Ù†ÙˆØ§Ø¹ Ø¨Ø±Ø§Øª"},{key:Paths.filesManagement,label:"Ù…Ø¯ÛŒØ±ÛŒØª Ù¾Ø±ÙˆÙ†Ø¯Ù‡â€ŒÙ‡Ø§ÛŒ Ø¨Ø±Ø§Øª"}]as UiConfig["appsMenu"]};const AppConfigProvider:React.FC<React.PropsWithChildren>=()=>{const{Component:ModalComponent}=useAppModal();const{data,isLoading,menuItems,currentMenuItems}=useCurrentUserData;const layoutConfig:UiConfig={rootPath:Paths.Root,loading:isLoading,appIcon:"HexaCubeIcon",logo:"",title:"Ø³Ø§Ù…Ø§Ù†Ù‡ Ø¨Ø±Ø§Øª Ø§Ù„Ú©ØªØ±ÙˆÙ†ÛŒÚ©",themeConfig:themeConfig,profile:{userRole:data?.resultData.userInformationService.roleTitle||"",label:data?.resultData.userInformationService.fullName||""},profileMenuItems:[{key:"/auth/signout",label:"Ø®Ø±ÙˆØ¬ Ø§Ø² Ù†Ø±Ù… Ø§ÙØ²Ø§Ø±",icon:<IconsList.LogoutIcon/>}],appsMenu:menuItems as UiConfig["appsMenu"],menuItems:currentMenuItems};return(<ThemedLayout uiConfig={layoutConfig}><title>{layoutConfig.title}</title><Spin fullscreen size="large"spinning={isLoading}/><Outlet/><ModalComponent/></ThemedLayout>)};export default AppConfigProvider;
import{defineMessages}from"@brdp/utils";const rawMessages={  closeWindow: {id: "ebill.button.closeWindow",defaultMessage: "بستن پنجره",},invalidField: {id: "ebill.validation.invalidField",defaultMessage: "مقدار فیلد {field} معتبر نمی‌باشد",},invalidWhitespace: {id: "ebill.validation.invalidWhitespace",defaultMessage: "نباید شامل فاصله باشد",},validateAddress: {id: "ebill.validation.Address",defaultMessage: "آدرس نامعتبر است!",},sanctionPeriod: {id: "ebill.sanctionPeriod",defaultMessage: "مدت اعتبار مصوبه",},} as const;/*** A collection of localized messages used throughout the application.* This object helps developers avoid hardcoding local-language texts directly in the app.* Instead, they can reference these predefined messages by their keys.** Example usage:* ```typescript* import { getFormatMessage } from "@brdp/utils";** const SampleComponent: React.FC = () => {*   const messages = getFormatMessage();**   ...* }** console.log(messages(ebillMessages.baratProfile)); // Output: "اطلاعات تشکیل برات"* ```*/type EbillMsgDictionary = typeof rawMessages;const ebillMessages = defineMessages(rawMessages) as EbillMsgDictionary;export { ebillMessages };
import{Content,GenerativeTable,IconsList,useTablePagination}from"@brdp/ui";import{showAppModal}from"@/utils/hooks/useAppModal";import CommissionRateEdit from"./components/commission-rate-edit";import CommissionRateAdd from"./components/commission-rate-add";import{FormFields,useControlledForm}from"@brdp/ui/form";import{useGetBillType}from"./hooks/use-get-bill-type";import{ICommissionRate,useGetCommissionRate}from"./hooks/use-get-search-commission-rate";import useGetAssuranceType from"./hooks/use-get-assurance-type";import{generalMessages,getFormatMessage}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";export interface IPayloadSearchCommissionRate{billTypeCode:string;assuranceTypeCode:string}const CommissionRate=()=>{const messages=getFormatMessage();const{tableFromIndex,tableConfig,currentPage,PAGE_SIZE,resetPage}=useTablePagination();const{ControlledForm}=useControlledForm<IPayloadSearchCommissionRate>({id:"commission-rate-add"});const{billTypeLoading,uniqueBillTypes}=useGetBillType();const{assuranceTypeLoading,assuranceTypeResponse}=useGetAssuranceType();const{handleSubmit,commissionRateResponse,commissionRateLoading,searchParams,commissionRateFetching}=useGetCommissionRate(currentPage,PAGE_SIZE,resetPage);const formFields:FormFields<IPayloadSearchCommissionRate>=[{type:"select",name:"billTypeCode",label:messages(ebillMessages.ebillTypeCodeName),data:{static:uniqueBillTypes},options:{searchable:true},validation:{rules:[{required:true,message:messages(ebillMessages.billTypeRequired)}]}},{type:"select",name:"assuranceTypeCode",label:messages(ebillMessages.assuranceTypeLabel),data:{static:assuranceTypeResponse},options:{searchable:true}}];const tableLength=commissionRateResponse?.resultData?.totalCount||0;return(<Content title={messages(ebillMessages.commissionRateLabel)}><ControlledForm fields={formFields}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.searchButton)}isLoading={billTypeLoading||assuranceTypeLoading}isSubmitting={commissionRateLoading}/><GenerativeTable<ICommissionRate>rowKey="id"title={`${messages(generalMessages.tableRowsCount)}:${tableLength}`}fromIndex={tableFromIndex}pagination={tableConfig(tableLength||0)}loading={commissionRateFetching}rowActions={[{id:"edit",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(ebillMessages.editTooltip)},action:(record)=>{showAppModal({id:"commission-rate-edit",title:messages(ebillMessages.editCommissionRateTitle),element:(<CommissionRateEdit commissionRateProps={record}handleSubmitGet={handleSubmit}searchParams={searchParams}assuranceType={assuranceTypeResponse}billType={uniqueBillTypes}/>),options:{size:"small",closable:true}})}}]}columns={[{title:messages(ebillMessages.billTypeLabel),dataIndex:"assuranceTypeName",key:"assuranceTypeName",align:"center"},{title:messages(ebillMessages.assuranceTypeLabel),dataIndex:"billTypeName",key:"billTypeName",align:"center"},{title:messages(ebillMessages.commissionCoefficient),dataIndex:"commissionRate",key:"commissionRate",align:"center",sorter:(a,b)=>a.commissionRate-b.commissionRate}]}data={commissionRateResponse?.resultData?.items||[]}tableHeaderActions={[{id:"action-commission-rate",mode:"expanded",actions:[{id:"add-commission-rate",appearance:{icon:<IconsList.PlusCircleIcon/>,tooltip:messages(ebillMessages.addCommissionRateTooltip)},disabled:billTypeLoading||assuranceTypeLoading,action:()=>{showAppModal({id:"add-commission-rate",title:messages(ebillMessages.addCommissionRateTooltip),element:(<CommissionRateAdd assuranceType={assuranceTypeResponse}billType={uniqueBillTypes}/>),options:{size:"small",closable:true}})}}]}]}/></Content>)};export default CommissionRate;
import{showAppModal}from"@/utils/hooks/useAppModal";import{Content,GenerativeTable,IconsList,Tag,useTablePagination}from"@brdp/ui";import{useControlledForm}from"@brdp/ui/form";import ProofTypeAdd from"./components/proof-type-add";import ProofTypeEdit from"./components/proof-type-edit";import useGetProofType from"./hooks/use-get-proof-type";import useActivationProofType from"./hooks/use-activation-proof-type";import{ebillMessages}from"@/locale/ebill-messages";import{generalMessages,getFormatMessage}from"@brdp/utils";export type IPayloadProofType={code:string;name:string;oldCode:string};const ProofType=()=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<IPayloadProofType>({id:"proof-type-search"});const{tableFromIndex,tableConfig,currentPage,PAGE_SIZE,resetPage}=useTablePagination();const{handleSubmit,proofTypeResponse,proofTypeFetching,searchParams}=useGetProofType(currentPage,PAGE_SIZE,resetPage);const{openModalActivation,openModalDeactivation,isLoading}=useActivationProofType(handleSubmit,searchParams);const tableData=proofTypeResponse?.resultData?.items.map((item)=>({...item,modificationDate:item.modificationDate?.split("-")[0]??""}))|| [];const totalCount=proofTypeResponse?.resultData?.totalCount||0;return(<Content title={messages(ebillMessages.proofTypeTitle)}><ControlledForm fields={[{type:"input",name:"code",label:messages(ebillMessages.proofTypeCode),validation:{rules:[{max:255,message:`${messages(ebillMessages.proofTypeCode)} ${messages(ebillMessages.invalidLength,{count:255})}`},{whitespace:true,message:messages(ebillMessages.invalidWhitespace,{field:messages(ebillMessages.proofTypeCode)})},{pattern:/^-?\d+$/,message:messages(ebillMessages.invalidField,{field:messages(ebillMessages.proofTypeCode)})}]}},{type:"input",name:"name",label:messages(ebillMessages.proofTypeName),validation:{rules:[{max:255,message:`${messages(ebillMessages.proofTypeName)} ${messages(ebillMessages.invalidLength,{count:255})}`},{whitespace:true,message:messages(ebillMessages.invalidWhitespace,{field:messages(ebillMessages.proofTypeName)})}]}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.searchButton)}/><GenerativeTable rowKey="code"title={`${messages(generalMessages.tableRowsCount)}:${totalCount}`}loading={proofTypeFetching||isLoading}columns={[{title:messages(ebillMessages.proofTypeCode),dataIndex:"code",key:"code",align:"center",sorter:(a,b)=>a.code.localeCompare(b.code)},{title:messages(ebillMessages.proofTypeName),dataIndex:"name",key:"name",align:"center"},{title:messages(generalMessages.status),dataIndex:"active",key:"active",align:"center",render:(active:boolean)=>active?(<Tag color="green">{messages(generalMessages.active)}</Tag>):(<Tag color="red">{messages(generalMessages.deActive)}</Tag>)},{title:messages(ebillMessages.editDate),dataIndex:"modificationDate",key:"modificationDate",align:"center",sorter:(a,b)=>a.modificationDate.localeCompare(b.modificationDate)}]}data={tableData}pagination={tableConfig(totalCount)}fromIndex={tableFromIndex}rowActions={[{id:"edit",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(generalMessages.actionEdit)},action:(record)=>{showAppModal({id:"proof-type-edit",title:messages(ebillMessages.editProofType),element:(<ProofTypeEdit proofTypeProps={{...record,oldCode:record.code}}handleSubmitGet={handleSubmit}searchParams={searchParams}/>),options:{size:"small",closable:true}})}},{id:"deactivation",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(ebillMessages.makeDisable)},action:openModalDeactivation,permissionField:(record)=>record.active,confirmMessage:(record)=>messages(ebillMessages.dynamicStatusConfirmation,{action:messages(generalMessages.deActive),target:messages(ebillMessages.proofType),name:record.name})},{id:"activation",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(ebillMessages.makeEnable)},action:openModalActivation,permissionField:(record)=>!record.active,confirmMessage:(record)=>messages(ebillMessages.dynamicStatusConfirmation,{action:messages(generalMessages.active),target:messages(ebillMessages.proofType),name:record.name})}]}tableHeaderActions={[{id:"action-proof-type",mode:"expanded",actions:[{id:"add-proof-type",appearance:{icon:<IconsList.PlusCircleIcon/>,tooltip:messages(ebillMessages.addProofType)},action:()=>{showAppModal({id:"proof-type-add",title:messages(ebillMessages.addProofType),element:<ProofTypeAdd/>,options:{size:"small",closable:true}})}}]}]}/></Content>)};export default ProofType;
import{useControlledForm}from"@brdp/ui/form";import{Alert}from"antd";import{hideAppModal}from"@/utils/hooks/useAppModal";import{generalMessages,getFormatMessage}from"@brdp/utils";import usePostCreateCommissionRate,{IPayloadCreateCommissionRate}from"../hooks/use-add-commission-rate";import{ebillMessages}from"@/locale/ebill-messages";interface SelectBoxType{label:string;value:string}interface IProps{assuranceType:SelectBoxType[];billType:SelectBoxType[]}const CommissionRateAdd=({assuranceType,billType}:IProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<IPayloadCreateCommissionRate>({id:"commission-rate-add"});const{commissionRateLoading,commissionRateIsError,commissionRateError,handleSubmit}=usePostCreateCommissionRate();const handleReset=()=>hideAppModal("add-commission-rate");return(<>{commissionRateIsError&&(<Alert type="error"message={commissionRateError?.message||messages(generalMessages.errorBadHappened)}banner={true}closable style={{marginBottom:"16px"}}/>)}<ControlledForm fields={[{type:"select",name:"billTypeCode",label:messages(ebillMessages.billTypeLabel),data:{static:billType},options:{searchable:true},layout:{span:4},validation:{rules:[{required:true,message:messages(ebillMessages.billTypeRequired)}]}},{type:"select",name:"assuranceTypeCode",label:messages(ebillMessages.assuranceTypeLabel),data:{static:assuranceType},options:{searchable:true},layout:{span:4},validation:{rules:[{required:true,message:messages(ebillMessages.assuranceTypeRequired)}]}},{type:"input",name:"commissionRate",label:messages(ebillMessages.commissionCoefficient),layout:{span:4},validation:{rules:[{required:true,message:messages(ebillMessages.commissionRateRequired)},{pattern:/^[0-9]+(\.[0-9]{1,2})?$/,message:messages(ebillMessages.invalidField,{field:messages(ebillMessages.commissionCoefficient)})}]}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.addCommissionRateTooltip)}resetLabel={messages(ebillMessages.cancelButton)}onReset={handleReset}reset={true}isSubmitting={commissionRateLoading}/></>)};export default CommissionRateAdd;
export interface IPayloadCreateCommissionRate{billTypeCode:string;assuranceTypeCode:string;commissionRate:number}import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,usePost}from"@brdp/engine";import{generalMessages,getFormatMessage}from"@brdp/utils";const useAddCommissionRate=()=>{const messages=getFormatMessage();const{mutate:commissionRateMutate,isLoading:commissionRateLoading,isError:commissionRateIsError,error:commissionRateError}=usePost<unknown,IPayloadCreateCommissionRate>(Services.CommissionRate.CREATE,{raw:true});const handleSubmit=async(values:IPayloadCreateCommissionRate)=>{try{const res=await commissionRateMutate({...values,commissionRate:Number(values.commissionRate)});if(res?.isSuccess){showToast({title:messages(generalMessages.successful),description:messages(ebillMessages.succeedAddCommissionRate)},"success","commission-rate-toast");hideAppModal("add-commission-rate")}}catch(error){console.error("Error submitting commission rate:",error)}};return{commissionRateMutate,commissionRateLoading,commissionRateIsError,commissionRateError,handleSubmit}};export default useAddCommissionRate;
import{Services}from"@/services/url";import{useGet}from"@brdp/engine";export interface AssuranceType{name:string;code:string}const useGetAssuranceType=()=>{const url=Services.ExternalServices.GET_ASSURANCE_TYPE();const{data,isLoading:assuranceTypeLoading,error:assuranceTypeError,isError:isAssuranceTypeError}=useGet<AssuranceType[]>(["assurance-type"],url);const assuranceTypeResponse=data?.resultData.map((item)=>({label:`${item.name} - ${item.code}`,value:item.code}))||[];return{assuranceTypeLoading,assuranceTypeError,isAssuranceTypeError,assuranceTypeResponse}};export default useGetAssuranceType;
import{useGet}from"@brdp/engine";import{Services}from"@/services/url";import{useState}from"react";import{IPayloadSearchCommissionRate}from"../commission-rate-page";import{IApiResultData}from"@/types/global";export interface ICommissionRate{assuranceTypeCode:string;assuranceTypeName:string;billTypeCode:string;billTypeName:string;commissionRate:number}export const useGetCommissionRate=(pageNumber:number,pageSize:number,resetPage:()=>void)=>{const[params,setParams]=useState<IPayloadSearchCommissionRate>();const url=params?Services.CommissionRate.SEARCH({...params,pageNumber,pageSize}):"";const{data:commissionRateResponse,isLoading:commissionRateLoading,isFetching:commissionRateFetching,error:commissionRateError,isError:isCommissionRateError,mutate:commissionRateMutate}=useGet<IApiResultData<ICommissionRate>|undefined>(["search-commission-rate"],url);const handleSubmit=async(formValue?:IPayloadSearchCommissionRate)=>{setParams(formValue);try{await commissionRateMutate();resetPage()}catch(error){console.error("Search error:",error)}};return{searchParams:params,handleSubmit,commissionRateResponse,commissionRateLoading,commissionRateFetching,commissionRateError,isCommissionRateError,commissionRateMutate}};
import{Services}from"@/services/url";import{showToast}from"@brdp/engine";import{IProofType}from"./use-get-proof-type";import{generalMessages,getFormatMessage}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";import{usePatch}from"@brdp/engine";import{IPayloadProofType}from"../proof-typs-page";const useActivationProofType=(handleSubmit?:(formValue?:IPayloadProofType)=>Promise<void>,searchParams?:IPayloadProofType)=>{const messages=getFormatMessage();const activateUrlFn=(params:unknown)=>{const code=(params as{code:string}).code;return Services.ProofType.ACTIVATE(code)};const deactivateUrlFn=(params:unknown)=>{const code=(params as{code:string}).code;return Services.ProofType.DEACTIVATE(code)};const{mutate:activateMutate,isLoading:activateLoading}=usePatch<unknown,unknown>(activateUrlFn,{raw:true});const{mutate:deactivateMutate,isLoading:deactivateLoading}=usePatch<unknown,unknown>(deactivateUrlFn,{raw:true});const handleAction=async(isActivate:boolean,{code}:IProofType)=>{const actionVerb=isActivate?messages(generalMessages.active):messages(generalMessages.deActive);const successMessage=messages(ebillMessages.dynamicStatusSuccess,{target:messages(ebillMessages.proofType),action:actionVerb});const errorMessage=messages(ebillMessages.dynamicStatusError,{target:messages(ebillMessages.proofType),action:actionVerb});const consoleError=messages(ebillMessages.dynamicStatusConsoleError,{action:isActivate?"activating":"deactivating",target:"proof type"});try{const mutate=isActivate?activateMutate:deactivateMutate;const res=await mutate({code});if(res?.isSuccess){showToast({title:messages(generalMessages.successful),description:res.message||successMessage},"success","proof-type-toast");handleSubmit?.(searchParams)}else{showToast({title:messages(generalMessages.error),description:res?.message||errorMessage},"error","proof-type-toast")}}catch(err){console.error(consoleError,err);showToast({title:messages(generalMessages.error),description:errorMessage},"error","proof-type-toast")}};const openModalActivation=(proofType:IProofType)=>handleAction(true,proofType);const openModalDeactivation=(proofType:IProofType)=>handleAction(false,proofType);return{openModalActivation,openModalDeactivation,isLoading:activateLoading||deactivateLoading}};export default useActivationProofType;
