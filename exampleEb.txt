import{queryClient}from"@brdp/engine";import{QueryClientProvider}from"@tanstack/react-query";import{Provider}from"react-redux";import{RouterProvider}from"react-router";import router from"./routes/routes";import store from"./store/store";const App=()=>{return(<Provider store={store}><QueryClientProvider client={queryClient}><RouterProvider router={router}/></QueryClientProvider></Provider>)};export default App;
import{unstableSetRender}from"antd";import React from"react";import ReactDOM,{createRoot}from"react-dom/client";unstableSetRender((node,container)=>{(container as any)._reactRoot||=createRoot(container);const root=(container as any)._reactRoot;root.render(node);return async()=>{await new Promise((resolve)=>setTimeout(resolve,0));root.unmount()}});import App from"@/App";const rootEl=document.getElementById("root");if(rootEl){const root=ReactDOM.createRoot(rootEl);root.render(<React.StrictMode><App/></React.StrictMode>)}
import("./bootstrap");
import{queryClient}from"@brdp/engine";import{QueryClientProvider}from"@tanstack/react-query";import{useEffect}from"react";import{Provider}from"react-redux";import{RouterProvider}from"react-router";import router from"./routes/routes";import store from"./store/store";export default function EbillRemoteApp(){useEffect(()=>{console.log("[x] EBill Remote App!")},[]);return(<Provider store={store}><QueryClientProvider client={queryClient}><RouterProvider router={router}/></QueryClientProvider></Provider>)}
export type SelectboxDataType={code:string;name:string};export type ApprovalReferenceDataType={number:string;name:string};export type BillTypeDataType={code:string;name:string;convertDebtLoanTypeCode:string|null;enable:boolean|null};export const convertSelectboxData=(data:SelectboxDataType[])=>{return data?.map((item:SelectboxDataType)=>({value:item.code,label:item.name}))};export const formatSelectOptionsWithCode=(data:SelectboxDataType[])=>{return data?.map((item:SelectboxDataType)=>({label:`${item.name} - ${item.code}`,value:item.code}))};export const convertSelectboxDataName=(data:SelectboxDataType[])=>{return data?.map((item:SelectboxDataType)=>({value:`${item.code}-${item.name}`,label:`${item.name} - ${item.code}`}))};export const convertApprovalReferenceData=(data:ApprovalReferenceDataType[])=>{return data?.map((item:ApprovalReferenceDataType)=>({label:`${item.name} - ${item.number}`,value:item.number}))};
export const downloadBase64File=({file,fileName,extension}:{file:string;fileName:string;extension:string})=>{const mimeTypes:Record<string,string>={pdf:"application/pdf",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",xls:"application/vnd.ms-excel",docx:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",doc:"application/msword",txt:"text/plain",csv:"text/csv",zip:"application/zip",default:"application/octet-stream"};const mimeType=mimeTypes[extension.toLowerCase()]||mimeTypes.default;const byteCharacters=atob(file);const byteNumbers=Array.from(byteCharacters,(c)=>c.charCodeAt(0));const byteArray=new Uint8Array(byteNumbers);const blob=new Blob([byteArray],{type:mimeType});const link=document.createElement("a");link.href=URL.createObjectURL(blob);link.download=fileName;link.click();URL.revokeObjectURL(link.href)};
const formatNumber=(value:unknown,useGrouping=true):string=>{return new Intl.NumberFormat("fa-IR",{useGrouping}).format(Number(value))};const pluralize=(count:number,singular:string,plural:string):string=>{return count>1?plural:singular};export{formatNumber,pluralize};
import store from"@/store/store";import{dismissAllModals,ditchModal,hideModal,modalSelector,modalSizes,type ModalSliceType,pushModal}from"@brdp/engine";import{isFunction}from"@brdp/utils";import{Flex,Modal}from"antd";import{useCallback}from"react";import{useDispatch,useSelector}from"react-redux";const useAppModal=function useAppModal(){const dispatch=useDispatch();const show=showAppModal;const hide=hideAppModal;const ditchAll=ditchAllModal;const Component=()=>{const modals=useSelector(modalSelector);const modalsList=Object.keys(modals);return modalsList.map((item)=>{const{element,id,title,icon,options}=modals[item]as ModalSliceType;const hasOnCancel=isFunction(options?.onCancel);const hasOnOk=isFunction(options?.onOk);const isClosable=options?.closable||false;return(<Modal key={item}closable={isClosable}open={options?.showing}okText={options?.okText||false}cancelText={options?.cancelText||false}centered title={title?(<Flex align="center"justify="flex-start"gap="small">{icon}{title}</Flex>):null}confirmLoading={options?.confirmLoading||false}width={modalSizes[options?.size??"default"]}maskClosable={false}keyboard={isClosable}rootClassName="brdp-modal brdp-ebill-modal"onCancel={(event)=>{if(isFunction(options?.onCancel)){options?.onCancel(event)}dispatch(hideModal({id}))}}onOk={(event)=>{if(isFunction(options?.onOk)){options?.onOk(event)}}}afterClose={()=>{dispatch(ditchModal({id}))}}footer={(_,{OkBtn,CancelBtn})=>{if(hasOnCancel||hasOnOk){return(<>{hasOnCancel&&<CancelBtn/>}{hasOnOk&&<OkBtn/>}</>)}return null}}>{element}</Modal>)})};return{show,ditchAll,hide,Component:useCallback(Component,[])}};export const showAppModal=({title,id,icon,element,options}:ModalSliceType)=>{store.dispatch(pushModal({element:element,id:id,title:title,icon:icon,options:{cancelText:options?.cancelText,okText:options?.okText,closable:options?.closable,confirmLoading:options?.confirmLoading,size:options?.size,showing:options?.showing,onCancel:options?.onCancel,onOk:options?.onOk}}));return()=>{hideAppModal(id)}};export const hideAppModal=(id:string)=>{store.dispatch(hideModal({id:id}))};export const ditchAllModal=()=>{store.dispatch(dismissAllModals())};export default useAppModal;
import{useState}from"react";interface monthItem{value:1|2|3|4|5|6|7|8|9|10|11|12;label:"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"|"10"|"11"|"12";disabled:boolean}type TMonthsList=monthItem[];const monthsList:TMonthsList=[{value:1,label:"1",disabled:false},{value:2,label:"2",disabled:false},{value:3,label:"3",disabled:false},{value:4,label:"4",disabled:false},{value:5,label:"5",disabled:false},{value:6,label:"6",disabled:false},{value:7,label:"7",disabled:false},{value:8,label:"8",disabled:false},{value:9,label:"9",disabled:false},{value:10,label:"10",disabled:false},{value:11,label:"11",disabled:false},{value:12,label:"12",disabled:false}];const useMonthSelector=()=>{const[monthsFrom,setMonthFrom]=useState(monthsList);const[monthsTo,setMonthTo]=useState(monthsList);const getMonthsList=(type:"from"|"to")=>type==="from"?monthsFrom:monthsTo;const setMonthsList=(type:"from"|"to",selectedMonth:number)=>{if(type==="from"){setMonthTo(monthsList.map((m)=>({...m,disabled:m.value<=selectedMonth})))}else{setMonthFrom(monthsList.map((m)=>({...m,disabled:m.value>=selectedMonth})))}};return{getMonthsList,setMonthsList}};export{useMonthSelector};
import{APIResponseType}from"@brdp/engine";export type ErrorType=string|APIResponseType<null>;export interface IApiResultData<T>{items:T[];pageNumber:number;pageSize:number;totalCount:number}
import{configureStore}from"@reduxjs/toolkit";import{modalReducer}from"@brdp/engine";const store=configureStore({reducer:{modalReducer:modalReducer},middleware:(getDefaultMiddleware)=>getDefaultMiddleware({serializableCheck:false}),devTools:process.env.NODE_ENV!=="production"});export type RootState=ReturnType<typeof store.getState>;export type AppDispatch=typeof store.dispatch;export default store;
import{useDispatch,useSelector,useStore}from"react-redux";import type{RootState,AppDispatch}from"@/store/store";export const useAppDispatch=useDispatch.withTypes<AppDispatch>();export const useAppSelector=useSelector.withTypes<RootState>();export const useAppStore=useStore.withTypes<RootState>();
import{type IBaratSearchHistoryParams}from"@/pages/configuration/hook/use-search-barat-history-api";import{type EbillFilesManagementDataType}from"@/pages/ebill-files-management/ebill-files-management-page";import{type ViewRequestDetailsProps}from"@/pages/ebill-files-management/modals/central-bank-management/components/central-bank-services/modals/view-request-details";import{type EditBaratFileQuery}from"@/pages/ebill-files-management/modals/edit-barat-file/edit-barat-file";import{URLDefinition}from"@brdp/engine";import{GeneralObject,objectToQueryString}from"@brdp/utils";const General={BASE:"api/ebill",EXTERNAL:"ExternalServices/EBill"}as const satisfies URLDefinition;const ExternalServices={GET_ASSURANCE_TYPE:()=>`/${General.EXTERNAL}/GetAssuranceType`,SEARCH_HISTORY:(params?:IBaratSearchHistoryParams)=>`/${General.EXTERNAL}/GetConfigurationHistory?${objectToQueryString(params)}`,GET_CITY:()=>`/${General.EXTERNAL}/GetCity`,GET_PROOF_LOAD:(billNumber:string)=>`/${General.EXTERNAL}/GetProofLoad?billNumber=${billNumber}`,GET_APPROVAL_REFERENCE:()=>`/${General.EXTERNAL}/GetApprovalReference`,GET_CONVERT_DEBT_TYPE:()=>`/${General.EXTERNAL}/GetConvertDebtType`,GET_ECONOMICAL_SECTION:()=>`/${General.EXTERNAL}/GetEconomicalSection`,GET_ECONOMICAL_SUB:(params?:string)=>`/${General.EXTERNAL}/GetEconomicalSection/${params}`,GET_CUSTOMER_TYPE:()=>`ExternalServices/Common/GetStaticType?Name=CustomerType&Subsystem=3`,GET_PERSON_TYPE:()=>`ExternalServices/Common/GetStaticType?Name=PersonTypes&Subsystem=3`,GET_GENDER_TYPE:()=>`ExternalServices/Common/GetStaticType?Name=GenderOptions&Subsystem=3`}as const satisfies URLDefinition;const EbillServices={GET_ALL_BILL_TYPES:()=>`/${General.BASE}/service/bill-types`,GET_ALL_BILL_STATUS:()=>`/${General.BASE}/service/bill-status`,GET_GENDER:()=>`/${General.BASE}/gender`,GET_BENEFICIARY_TYPES:()=>`/${General.BASE}/beneficiary-types`,GET_PERSON_TYPES:()=>`/${General.BASE}/person-types`};const Configuration={GET_HISTORY:()=>`/${General.BASE}/configuration/history`,GET_INFO:()=>`/${General.BASE}/configuration/info`,GET_NULL_INFO:()=>`/${General.BASE}/null-info`,POST_NEW:()=>`/${General.BASE}/configuration/add`}as const satisfies URLDefinition;const CommissionRate={CREATE:()=>`/${General.BASE}/basic-info/commission-rate/create`,UPDATE:()=>`/${General.BASE}/basic-info/commission-rate/update`,SEARCH:(params:GeneralObject)=>`/${General.BASE}/basic-info/commission-rate/search?${objectToQueryString(params)}`}as const satisfies URLDefinition;const ProofType={GET:()=>`/${General.BASE}/basic-info/proof-type`,SEARCH:(params:GeneralObject)=>`/${General.BASE}/basic-info/proof-type/search?${objectToQueryString(params)}`,UPDATE:(code:string)=>`/${General.BASE}/basic-info/proof-type/${code}/update`,CREATE:()=>`/${General.BASE}/basic-info/proof-type/create`,DEACTIVATE:(code:string)=>`/${General.BASE}/basic-info/proof-type/${code}/deactivate`,ACTIVATE:(code:string)=>`/${General.BASE}/basic-info/proof-type/${code}/activate`};const EbillTypesManagement={GET_EBILL_TYPE_BY_CODE:(code:string)=>`/${General.BASE}/type/get-by-code?code=${code}`,GET_EBILL_TYPES:(params:{code?:string;deletedType?:boolean;pageSize:number;pageNumber:number})=>`/${General.BASE}/type/search?${objectToQueryString(params)}`,POST_EBILL_TYPE:()=>`/${General.BASE}/type/create`,PATCH_EBILL_TYPE:()=>`/${General.BASE}/type/update`,DELETE_EBILL_TYPE:({code}:{code:string})=>`/${General.BASE}/type/${code}/delete`};const EbillFilesManagement={GET_EBILL_FILES:(params:EbillFilesManagementDataType)=>`/${General.BASE}/search?${objectToQueryString(params)}`,POST_CUSTOMER_ISSUANCE:()=>`/${General.BASE}/customer-issuance`,POST_CUSTOMER_ISSUANCE_BACK:()=>`/${General.BASE}/customer-issuance-back`,POST_BANK_ISSUANCE:()=>`/${General.BASE}/bank-issuance`,CREATE:()=>`/${General.BASE}/create`,LOAD:(params:EditBaratFileQuery)=>`/${General.BASE}/load?${objectToQueryString(params)}`,UPDATE:()=>`/${General.BASE}/update`,GET_EBILL_DETAIL:(billNumber:string)=>`/${General.BASE}/load-view-data?billNumber=${billNumber}`,CREATE_ASSURANCE:()=>`${General.BASE}/assurance/add`,GET_ASSURANCE_DATA:(billNumber:string)=>`/${General.BASE}/assurance/data?billNumber=${billNumber}`};const Sanction={GET_CAN_ADD_ITEM:(billNumber:string)=>`/${General.BASE}/sanction/can-add-item?billNumber=${billNumber}`,APPROVE_SANCTION:()=>`/${General.BASE}/sanction/approve`,GET_SANCTIONS_DATA:(billNumber:string)=>`/${General.BASE}/sanction/data?billNumber=${billNumber}`,GET_SANCTION_DETAILS:(sanctionSerial:number)=>`/${General.BASE}/sanction/details?sanctionSerial=${sanctionSerial}`,ADD_SANCTION:()=>`/${General.BASE}/sanction/add`};const Proof={LOAD:(billNumber:string)=>`/${General.BASE}/proof/load?billNumber=${billNumber}`,DELETE:({billNumber,proofType}:{billNumber:string;proofType:string})=>`/${General.BASE}/proof/${billNumber}/${proofType}/delete`,GET_PROOF_TYPES:()=>`/${General.BASE}/proof`,ADD:()=>`/${General.BASE}/proof/add`};const Spm={SEARCH:(params:{pageSize:number;pageNumber:number;billNumber:string})=>`/${General.BASE}/spm/search?${objectToQueryString(params)}`,VIEW:(params:ViewRequestDetailsProps)=>`/${General.BASE}/spm/view?${objectToQueryString(params)}`,ACTION:(billNumber:string)=>`/${General.BASE}/spm/action?billNumber=${billNumber}`,UNIQUE_NUMBER_PRE_ACTION:(billNumber:string)=>`/${General.BASE}/spm/unique-number/pre-action?billNumber=${billNumber}`,UNIQUE_NUMBER_DATA:(billNumber:string)=>`/${General.BASE}/spm/unique-number/data?billNumber=${billNumber}`,UNIQUE_NUMBER_REQUEST:()=>`/${General.BASE}/spm/unique-number/request`};const ReceiveAmount={GET_PRIMARY_DATA:(params:{billNumber:string;branchCode:string})=>`/${General.BASE}/receive-amount/load?${objectToQueryString(params)}`,GET_RECEIVED_AMOUNTS:(params:{billNumber:string;branchCode:string})=>`/${General.BASE}/receive-amount/get-received-amounts?${objectToQueryString(params)}`,RETURN:`/${General.BASE}/receive-amount/return`,RECEIVE:`/${General.BASE}/receive-amount/receive`}as const satisfies URLDefinition;export const Services={Configuration,CommissionRate,ExternalServices,EbillServices,ProofType,EbillTypesManagement,EbillFilesManagement,Sanction,Proof,Spm,ReceiveAmount}as const;
const Paths={Root:"/",Dashboard:"/dashboard/ebill",configurations:"/dashboard/ebill/configurations",baseInfo:"/dashboard/ebill/base-info",commissionRate:"/dashboard/ebill/base-info/commission-rate",proofTypes:"/dashboard/ebill/base-info/proof-types",filesManagement:"/dashboard/ebill/ebill-files-management",typesManagement:"/dashboard/ebill/ebill-types-management"}as const;export type PathKeys=keyof typeof Paths;export default Paths;
import CommissionRate from"@/pages/base-info/commission-rate/commission-rate-page";import ProofType from"@/pages/base-info/proof-type/proof-typs-page";import{BaratConfigurations}from"@/pages/configuration/barat-landing-page";import DashboardPage from"@/pages/dashboard/dashboard-page";import EbillFilesManagement from"@/pages/ebill-files-management/ebill-files-management-page";import EbillTypesManagement from"@/pages/ebill-types-management/ebill-types-management-page";import AppConfigProvider from"@/provider/app-config-provider";import ErrorPage from"@/routes/ErrorPage";import Paths from"@/routes/Paths";import{Typography}from"@brdp/ui";import{createBrowserRouter,Navigate}from"react-router";const routes=createBrowserRouter([{path:Paths.Dashboard,Component:AppConfigProvider,errorElement:<ErrorPage/>,children:[{index:true,element:<DashboardPage/>},{path:Paths.configurations,element:<BaratConfigurations/>},{path:Paths.commissionRate,element:<CommissionRate/>},{path:Paths.proofTypes,element:<ProofType/>},{path:Paths.filesManagement,element:<EbillFilesManagement/>},{path:Paths.typesManagement,element:<EbillTypesManagement/>},{path:"*",element:<Typography text="Ø²ÛŒØ±Ø³Ø§Ù…Ø§Ù†Ù‡ Ù…ÙˆØ±Ø¯ Ù†Ø¸Ø± Ù¾ÛŒØ¯Ø§ Ù†Ø´Ø¯!"/>}]},{path:"*",element:<Navigate to={Paths.Dashboard}replace/>}]);export default routes;
import Paths from"@/routes/Paths";import useAppModal from"@/utils/hooks/useAppModal";import{IconsList}from"@brdp/ui";import{ThemedLayout,type UiConfig}from"@brdp/ui/themed-layout";import{Spin,ThemeConfig}from"antd";import{ConfigProviderProps}from"antd/lib";import{Outlet}from"react-router";const theme:ThemeConfig={token:{colorPrimary:"#0C74B5",fontFamily:"IRANSansX",colorSplit:"#DFDFDF",colorTextPlaceholder:"rgba(0,0,0,0.25)"},components:{Card:{headerBg:"#f9fafd"},Collapse:{headerPadding:0},Menu:{darkItemSelectedBg:"rgba(0, 0, 0, 0.5)",darkSubMenuItemBg:"rgba(0, 0, 0, 0.15)",iconSize:20,darkPopupBg:"#222a32",itemHeight:48,itemMarginBlock:0,itemMarginInline:8},Typography:{colorTextHeading:"#0C74B5"},Layout:{siderBg:"linear-gradient(180deg, #2e3743 0%, #192227 100%)"}},cssVar:{prefix:"ant"},hashed:false};const themeConfig:ConfigProviderProps={theme};const useCurrentUserData={data:{resultData:{userInformationService:{roleTitle:"Ú©Ø§Ø±Ø´Ù†Ø§Ø³ Ø§Ø±Ø´Ø¯ ØªÙˆØ³Ø¹Ù‡ Ù…Ø­ØµÙˆÙ„",fullName:"Ù†ÛŒÙ…Ø§ Ù„Ø·ÛŒÙÛŒ"}}},isLoading:false,menuItems:[{key:"Ù…Ø¯ÛŒØ±ÛŒØª Ø§ÙˆØ±Ø§Ù‚",label:"Ù…Ø¯ÛŒØ±ÛŒØª Ø§ÙˆØ±Ø§Ù‚",icon:<IconsList.UserIcon/>},{key:"Ù…Ø¯ÛŒØ±ÛŒØª Ù…Ø´ØªØ±ÛŒØ§Ù†",label:"Ù…Ø¯ÛŒØ±ÛŒØª Ù…Ø´ØªØ±ÛŒØ§Ù†",icon:<IconsList.UserIcon/>}],currentMenuItems:[{key:Paths.configurations,label:"ØªÙ†Ø¸ÛŒÙ…Ø§Øª Ø¨Ø±Ø§Øª"},{key:Paths.baseInfo,label:"Ø§Ø·Ù„Ø§Ø¹Ø§Øª Ù¾Ø§ÛŒÙ‡",children:[{key:Paths.proofTypes,label:"Ø§Ù†ÙˆØ§Ø¹ Ù…Ø¯Ø±Ú©"},{key:Paths.commissionRate,label:"Ù†Ø±Ø® Ú©Ø§Ø±Ù…Ø²Ø¯"}]},{key:Paths.typesManagement,label:"Ù…Ø¯ÛŒØ±ÛŒØª Ø§Ù†ÙˆØ§Ø¹ Ø¨Ø±Ø§Øª"},{key:Paths.filesManagement,label:"Ù…Ø¯ÛŒØ±ÛŒØª Ù¾Ø±ÙˆÙ†Ø¯Ù‡â€ŒÙ‡Ø§ÛŒ Ø¨Ø±Ø§Øª"}]as UiConfig["appsMenu"]};const AppConfigProvider:React.FC<React.PropsWithChildren>=()=>{const{Component:ModalComponent}=useAppModal();const{data,isLoading,menuItems,currentMenuItems}=useCurrentUserData;const layoutConfig:UiConfig={rootPath:Paths.Root,loading:isLoading,appIcon:"HexaCubeIcon",logo:"",title:"Ø³Ø§Ù…Ø§Ù†Ù‡ Ø¨Ø±Ø§Øª Ø§Ù„Ú©ØªØ±ÙˆÙ†ÛŒÚ©",themeConfig:themeConfig,profile:{userRole:data?.resultData.userInformationService.roleTitle||"",label:data?.resultData.userInformationService.fullName||""},profileMenuItems:[{key:"/auth/signout",label:"Ø®Ø±ÙˆØ¬ Ø§Ø² Ù†Ø±Ù… Ø§ÙØ²Ø§Ø±",icon:<IconsList.LogoutIcon/>}],appsMenu:menuItems as UiConfig["appsMenu"],menuItems:currentMenuItems};return(<ThemedLayout uiConfig={layoutConfig}><title>{layoutConfig.title}</title><Spin fullscreen size="large"spinning={isLoading}/><Outlet/><ModalComponent/></ThemedLayout>)};export default AppConfigProvider;
import{defineMessages}from"@brdp/utils";const rawMessages={  closeWindow: {id: "ebill.button.closeWindow",defaultMessage: "بستن پنجره",},invalidField: {id: "ebill.validation.invalidField",defaultMessage: "مقدار فیلد {field} معتبر نمی‌باشد",},invalidWhitespace: {id: "ebill.validation.invalidWhitespace",defaultMessage: "نباید شامل فاصله باشد",},validateAddress: {id: "ebill.validation.Address",defaultMessage: "آدرس نامعتبر است!",},sanctionPeriod: {id: "ebill.sanctionPeriod",defaultMessage: "مدت اعتبار مصوبه",},} as const;/*** A collection of localized messages used throughout the application.* This object helps developers avoid hardcoding local-language texts directly in the app.* Instead, they can reference these predefined messages by their keys.** Example usage:* ```typescript* import { getFormatMessage } from "@brdp/utils";** const SampleComponent: React.FC = () => {*   const messages = getFormatMessage();**   ...* }** console.log(messages(ebillMessages.baratProfile)); // Output: "اطلاعات تشکیل برات"* ```*/type EbillMsgDictionary = typeof rawMessages;const ebillMessages = defineMessages(rawMessages) as EbillMsgDictionary;export { ebillMessages };
import{Content,GenerativeTable,IconsList,useTablePagination}from"@brdp/ui";import{showAppModal}from"@/utils/hooks/useAppModal";import CommissionRateEdit from"./components/commission-rate-edit";import CommissionRateAdd from"./components/commission-rate-add";import{FormFields,useControlledForm}from"@brdp/ui/form";import{useGetBillType}from"./hooks/use-get-bill-type";import{ICommissionRate,useGetCommissionRate}from"./hooks/use-get-search-commission-rate";import useGetAssuranceType from"./hooks/use-get-assurance-type";import{generalMessages,getFormatMessage}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";export interface IPayloadSearchCommissionRate{billTypeCode:string;assuranceTypeCode:string}const CommissionRate=()=>{const messages=getFormatMessage();const{tableFromIndex,tableConfig,currentPage,PAGE_SIZE,resetPage}=useTablePagination();const{ControlledForm}=useControlledForm<IPayloadSearchCommissionRate>({id:"commission-rate-add"});const{billTypeLoading,uniqueBillTypes}=useGetBillType();const{assuranceTypeLoading,assuranceTypeResponse}=useGetAssuranceType();const{handleSubmit,commissionRateResponse,commissionRateLoading,searchParams,commissionRateFetching}=useGetCommissionRate(currentPage,PAGE_SIZE,resetPage);const formFields:FormFields<IPayloadSearchCommissionRate>=[{type:"select",name:"billTypeCode",label:messages(ebillMessages.ebillTypeCodeName),data:{static:uniqueBillTypes},options:{searchable:true},validation:{rules:[{required:true,message:messages(ebillMessages.billTypeRequired)}]}},{type:"select",name:"assuranceTypeCode",label:messages(ebillMessages.assuranceTypeLabel),data:{static:assuranceTypeResponse},options:{searchable:true}}];const tableLength=commissionRateResponse?.resultData?.totalCount||0;return(<Content title={messages(ebillMessages.commissionRateLabel)}><ControlledForm fields={formFields}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.searchButton)}isLoading={billTypeLoading||assuranceTypeLoading}isSubmitting={commissionRateLoading}/><GenerativeTable<ICommissionRate>rowKey="id"title={`${messages(generalMessages.tableRowsCount)}:${tableLength}`}fromIndex={tableFromIndex}pagination={tableConfig(tableLength||0)}loading={commissionRateFetching}rowActions={[{id:"edit",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(ebillMessages.editTooltip)},action:(record)=>{showAppModal({id:"commission-rate-edit",title:messages(ebillMessages.editCommissionRateTitle),element:(<CommissionRateEdit commissionRateProps={record}handleSubmitGet={handleSubmit}searchParams={searchParams}assuranceType={assuranceTypeResponse}billType={uniqueBillTypes}/>),options:{size:"small",closable:true}})}}]}columns={[{title:messages(ebillMessages.billTypeLabel),dataIndex:"assuranceTypeName",key:"assuranceTypeName",align:"center"},{title:messages(ebillMessages.assuranceTypeLabel),dataIndex:"billTypeName",key:"billTypeName",align:"center"},{title:messages(ebillMessages.commissionCoefficient),dataIndex:"commissionRate",key:"commissionRate",align:"center",sorter:(a,b)=>a.commissionRate-b.commissionRate}]}data={commissionRateResponse?.resultData?.items||[]}tableHeaderActions={[{id:"action-commission-rate",mode:"expanded",actions:[{id:"add-commission-rate",appearance:{icon:<IconsList.PlusCircleIcon/>,tooltip:messages(ebillMessages.addCommissionRateTooltip)},disabled:billTypeLoading||assuranceTypeLoading,action:()=>{showAppModal({id:"add-commission-rate",title:messages(ebillMessages.addCommissionRateTooltip),element:(<CommissionRateAdd assuranceType={assuranceTypeResponse}billType={uniqueBillTypes}/>),options:{size:"small",closable:true}})}}]}]}/></Content>)};export default CommissionRate;
import{showAppModal}from"@/utils/hooks/useAppModal";import{Content,GenerativeTable,IconsList,Tag,useTablePagination}from"@brdp/ui";import{useControlledForm}from"@brdp/ui/form";import ProofTypeAdd from"./components/proof-type-add";import ProofTypeEdit from"./components/proof-type-edit";import useGetProofType from"./hooks/use-get-proof-type";import useActivationProofType from"./hooks/use-activation-proof-type";import{ebillMessages}from"@/locale/ebill-messages";import{generalMessages,getFormatMessage}from"@brdp/utils";export type IPayloadProofType={code:string;name:string;oldCode:string};const ProofType=()=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<IPayloadProofType>({id:"proof-type-search"});const{tableFromIndex,tableConfig,currentPage,PAGE_SIZE,resetPage}=useTablePagination();const{handleSubmit,proofTypeResponse,proofTypeFetching,searchParams}=useGetProofType(currentPage,PAGE_SIZE,resetPage);const{openModalActivation,openModalDeactivation,isLoading}=useActivationProofType(handleSubmit,searchParams);const tableData=proofTypeResponse?.resultData?.items.map((item)=>({...item,modificationDate:item.modificationDate?.split("-")[0]??""}))|| [];const totalCount=proofTypeResponse?.resultData?.totalCount||0;return(<Content title={messages(ebillMessages.proofTypeTitle)}><ControlledForm fields={[{type:"input",name:"code",label:messages(ebillMessages.proofTypeCode),validation:{rules:[{max:255,message:`${messages(ebillMessages.proofTypeCode)} ${messages(ebillMessages.invalidLength,{count:255})}`},{whitespace:true,message:messages(ebillMessages.invalidWhitespace,{field:messages(ebillMessages.proofTypeCode)})},{pattern:/^-?\d+$/,message:messages(ebillMessages.invalidField,{field:messages(ebillMessages.proofTypeCode)})}]}},{type:"input",name:"name",label:messages(ebillMessages.proofTypeName),validation:{rules:[{max:255,message:`${messages(ebillMessages.proofTypeName)} ${messages(ebillMessages.invalidLength,{count:255})}`},{whitespace:true,message:messages(ebillMessages.invalidWhitespace,{field:messages(ebillMessages.proofTypeName)})}]}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.searchButton)}/><GenerativeTable rowKey="code"title={`${messages(generalMessages.tableRowsCount)}:${totalCount}`}loading={proofTypeFetching||isLoading}columns={[{title:messages(ebillMessages.proofTypeCode),dataIndex:"code",key:"code",align:"center",sorter:(a,b)=>a.code.localeCompare(b.code)},{title:messages(ebillMessages.proofTypeName),dataIndex:"name",key:"name",align:"center"},{title:messages(generalMessages.status),dataIndex:"active",key:"active",align:"center",render:(active:boolean)=>active?(<Tag color="green">{messages(generalMessages.active)}</Tag>):(<Tag color="red">{messages(generalMessages.deActive)}</Tag>)},{title:messages(ebillMessages.editDate),dataIndex:"modificationDate",key:"modificationDate",align:"center",sorter:(a,b)=>a.modificationDate.localeCompare(b.modificationDate)}]}data={tableData}pagination={tableConfig(totalCount)}fromIndex={tableFromIndex}rowActions={[{id:"edit",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(generalMessages.actionEdit)},action:(record)=>{showAppModal({id:"proof-type-edit",title:messages(ebillMessages.editProofType),element:(<ProofTypeEdit proofTypeProps={{...record,oldCode:record.code}}handleSubmitGet={handleSubmit}searchParams={searchParams}/>),options:{size:"small",closable:true}})}},{id:"deactivation",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(ebillMessages.makeDisable)},action:openModalDeactivation,permissionField:(record)=>record.active,confirmMessage:(record)=>messages(ebillMessages.dynamicStatusConfirmation,{action:messages(generalMessages.deActive),target:messages(ebillMessages.proofType),name:record.name})},{id:"activation",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(ebillMessages.makeEnable)},action:openModalActivation,permissionField:(record)=>!record.active,confirmMessage:(record)=>messages(ebillMessages.dynamicStatusConfirmation,{action:messages(generalMessages.active),target:messages(ebillMessages.proofType),name:record.name})}]}tableHeaderActions={[{id:"action-proof-type",mode:"expanded",actions:[{id:"add-proof-type",appearance:{icon:<IconsList.PlusCircleIcon/>,tooltip:messages(ebillMessages.addProofType)},action:()=>{showAppModal({id:"proof-type-add",title:messages(ebillMessages.addProofType),element:<ProofTypeAdd/>,options:{size:"small",closable:true}})}}]}]}/></Content>)};export default ProofType;
import{useControlledForm}from"@brdp/ui/form";import{Alert}from"antd";import{hideAppModal}from"@/utils/hooks/useAppModal";import{generalMessages,getFormatMessage}from"@brdp/utils";import usePostCreateCommissionRate,{IPayloadCreateCommissionRate}from"../hooks/use-add-commission-rate";import{ebillMessages}from"@/locale/ebill-messages";interface SelectBoxType{label:string;value:string}interface IProps{assuranceType:SelectBoxType[];billType:SelectBoxType[]}const CommissionRateAdd=({assuranceType,billType}:IProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<IPayloadCreateCommissionRate>({id:"commission-rate-add"});const{commissionRateLoading,commissionRateIsError,commissionRateError,handleSubmit}=usePostCreateCommissionRate();const handleReset=()=>hideAppModal("add-commission-rate");return(<>{commissionRateIsError&&(<Alert type="error"message={commissionRateError?.message||messages(generalMessages.errorBadHappened)}banner={true}closable style={{marginBottom:"16px"}}/>)}<ControlledForm fields={[{type:"select",name:"billTypeCode",label:messages(ebillMessages.billTypeLabel),data:{static:billType},options:{searchable:true},layout:{span:4},validation:{rules:[{required:true,message:messages(ebillMessages.billTypeRequired)}]}},{type:"select",name:"assuranceTypeCode",label:messages(ebillMessages.assuranceTypeLabel),data:{static:assuranceType},options:{searchable:true},layout:{span:4},validation:{rules:[{required:true,message:messages(ebillMessages.assuranceTypeRequired)}]}},{type:"input",name:"commissionRate",label:messages(ebillMessages.commissionCoefficient),layout:{span:4},validation:{rules:[{required:true,message:messages(ebillMessages.commissionRateRequired)},{pattern:/^[0-9]+(\.[0-9]{1,2})?$/,message:messages(ebillMessages.invalidField,{field:messages(ebillMessages.commissionCoefficient)})}]}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.addCommissionRateTooltip)}resetLabel={messages(ebillMessages.cancelButton)}onReset={handleReset}reset={true}isSubmitting={commissionRateLoading}/></>)};export default CommissionRateAdd;
export interface IPayloadCreateCommissionRate{billTypeCode:string;assuranceTypeCode:string;commissionRate:number}import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,usePost}from"@brdp/engine";import{generalMessages,getFormatMessage}from"@brdp/utils";const useAddCommissionRate=()=>{const messages=getFormatMessage();const{mutate:commissionRateMutate,isLoading:commissionRateLoading,isError:commissionRateIsError,error:commissionRateError}=usePost<unknown,IPayloadCreateCommissionRate>(Services.CommissionRate.CREATE,{raw:true});const handleSubmit=async(values:IPayloadCreateCommissionRate)=>{try{const res=await commissionRateMutate({...values,commissionRate:Number(values.commissionRate)});if(res?.isSuccess){showToast({title:messages(generalMessages.successful),description:messages(ebillMessages.succeedAddCommissionRate)},"success","commission-rate-toast");hideAppModal("add-commission-rate")}}catch(error){console.error("Error submitting commission rate:",error)}};return{commissionRateMutate,commissionRateLoading,commissionRateIsError,commissionRateError,handleSubmit}};export default useAddCommissionRate;
import{Services}from"@/services/url";import{useGet}from"@brdp/engine";export interface AssuranceType{name:string;code:string}const useGetAssuranceType=()=>{const url=Services.ExternalServices.GET_ASSURANCE_TYPE();const{data,isLoading:assuranceTypeLoading,error:assuranceTypeError,isError:isAssuranceTypeError}=useGet<AssuranceType[]>(["assurance-type"],url);const assuranceTypeResponse=data?.resultData.map((item)=>({label:`${item.name} - ${item.code}`,value:item.code}))||[];return{assuranceTypeLoading,assuranceTypeError,isAssuranceTypeError,assuranceTypeResponse}};export default useGetAssuranceType;
import{useGet}from"@brdp/engine";import{Services}from"@/services/url";import{useState}from"react";import{IPayloadSearchCommissionRate}from"../commission-rate-page";import{IApiResultData}from"@/types/global";export interface ICommissionRate{assuranceTypeCode:string;assuranceTypeName:string;billTypeCode:string;billTypeName:string;commissionRate:number}export const useGetCommissionRate=(pageNumber:number,pageSize:number,resetPage:()=>void)=>{const[params,setParams]=useState<IPayloadSearchCommissionRate>();const url=params?Services.CommissionRate.SEARCH({...params,pageNumber,pageSize}):"";const{data:commissionRateResponse,isLoading:commissionRateLoading,isFetching:commissionRateFetching,error:commissionRateError,isError:isCommissionRateError,mutate:commissionRateMutate}=useGet<IApiResultData<ICommissionRate>|undefined>(["search-commission-rate"],url);const handleSubmit=async(formValue?:IPayloadSearchCommissionRate)=>{setParams(formValue);try{await commissionRateMutate();resetPage()}catch(error){console.error("Search error:",error)}};return{searchParams:params,handleSubmit,commissionRateResponse,commissionRateLoading,commissionRateFetching,commissionRateError,isCommissionRateError,commissionRateMutate}};
import{Services}from"@/services/url";import{showToast}from"@brdp/engine";import{IProofType}from"./use-get-proof-type";import{generalMessages,getFormatMessage}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";import{usePatch}from"@brdp/engine";import{IPayloadProofType}from"../proof-typs-page";const useActivationProofType=(handleSubmit?:(formValue?:IPayloadProofType)=>Promise<void>,searchParams?:IPayloadProofType)=>{const messages=getFormatMessage();const activateUrlFn=(params:unknown)=>{const code=(params as{code:string}).code;return Services.ProofType.ACTIVATE(code)};const deactivateUrlFn=(params:unknown)=>{const code=(params as{code:string}).code;return Services.ProofType.DEACTIVATE(code)};const{mutate:activateMutate,isLoading:activateLoading}=usePatch<unknown,unknown>(activateUrlFn,{raw:true});const{mutate:deactivateMutate,isLoading:deactivateLoading}=usePatch<unknown,unknown>(deactivateUrlFn,{raw:true});const handleAction=async(isActivate:boolean,{code}:IProofType)=>{const actionVerb=isActivate?messages(generalMessages.active):messages(generalMessages.deActive);const successMessage=messages(ebillMessages.dynamicStatusSuccess,{target:messages(ebillMessages.proofType),action:actionVerb});const errorMessage=messages(ebillMessages.dynamicStatusError,{target:messages(ebillMessages.proofType),action:actionVerb});const consoleError=messages(ebillMessages.dynamicStatusConsoleError,{action:isActivate?"activating":"deactivating",target:"proof type"});try{const mutate=isActivate?activateMutate:deactivateMutate;const res=await mutate({code});if(res?.isSuccess){showToast({title:messages(generalMessages.successful),description:res.message||successMessage},"success","proof-type-toast");handleSubmit?.(searchParams)}else{showToast({title:messages(generalMessages.error),description:res?.message||errorMessage},"error","proof-type-toast")}}catch(err){console.error(consoleError,err);showToast({title:messages(generalMessages.error),description:errorMessage},"error","proof-type-toast")}};const openModalActivation=(proofType:IProofType)=>handleAction(true,proofType);const openModalDeactivation=(proofType:IProofType)=>handleAction(false,proofType);return{openModalActivation,openModalDeactivation,isLoading:activateLoading||deactivateLoading}};export default useActivationProofType;
import CustomerSearch from"@/components/business-components/customerSearch/customer-search";import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{convertSelectboxData,type SelectboxDataType}from"@/utils/convert-selectbox-data";import{showAppModal}from"@/utils/hooks/useAppModal";import{formatNumber}from"@/utils/string-format";import{showToast,useGet}from"@brdp/engine";import{Content,DocumentWithLinesIcon,GenerativeTable,IconsList,Tag,useTablePagination}from"@brdp/ui";import FormGenerator,{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,numbersOnly,removeEmptyValues,validateExactLength,validateMaxLength}from"@brdp/utils";import{useEffect,useState}from"react";import{flushSync}from"react-dom";import{useGetBillType}from"../base-info/commission-rate/hooks/use-get-bill-type";import AddBaratFile from"./modals/add-barat-file/add-barat-file";import BankIssuance from"./modals/bank-issuance/bank-issuance";import CentralBankManagement from"./modals/central-bank-management/central-bank-management-modal";import CustomerIssuanceBack from"./modals/customer-issuance-back/customer-issuance-back";import CustomerIssuance from"./modals/customer-issuance/customer-issuance";import{EbillCommissions}from"./modals/ebill-commissions/ebill-commissions";import EditBaratFile from"./modals/edit-barat-file/edit-barat-file";import{MinistryOfEconomy}from"./modals/ministry-of-economy/ministry-of-economy";import ProofManagement from"./modals/proof/proof-management-modal";import ReceiveAmount from"./modals/receive-amount/receive-amount";import SanctionApprove from"./modals/sanction-approve/sanction-approve";import Sanction from"./modals/sanction/sanction";import ViewEbillDetail from"./modals/detail-view/view-ebill-detail";type EbillFilesManagementFormType={billTypeCode:string;customerNumber:string;centralBankCode:string;billNumber:string;startDateFrom:string;startDateTo:string;expireDateFrom:string;expireDateTo:string;amountFrom:number;amountTo:number;status:string};export type EbillFilesManagementDataType={billTypeCode?:string;customerNumber?:string;centralBankCode?:string;billNumber?:string;startDateFrom?:string;startDateTo?:string;expireDateFrom?:string;expireDateTo?:string;amountFrom?:number;amountTo?:number;status?:string;pageSize:number;pageNumber:number};type EbillFileType={centralBankCode:string;billNumber:string;enable:boolean;statusName:string;statusCode:string;startDate:string;endDate:string;amount:number;customerNumber:string;duration:number;billTypeCode:string;billTypeName:string;action:{update:boolean;view:boolean;delete:boolean;certificate:boolean;sanction:boolean;transfer:boolean;approve:boolean;assurance:boolean;centralBank:boolean;economyMinistry:boolean;issuance:boolean;commission:boolean;receivePayment:boolean;payPayment:boolean;convertDebt:boolean;spmManagement:boolean;settlement:boolean;customerIssuance:boolean;customerIssuanceBack:boolean;ministryTax:boolean;receiveCash:boolean}};type EbillFilesManagementResponseType={pageNumber:number;pageSize:number;totalCount:number;items:EbillFileType[]};const CustomTag:React.FC<{title:string;type:string}>={({title,type})=>{switch(type){case"ELECTRONIC_BILL_ISSUED":return(<Tag bordered={false}color="#1991FF0D"style={{color:"#105EA6"}}>{title}</Tag>);case"ELECTRONIC_BILL_PAYED":return(<Tag bordered={false}color="#0081790F"style={{color:"#008179"}}>{title}</Tag>);case"ELECTRONIC_BILL_SETTLED":return(<Tag bordered={false}color="#F4F4F5"style={{color:"#272937"}}>{title}</Tag>);case"ELECTRONIC_BILL_APPROVED":return(<Tag bordered={false}color="#43A8240D"style={{color:"#2C6D17"}}>{title}</Tag>);case"ELECTRONIC_BILL_HAS_MINISTRY_TAX":return(<Tag color="#FFFFFF"style={{color:"#272937",border:"1px solid #E5E5E7"}}>{title}</Tag>);case"ELECTRONIC_BILL_BANK_ISSUED":return(<Tag bordered={false}color="#7C00810F"style={{color:"#7C0081"}}>{title}</Tag>);case"ELECTRONIC_BILL_DELETED":return(<Tag bordered={false}color="#F1380E0D"style={{color:"#9D2409"}}>{title}</Tag>);case"ELECTRONIC_BILL_CREATED":return(<Tag bordered={false}color="#48A4EA1A"style={{color:"#2F6B98"}}>{title}</Tag>);default:return<Tag>{title}</Tag>}};const EbillFilesManagement:React.FC=()=>{const messages=getFormatMessage();const{billTypeLoading,uniqueBillTypes}=useGetBillType();const[searchData,setSearchData]=useState<EbillFilesManagementFormType>({billTypeCode:"",customerNumber:"",centralBankCode:"",billNumber:"",startDateFrom:"",startDateTo:"",expireDateFrom:"",expireDateTo:"",amountFrom:0,amountTo:0,status:""});const{tableConfig,PAGE_SIZE,resetPage,tableFromIndex,currentPage}=useTablePagination();const{ControlledForm}=useControlledForm<EbillFilesManagementFormType>({id:"ebillFilesManagementForm"});const{data:allBillStatusData,isFetching:allBillStatusIsFetching}=useGet<SelectboxDataType[]>(["all-bill-status"],Services.EbillServices.GET_ALL_BILL_STATUS());const{data,isFetching,isLoading,mutate}=useGet<EbillFilesManagementResponseType>(["ebill-files-management"],Services.EbillFilesManagement.GET_EBILL_FILES({pageSize:PAGE_SIZE,pageNumber:currentPage,...removeEmptyValues<Partial<EbillFilesManagementFormType>>({...searchData})}),{enable:false,hasPagination:true});const handleSearch=(values:EbillFilesManagementFormType)=>{flushSync(()=>setSearchData(values));mutate().then((result)=>{if(result?.status==="success"&&!result?.data?.isSuccess){showToast({title:messages(generalMessages.error),description:messages(generalMessages.errorBadResponse)},"error","ebill-files-management")}});resetPage()};useEffect(()=>{if(data?.resultData){mutate()}},[currentPage,PAGE_SIZE]);return(<Content title={messages(ebillMessages.ebillFilesManagement)}><ControlledForm isSubmitting={isLoading}submitLabel={messages(generalMessages.search)}submitButtonIcon={<IconsList.SearchIcon/>}onSubmit={(values)=>handleSearch(values)}fields={[{name:"billTypeCode",type:"select",label:messages(ebillMessages.ebillTypeCodeName),loading:billTypeLoading,options:{placeholder:messages(generalMessages.doChoose),searchable:true},data:{static:uniqueBillTypes}},{type:"business",name:"customerNumber",label:messages(generalMessages.customerNumber),element:CustomerSearch},{name:"centralBankCode",type:"input",label:messages(ebillMessages.centralBankCode),validation:{rules:[validateExactLength(16),numbersOnly()]}},{name:"billNumber",type:"input",label:messages(ebillMessages.ebillFileNumber)},{name:"startDateFrom",type:"business",element:FormGenerator.DatePickerField,label:messages(ebillMessages.creationDateFrom),options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{maxDate:"startDateTo"}}},{name:"startDateTo",type:"business",element:FormGenerator.DatePickerField,label:messages(ebillMessages.creationDateTo),options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{minDate:"startDateFrom"}}},{name:"expireDateFrom",type:"business",element:FormGenerator.DatePickerField,label:messages(ebillMessages.expireDateFrom),options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{maxDate:"expireDateTo"}}},{name:"expireDateTo",type:"business",element:FormGenerator.DatePickerField,label:messages(ebillMessages.expireDateTo),options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{minDate:"expireDateFrom"}}},{name:"amountFrom",type:"input",label:messages(ebillMessages.ebillAmountFrom),validation:{rules:[validateMaxLength(15),numbersOnly()]}},{name:"amountTo",type:"input",label:messages(ebillMessages.ebillAmountTo),validation:{rules:[validateMaxLength(15),numbersOnly()]}},{name:"status",type:"select",label:messages(generalMessages.status),loading:allBillStatusIsFetching,options:{placeholder:messages(generalMessages.doChoose)},data:{static:allBillStatusData?convertSelectboxData(allBillStatusData?.resultData):[]}}]}/><GenerativeTable<EbillFileType>rowKey="billNumber"fromIndex={tableFromIndex}data={data?.resultData?.items||[]}pagination={tableConfig(data?.resultData?.totalCount||0)}title={`${messages(generalMessages.tableRowsCount)}:${data?.resultData?.totalCount||0}`}loading={isFetching}tableHeaderActions={[{id:"barat-file",mode:"expanded",actions:[{id:"add-barat-file",appearance:{icon:<IconsList.PlusCircleIcon/>,tooltip:messages(ebillMessages.addNewBarat)},action:()=>showAppModal({id:"add-barat-file",title:messages(ebillMessages.addNewBarat),element:<AddBaratFile mutate={mutate}/>,options:{size:"default",closable:true}})}]}]}columns={[{key:"billNumber",dataIndex:"billNumber",title:messages(ebillMessages.ebillFileNumber),align:"center"},{key:"customerNumber",dataIndex:"customerNumber",title:messages(generalMessages.customerNumber),align:"center"},{key:"centralBankCode",dataIndex:"centralBankCode",title:messages(ebillMessages.centralBankCode),align:"center"},{key:"startDate",dataIndex:"startDate",title:messages(ebillMessages.fileCreationDate),align:"center",sorter:(a,b)=>a.startDate.localeCompare(b.startDate)},{key:"endDate",dataIndex:"endDate",title:messages(ebillMessages.fileExpirationDate),align:"center",sorter:(a,b)=>a.endDate.localeCompare(b.endDate)},{key:"amount",dataIndex:"amount",title:messages(ebillMessages.ebillAmount),render:(col)=>{return<p>{formatNumber(col)+" "+messages(ebillMessages.rial)}</p>},align:"center",sorter:(a,b)=>{const amountA=Number(a.amount)||0;const amountB=Number(b.amount)||0;return amountA-amountB}},{key:"statusName",dataIndex:"statusName",title:messages(generalMessages.status),render:(col,row)=><CustomTag title={col}type={row.statusCode}/>,align:"center"}]}rowActions={[{id:"1",appearance:{icon:<IconsList.EyeIcon/>,tooltip:messages(generalMessages.actionView)},action:(value)=>{showAppModal({id:"ebill-detail-view",icon:<IconsList.EyeIcon/>,title:messages(ebillMessages.viewDetailBaratManagement),element:<ViewEbillDetail billNumber={value.billNumber}/>,options:{onCancel:()=>{},size:"wide",closable:true,cancelText:messages(ebillMessages.closeWindow)}})},permissionField(record){return record.action.view}},{id:"2",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(generalMessages.actionEdit)},action:(value)=>{showAppModal({id:"edit-barat-file",title:messages(ebillMessages.editFileBarat,{billNumber:value?.billNumber||""}),element:(<EditBaratFile mutate={mutate}billNumber={value?.billNumber||""}/>),options:{size:"default",closable:true}})}},{id:"3",appearance:{icon:<IconsList.DeleteIcon/>,tooltip:messages(generalMessages.actionDelete)},action:()=>{},permissionField(record){return record.action.delete}},{id:"4",appearance:{icon:"",tooltip:messages(ebillMessages.certificates)},action:(values)=>{showAppModal({id:"proofModal",title:messages(ebillMessages.certificates),element:<ProofManagement{...values}/>,options:{size:"wide",closable:true}})},permissionField(record){return record.action.certificate}},{id:"5",appearance:{icon:"",tooltip:messages(ebillMessages.sanction)},action:(values)=>{showAppModal({id:"sanction-barat-file",icon:<IconsList.EyeIcon/>,title:messages(ebillMessages.sanction),element:<Sanction{...values}/>,options:{size:"default",closable:true}})},permissionField(record){return record.action.sanction}},{id:"6",appearance:{icon:"",tooltip:messages(ebillMessages.transfer)},action:()=>{},permissionField(record){return record.action.transfer}},{id:"7",appearance:{icon:"",tooltip:messages(ebillMessages.approve)},action:(value)=>{showAppModal({id:"approve-barat-file",title:messages(ebillMessages.approve),element:<SanctionApprove{...value}/>,icon:<IconsList.DocumentWithLinesIcon/>,options:{size:"default",closable:true}})},permissionField(record){return record.action.approve}},{id:"8",appearance:{icon:"",tooltip:messages(ebillMessages.assurance)},action:()=>{},permissionField(record){return record.action.assurance}},{id:"economy-ministry-action",appearance:{icon:"",tooltip:messages(ebillMessages.economyMinistry)},action:()=>{showAppModal({id:"economy-ministry-modal",title:messages(ebillMessages.economyMinistryServicesManagement),icon:<DocumentWithLinesIcon/>,element:<MinistryOfEconomy/>,options:{onCancel:()=>{},cancelText:messages(generalMessages.close),closable:true}})},permissionField(record){return record.action.economyMinistry}},{id:"10",appearance:{icon:"",tooltip:messages(ebillMessages.ministryTax)},action:()=>{},permissionField(record){return record.action.ministryTax}},{id:"11",appearance:{icon:"",tooltip:messages(ebillMessages.issuance)},action:(values)=>{showAppModal({id:"bankIssuanceModal",title:messages(ebillMessages.issuance),element:(<BankIssuance billNumber={values.billNumber}customerNumber={values.customerNumber}getEbillFiles={mutate}/>),options:{size:"small",closable:true}})},permissionField(record){return record.action.issuance}},{id:"ebill-commission",appearance:{icon:"",tooltip:messages(ebillMessages.commission)},action:()=>{showAppModal({id:"ebill-commission-modal",title:messages(ebillMessages.ebillCommissions),icon:<DocumentWithLinesIcon/>,element:<EbillCommissions/>,options:{onCancel:()=>{},cancelText:messages(generalMessages.close),closable:true}})},permissionField(record){return record.action.commission}},{id:"13",appearance:{icon:"",tooltip:messages(ebillMessages.receivePayment)},action:(values)=>{showAppModal({id:"receiveAmountModal",title:messages(ebillMessages.receivePayment),icon:<IconsList.DocumentWithLinesIcon/>,element:<ReceiveAmount{...values}/>,options:{size:"wide",closable:true,cancelText:messages(generalMessages.close),onCancel:()=>{}}})},permissionField(record){return record.action.receivePayment}},{id:"14",appearance:{icon:"",tooltip:messages(ebillMessages.payPayment)},action:()=>{},permissionField(record){return record.action.payPayment}},{id:"15",appearance:{icon:"",tooltip:messages(ebillMessages.convertDebt)},action:()=>{},permissionField(record){return record.action.convertDebt}},{id:"16",appearance:{icon:"",tooltip:messages(ebillMessages.centralBankManagement)},action:(values)=>{showAppModal({id:"centralBankManagementModal",title:messages(ebillMessages.centralBankManagement),element:<CentralBankManagement{...values}getEbillFiles={mutate}/>,options:{closable:true,size:"wide"}})}},{id:"17",appearance:{icon:"",tooltip:messages(ebillMessages.settlement)},action:()=>{},permissionField(record){return record.action.settlement}},{id:"18",appearance:{icon:"",tooltip:messages(ebillMessages.customerIssuance)},action:(values)=>{showAppModal({id:"customerIssuanceModal",title:messages(ebillMessages.customerIssuance),element:(<CustomerIssuance billNumber={values.billNumber}customerNumber={values.customerNumber}getEbillFiles={mutate}/>),options:{size:"small"}})},permissionField(record){return record.action.customerIssuance}},{id:"19",appearance:{icon:"",tooltip:messages(ebillMessages.customerIssuanceBack)},action:(values)=>{showAppModal({id:"customerIssuanceBackModal",title:messages(ebillMessages.customerIssuanceBack),element:(<CustomerIssuanceBack billNumber={values.billNumber}customerNumber={values.customerNumber}getEbillFiles={mutate}/>),options:{size:"small"}})},permissionField(record){return record.action.customerIssuanceBack}}]}/></Content>)};export default EbillFilesManagement;
import{ebillMessages}from"@/locale/ebill-messages";import{Steps}from"@brdp/ui";import{currentJalali,getFormatMessage}from"@brdp/utils";import{useState,useMemo,useCallback}from"react";import InitialInfoFirstStep from"./components/initial-info-first-step";import BillSpecificationsSecondStep from"./components/bill-specifications-second-step";import SamatThirdStep from"./components/samat-third-step";import BeneficiaryFourthStep from"./components/beneficiary-fourth-step";import GuarantorFifthStep from"./components/guarantor-fifth-step";export type BillOfExchangeForm={billTypeCode:string;depositNumber:string;ibanNumber:string;customerNumber:string;nationalCode:string;billApplicantPlace:string;billApplicantSanaCode:string;centralBankCode:string;taxStampNumber:string;requestDate:string;transferable:boolean;startDate:string;expireDate:string;billTakerName:string;billTakerPlace:string;billTakerSanaCode:string;billPayPlace:string;advisorName:string;advisorCode:string;advisorSwiftCode:string;advisorBranchCode:string;economicalSection:string;subEconomicalSection:string;inquiryNumber:string;billTotalWorth:string;intermediaryDeposit:string;comment:string;taxComment:string;isBankCustomer:"BANK_CUSTOMER"|"OTHER_BANK_CUSTOMER";beneficiaryCustomerNumber:string;beneficiaryNationalCode:string;beneficiaryName:string;beneficiaryBirthCertificateNumber:string;beneficiaryRegisterNumber:string;beneficiaryShahabCode:string;beneficiaryBirthDate:string;beneficiaryRegisterDate:string;beneficiaryPhoneNumber:string;beneficiaryBirthCity:string;beneficiaryRegisterCity:string;beneficiaryPostalCode:string;beneficiaryIbanNumber:string;beneficiarySanaCode:string;beneficiaryAddress:string;noneBeneficiaryType:string;noneBeneficiaryGender:string;guarantors:guarantors;user:string;currentBranchCode:string;branchName:string};export type guarantors={guaranteePercent:number;customerNumber:string;sanaCode:string}[];export const initialElectronicBill:BillOfExchangeForm={billTypeCode:"",depositNumber:"",customerNumber:"",nationalCode:"1234567890",ibanNumber:"IR123456789123456789123456",billApplicantPlace:"",billApplicantSanaCode:"",centralBankCode:"",taxStampNumber:"",requestDate:currentJalali(),transferable:false,startDate:"",expireDate:"",billTakerName:"بانک پاسارگاد",billTakerPlace:"",billTakerSanaCode:"",billPayPlace:"",advisorName:"پاسارگاد",advisorCode:"57",advisorSwiftCode:"BKBPIRTHXXX",economicalSection:"",subEconomicalSection:"",inquiryNumber:"",billTotalWorth:"",intermediaryDeposit:"",comment:"",taxComment:"",isBankCustomer:"BANK_CUSTOMER",beneficiaryCustomerNumber:"",beneficiaryNationalCode:"9876543210",beneficiaryName:"",beneficiaryBirthCertificateNumber:"",beneficiaryRegisterNumber:"",beneficiaryShahabCode:"",beneficiaryBirthDate:"",beneficiaryRegisterDate:"",beneficiaryPhoneNumber:"",beneficiaryBirthCity:"",beneficiaryRegisterCity:"",beneficiaryPostalCode:"",beneficiaryIbanNumber:"",beneficiarySanaCode:"",beneficiaryAddress:"",noneBeneficiaryType:"",noneBeneficiaryGender:"",guarantors:[],user:"current_user",currentBranchCode:"119",branchName:"پاسارگاد",advisorBranchCode:"119"};type IProps={mutate:()=>void};const AddBaratFilePage:React.FC<IProps>=({mutate})=>{const messages=getFormatMessage();const[current,setCurrent]=useState(0);const[formValueState,setFormValueState]=useState<BillOfExchangeForm>(initialElectronicBill);const next=useCallback(()=>setCurrent((prev)=>prev+1),[]);const prev=useCallback(()=>setCurrent((prev)=>prev-1),[]);const updateFormState=useCallback((updates:Partial<BillOfExchangeForm>)=>{setFormValueState((prevState)=>({...prevState,...updates}))},[]);const steps=useMemo(()=>[{title:messages(ebillMessages.initialInfo),content:(<InitialInfoFirstStep formValueState={formValueState}updateFormState={updateFormState}next={next}/>)},{title:messages(ebillMessages.billSpecifications),content:(<BillSpecificationsSecondStep formValueState={formValueState}updateFormState={updateFormState}next={next}prev={prev}/>)},{title:messages(ebillMessages.samatInfo),content:(<SamatThirdStep formValueState={formValueState}updateFormState={updateFormState}next={next}prev={prev}/>)},{title:messages(ebillMessages.beneficiaryInfo),content:(<BeneficiaryFourthStep formValueState={formValueState}updateFormState={updateFormState}next={next}prev={prev}/>)},{title:messages(ebillMessages.guaranteeInfo),content:(<GuarantorFifthStep prev={prev}updateFormState={updateFormState}formValueState={formValueState}mutate={mutate}/>)}],[formValueState,messages,next,prev,updateFormState]);return<Steps current={current}steps={steps}/>};export default AddBaratFilePage;
import{useControlledForm}from"@brdp/ui/form";import{BillOfExchangeForm}from"../add-barat-file";import FormGenerator from"@brdp/ui/form";import{useGetBaratCity}from"@/pages/configuration/hook/use-get-barat-city-api";import{useGet}from"@brdp/engine";import{Services}from"@/services/url";import{ebillMessages}from"@/locale/ebill-messages";import{generalMessages,getFormatMessage,requiredFiled}from"@brdp/utils";import CustomerSearch from"@/components/business-components/customerSearch/customer-search";import{convertSelectboxData}from"@/utils/convert-selectbox-data";type OptionData={name:string;code:string};type IProps={next:()=>void;prev:()=>void;updateFormState:(updates:Partial<BillOfExchangeForm>)=>void;formValueState:BillOfExchangeForm};const BeneficiaryFourthStep=({next,prev,updateFormState,formValueState}:IProps)=>{const messages=getFormatMessage();const{ControlledForm,fieldWatch,setFieldsValue}=useControlledForm<BillOfExchangeForm>({id:"step3-add-barat-file"});const watchPersonType=fieldWatch("noneBeneficiaryType");const isBankCustomer=formValueState?.isBankCustomer==="BANK_CUSTOMER";const isRealPerson=watchPersonType==="REAL"||watchPersonType==="FOREIGN_REAL";const isLegalPerson=watchPersonType==="LEGAL"||watchPersonType==="FOREIGN_LEGAL";const isForeignPerson=watchPersonType==="FOREIGN_REAL"||watchPersonType==="FOREIGN_LEGAL";const{fetchedCity,isLoadingCity}=useGetBaratCity();const{isLoading:personTypeLoading,data:personTypeData}=useGet<OptionData[]>(["person-type"],Services.EbillServices.GET_PERSON_TYPES());const{isLoading:genderTypeLoading,data:genderTypeData}=useGet<OptionData[]>(["gender-type"],Services.EbillServices.GET_GENDER());const validateNationalCode=(value:string)=>{if(!value)return Promise.reject(messages(ebillMessages.enterNationalIdCode));if(watchPersonType==="REAL"&&value.length!==10){return Promise.reject(messages(ebillMessages.nationalCodeMustBe10Digits))}if(watchPersonType==="LEGAL"&&value.length!==11){return Promise.reject(messages(ebillMessages.nationalIdMustBe11Digits))}if(isForeignPerson&&(value.length<8||value.length>13)){return Promise.reject(messages(ebillMessages.foreignCodeBetween8To13Digits))}if(value===formValueState.nationalCode){return Promise.reject(messages(ebillMessages.beneficiaryCannotBeSameAsDrawer))}return Promise.resolve()};const handleSubmit=(formValue:BillOfExchangeForm)=>{updateFormState(formValue);next()};const handleCancel=()=>{prev()};const bankCustomerFields=[{type:"business",element:CustomerSearch,name:"beneficiaryCustomerNumber",label:messages(ebillMessages.searchCustomer),validation:{rules:[requiredFiled()]},layout:{span:2},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryCustomerNumber:""})}return!!values?.centralBankCode||!isBankCustomer}},{type:"input",name:"__beneficiaryPersonType",label:messages(ebillMessages.personType),layout:{span:2},disabled:true},{type:"input",name:"__beneficiaryGender",label:messages(generalMessages.genderType),layout:{span:2},disabled:true},{type:"input",name:"beneficiaryNationalCode",label:messages(ebillMessages.nationalId),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryNationalCode:""})}return true}},{type:"input",name:"beneficiaryName",label:messages(ebillMessages.beneficiaryBillName),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryName:""})}return true}},{type:"input",name:"beneficiaryBirthCertificateNumber",label:messages(ebillMessages.beneficiaryCertificateNumber),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryBirthCertificateNumber:""})}return true}},{type:"input",name:"beneficiaryRegisterNumber",label:messages(ebillMessages.beneficiaryRegistrationNumber),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryRegisterNumber:""})}return true}},{type:"input",name:"beneficiaryShahabCode",label:messages(ebillMessages.beneficiaryShahabCode),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryShahabCode:""})}return true}},{type:"business",name:"beneficiaryBirthDate",label:messages(ebillMessages.beneficiaryBirthDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"}},layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryBirthDate:""})}return true}},{type:"business",name:"beneficiaryRegisterDate",label:messages(ebillMessages.beneficiaryRegistrationDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"}},layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryRegisterDate:""})}return true}},{type:"input",name:"beneficiaryPhoneNumber",label:messages(ebillMessages.beneficiaryContactNumber),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryPhoneNumber:""})}return true}},{type:"input",name:"beneficiaryPostalCode",label:messages(generalMessages.postalCode),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryPostalCode:""})}return true}},{type:"business",name:"beneficiaryIbanNumber",label:messages(ebillMessages.beneficiaryIbanNumber),element:FormGenerator.IBANField,validation:{rules:[requiredFiled()]},options:{extraProps:{addIR:true}},layout:{span:2},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryIbanNumber:""})}return!!values?.centralBankCode||!isBankCustomer}},{type:"input",name:"beneficiarySanaCode",label:messages(ebillMessages.beneficiarySanaCode),layout:{span:2},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiarySanaCode:""})}return!!values?.centralBankCode||!isBankCustomer}},{type:"textarea",name:"beneficiaryAddress",label:messages(generalMessages.address),layout:{span:4},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryAddress:""})}return true}}];const nonBankCustomerFields=[{type:"select",name:"noneBeneficiaryType",label:messages(ebillMessages.personType),layout:{span:2},data:{static:convertSelectboxData(personTypeData?.resultData||[])},loading:personTypeLoading,options:{searchable:true},validation:{rules:[requiredFiled()]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({noneBeneficiaryType:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"select",name:"noneBeneficiaryGender",label:messages(generalMessages.genderType),layout:{span:2},data:{static:convertSelectboxData(genderTypeData?.resultData||[])},loading:genderTypeLoading,validation:{rules:[{required:true,message:messages(ebillMessages.selectGender)},{validator:(_:unknown,value:string)=>{if((watchPersonType==="REAL"||watchPersonType==="FOREIGN_REAL")&&value==="LEGAL"){return Promise.reject(messages(ebillMessages.realPersonGenderCannotBeLegal))}if(isLegalPerson&&value!=="LEGAL"){return Promise.reject(messages(ebillMessages.legalPersonGenderMustBeLegal))}return Promise.resolve()}}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({noneBeneficiaryGender:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"input",name:"beneficiaryNationalCode",label:messages(ebillMessages.nationalId),layout:{span:2},validation:{rules:[{required:true,validator:(_:unknown,value:string)=>validateNationalCode(value)}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryNationalCode:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"input",name:"beneficiaryName",label:messages(ebillMessages.beneficiaryBillName),layout:{span:2},validation:{rules:[requiredFiled(),{max:255,message:messages(ebillMessages.max255Characters)}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryName:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"input",name:"beneficiaryBirthCertificateNumber",label:messages(ebillMessages.beneficiaryCertificateNumber),layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isRealPerson=personType==="REAL"||personType==="FOREIGN_REAL";if(isBankCustomer||!isRealPerson){setFieldsValue({beneficiaryBirthCertificateNumber:""})}return!isRealPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isRealPerson?[requiredFiled(),{max:255,message:messages(ebillMessages.max255Characters)}]:[]}},{type:"input",name:"beneficiaryRegisterNumber",label:messages(ebillMessages.beneficiaryRegistrationNumber),layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isLegalPerson=personType==="LEGAL"||personType==="FOREIGN_LEGAL";if(isBankCustomer||!isLegalPerson){setFieldsValue({beneficiaryRegisterNumber:""})}return!isLegalPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isLegalPerson?[requiredFiled(),{max:255,message:messages(ebillMessages.max255Characters)}]:[]}},{type:"input",name:"beneficiaryShahabCode",label:messages(ebillMessages.beneficiaryShahabCode),layout:{span:2},validation:{rules:[requiredFiled(),{pattern:/^\d{16}$/,message:messages(ebillMessages.shahabCodeMustBe16Digits)}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryShahabCode:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"business",name:"beneficiaryBirthDate",label:messages(ebillMessages.beneficiaryBirthDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"}},layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isRealPerson=personType==="REAL"||personType==="FOREIGN_REAL";if(isBankCustomer||!isRealPerson){setFieldsValue({beneficiaryBirthDate:""})}return!isRealPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isRealPerson?[requiredFiled()]:[]}},{type:"business",name:"beneficiaryRegisterDate",label:messages(ebillMessages.beneficiaryRegistrationDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"}},layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isLegalPerson=personType==="LEGAL"||personType==="FOREIGN_LEGAL";if(isBankCustomer||!isLegalPerson){setFieldsValue({beneficiaryRegisterDate:""})}return!isLegalPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isLegalPerson?[requiredFiled()]:[]}},{type:"select",name:"beneficiaryBirthCity",label:messages(ebillMessages.birthCity),data:{static:fetchedCity||[]},loading:isLoadingCity,options:{searchable:true},layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isRealPerson=personType==="REAL"||personType==="FOREIGN_REAL";if(isBankCustomer||!isRealPerson){setFieldsValue({beneficiaryBirthCity:""})}return!isRealPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isRealPerson?[requiredFiled()]:[]}},{type:"select",name:"beneficiaryRegisterCity",label:messages(ebillMessages.registrationCity),data:{static:fetchedCity||[]},loading:isLoadingCity,options:{searchable:true},layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isLegalPerson=personType==="LEGAL"||personType==="FOREIGN_LEGAL";if(isBankCustomer||!isLegalPerson){setFieldsValue({beneficiaryRegisterCity:""})}return!isLegalPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isLegalPerson?[requiredFiled()]:[]}},{type:"input",name:"beneficiaryPhoneNumber",label:messages(ebillMessages.beneficiaryContactNumber),layout:{span:2},validation:{rules:[requiredFiled(),{validator:(_:unknown,value:string)=>value?.startsWith("0")?Promise.reject(messages(ebillMessages.contactNumberCannotStartWithZero)):Promise.resolve()}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryPhoneNumber:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"input",name:"beneficiaryPostalCode",label:messages(generalMessages.postalCode),layout:{span:2},validation:{rules:[requiredFiled(),{pattern:/^\d{10}$/,message:messages(ebillMessages.postalCodeMustBe10Digits)}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryPostalCode:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"business",name:"beneficiaryIbanNumber",label:messages(ebillMessages.beneficiaryIbanNumber),element:FormGenerator.IBANField,options:{extraProps:{addIR:true}},layout:{span:2},validation:{rules:[requiredFiled()]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryIbanNumber:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"input",name:"beneficiarySanaCode",label:messages(ebillMessages.beneficiarySanaCode),layout:{span:2},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiarySanaCode:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"textarea",name:"beneficiaryAddress",label:messages(generalMessages.address),options:{maxLength:200},layout:{span:4},validation:{rules:[requiredFiled(),{max:200,message:messages(ebillMessages.max200Characters)}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryAddress:""})}return!!values?.centralBankCode||isBankCustomer}}];return(<ControlledForm fields={[{type:"business",label:isBankCustomer?messages(ebillMessages.bankCustomerBeneficiary):messages(ebillMessages.nonCustomerBeneficiary),name:isBankCustomer?"__bank_customer_beneficiary":"__non_customer_beneficiary",layout:{span:4},element:FormGenerator.CollapseField,disabled:false,options:{extraProps:{defaultOpen:true,fields:isBankCustomer?bankCustomerFields:nonBankCustomerFields}}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.nextStep)}resetLabel={messages(ebillMessages.previousStep)}onReset={handleCancel}reset initialValues={formValueState}/>)};export default BeneficiaryFourthStep;
import{useControlledForm}from"@brdp/ui/form";import{BillOfExchangeForm}from"../add-barat-file";import FormGenerator from"@brdp/ui/form";import{getFormatMessage,requiredFiled}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";type IProps={next:()=>void;prev:()=>void;updateFormState:(updates:Partial<BillOfExchangeForm>)=>void;formValueState:BillOfExchangeForm};const BillSpecificationsSecondStep=({next,prev,updateFormState,formValueState}:IProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<BillOfExchangeForm>({id:"step2-add-barat-file"});const handleSubmit=async(formValue:BillOfExchangeForm)=>{updateFormState(formValue);next()};const handleCancel=()=>{prev()};return(<ControlledForm fields={[{type:"business",label:messages(ebillMessages.billDetails),name:"__bill_details",layout:{span:4},element:FormGenerator.CollapseField,disabled:false,options:{extraProps:{defaultOpen:true,fields:[{type:"input",name:"centralBankCode",label:messages(ebillMessages.centralBankCode),layout:{span:2},disabled:true},{type:"input",name:"taxStampNumber",label:messages(ebillMessages.taxStampId),layout:{span:2},disabled:true},{type:"business",name:"requestDate",label:messages(ebillMessages.requestDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"}},layout:{span:2},disabled:true},{type:"business",name:"startDate",label:messages(ebillMessages.billStartDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{maxDate:"expireDate"}},validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"business",name:"expireDate",label:messages(ebillMessages.billExpiryDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{minDate:"startDate"}},validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"checkbox",name:"transferable",label:messages(ebillMessages.transferable),layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.billRecipientDetails),name:"__bill_recipient",layout:{span:4},element:FormGenerator.CollapseField,disabled:false,options:{extraProps:{defaultOpen:true,fields:[{type:"input",name:"billTakerName",label:messages(ebillMessages.billRecipient),options:{placeholder:messages(ebillMessages.currentBankName)},disabled:true,layout:{span:2}},{type:"input",name:"advisorName",label:messages(ebillMessages.advisor),disabled:true,layout:{span:2}},{type:"input",name:"advisorCode",label:messages(ebillMessages.advisorCode),disabled:true,layout:{span:2}},{type:"input",name:"advisorSwiftCode",label:messages(ebillMessages.swiftCode),disabled:true,layout:{span:2}},{type:"input",name:"advisorIdentifier",label:messages(ebillMessages.bankIdentifier),validation:{rules:[requiredFiled(),{pattern:/^\d{10,11}$/,message:messages(ebillMessages.bankIdentifierMustBe10Or11Digits)}]},layout:{span:2}},{type:"input",name:"advisorBranchCode",label:messages(ebillMessages.advisorBranchCode),disabled:true,layout:{span:2}},{type:"textarea",name:"billPayPlace",label:messages(ebillMessages.billPaymentPlace),options:{maxLength:200,placeholder:messages(ebillMessages.minMaxCharacterRange,{min:5,max:200})},validation:{rules:[requiredFiled(),{min:5,message:messages(ebillMessages.min5MaxCharacters)},{max:200,message:messages(ebillMessages.max200Characters)}]},layout:{span:2}},{type:"input",name:"billTakerSanaCode",label:messages(ebillMessages.billRecipientSanaCode),options:{placeholder:messages(ebillMessages.enterSanaCode)},layout:{span:2}}]}}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.nextStep)}resetLabel={messages(ebillMessages.previousStep)}onReset={handleCancel}reset initialValues={formValueState}/>)};export default BillSpecificationsSecondStep;
import{useControlledForm}from"@brdp/ui/form";import{BillOfExchangeForm}from"../add-barat-file";import FormGenerator from"@brdp/ui/form";import{showToast,usePost}from"@brdp/engine";import{Services}from"@/services/url";import{generalMessages,getFormatMessage,removeEmptyValues,requiredFiled}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";import{hideAppModal}from"@/utils/hooks/useAppModal";import CustomerSearch from"@/components/business-components/customerSearch/customer-search";import{ErrorAlert}from"@brdp/ui";type IProps={prev:()=>void;updateFormState:(updates:Partial<BillOfExchangeForm>)=>void;formValueState:BillOfExchangeForm;mutate:()=>void};const GuarantorFifthStep=({updateFormState,formValueState,prev,mutate}:IProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<BillOfExchangeForm>({id:"guarantors-form"});const{error:createError,isError:createIsError,mutate:createMutate,isLoading:createIsLoading}=usePost(Services.EbillFilesManagement.CREATE,{raw:true});const handleBillOfExchangeSubmit=async(formData:BillOfExchangeForm)=>{const normalizedGuarantors=(formData.guarantors||[]).map((guarantor)=>({guaranteePercent:Number(guarantor.guaranteePercent),customerNumber:guarantor.customerNumber,sanaCode:guarantor.sanaCode||""}));const payload={...formValueState,...formData,guarantors:normalizedGuarantors,billTotalWorth:parseInt(formValueState.billTotalWorth),isBankCustomer:formValueState.isBankCustomer==="BANK_CUSTOMER"};updateFormState(formData);const sanitizedPayload=removeEmptyValues(payload);const response=await createMutate(sanitizedPayload);if(response.isSuccess){showToast({title:messages(generalMessages.successful),description:response?.message||messages(generalMessages.hasSuccessResponse)},"success");mutate();hideAppModal("add-barat-file")}};const guarantorFields=[{name:"customerNumber",label:messages(ebillMessages.searchGuarantorCustomer),type:"business",element:CustomerSearch,layout:{span:4},extra:messages(generalMessages.customerName),validation:{rules:[requiredFiled(),{validator:(_:unknown,value:string)=>value===formValueState.customerNumber?Promise.reject(messages(ebillMessages.drawerCannotBeGuarantor)):Promise.resolve()}]}},{name:"guaranteePercent",label:messages(ebillMessages.guaranteePercent),type:"input",layout:{span:4},options:{placeholder:"1-100",suffix:"%"},validation:{rules:[requiredFiled(),{pattern:/^(?:[1-9][0-9]?|100)$/,message:messages(ebillMessages.guaranteePercentBetween1To100)}]}},{name:"sanaCode",label:messages(ebillMessages.guarantorSanaCode),type:"input",layout:{span:4}}];return(<>{createIsError&&<ErrorAlert errorMessage={createError.message}/>}<ControlledForm fields={[{type:"business",name:"guarantors",label:messages(ebillMessages.guarantorsList),element:FormGenerator.DynamicListField,options:{extraProps:{addButtonLabel:messages(ebillMessages.addNewGuarantor),formTitle:messages(ebillMessages.addNewGuarantor),fields:guarantorFields}},layout:{span:4}}]}initialValues={{guarantors:formValueState?.guarantors||[]}}onSubmit={handleBillOfExchangeSubmit}isSubmitting={createIsLoading}reset onReset={prev}resetLabel={messages(ebillMessages.previousStep)}submitLabel={messages(ebillMessages.createBill)}/></>)};export default GuarantorFifthStep;
import{useControlledForm}from"@brdp/ui/form";import{BillOfExchangeForm}from"../add-barat-file";import{useGetBillType}from"@/pages/base-info/commission-rate/hooks/use-get-bill-type";import{generalMessages,getFormatMessage,requiredFiled}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";import{hideAppModal}from"@/utils/hooks/useAppModal";import CustomerSearch from"@/components/business-components/customerSearch/customer-search";type IProps={next:()=>void;updateFormState:(updates:Partial<BillOfExchangeForm>)=>void;formValueState:BillOfExchangeForm};const InitialInfoFirstStep=({updateFormState,next,formValueState}:IProps)=>{const messages=getFormatMessage();const{billTypeLoading,uniqueBillTypes}=useGetBillType();const{ControlledForm}=useControlledForm<BillOfExchangeForm>({id:"step1-add-barat-file"});const handleSubmit=async(formValue:BillOfExchangeForm)=>{updateFormState(formValue);next()};const handleCancel=()=>{hideAppModal("add-barat-file")};return(<ControlledForm fields={[{type:"select",name:"billTypeCode",label:messages(ebillMessages.ebillTypeCodeName),data:{static:uniqueBillTypes||[]},loading:billTypeLoading,options:{searchable:true},validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"input",name:"depositNumber",label:messages(ebillMessages.billDrawerDeposit),validation:{rules:[requiredFiled(),{pattern:/^[\d.]+$/,message:messages(ebillMessages.depositNumberMustBeNumeric)}]},layout:{span:2}},{type:"input",name:"__depositTitle",label:messages(ebillMessages.depositTitle),disabled:true,layout:{span:2}},{type:"input",name:"ibanNumber",label:messages(generalMessages.shebaCode),disabled:true,layout:{span:2}},{type:"business",name:"customerNumber",label:messages(generalMessages.customerNumber),element:CustomerSearch,validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"input",name:"__customerName",label:messages(generalMessages.customerName),disabled:true,layout:{span:2}},{type:"textarea",name:"billApplicantPlace",label:messages(ebillMessages.billDrawerResidence),options:{maxLength:200,placeholder:messages(ebillMessages.minMaxCharacterRange,{min:5,max:200})},validation:{rules:[requiredFiled(),{min:5,message:messages(ebillMessages.min5MaxCharacters)},{max:200,message:messages(ebillMessages.max200Characters)}]},layout:{span:2}},{type:"input",name:"billApplicantSanaCode",label:messages(ebillMessages.billDrawerSanaCode),layout:{span:2}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.nextStep)}resetLabel={messages(generalMessages.cancel)}reset onReset={handleCancel}initialValues={formValueState}/>)};export default InitialInfoFirstStep;
import{useControlledForm}from"@brdp/ui/form";import{BillOfExchangeForm}from"../add-barat-file";import FormGenerator from"@brdp/ui/form";import{useGetEconomicalSection}from"../hooks/use-get-economical-section";import{ISelectOption,useGetSubEconomicalSection}from"../hooks/use-get-subeconomical-section";import{useEffect,useState,useRef}from"react";import{getFormatMessage,requiredFiled}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";import{useGet}from"@brdp/engine";import{Services}from"@/services/url";type IProps={next:()=>void;prev:()=>void;updateFormState:(updates:Partial<BillOfExchangeForm>)=>void;formValueState:BillOfExchangeForm};type OptionData={name:string;code:string};const SamatThirdStep=({next,prev,updateFormState,formValueState}:IProps)=>{const messages=getFormatMessage();const[subEconomicalOptions,setSubEconomicalOptions]=useState<ISelectOption[]>([]);const isInitialMount=useRef(true);const previousEconomicalSection=useRef<string|undefined>(undefined);const{ControlledForm,fieldWatch,setFieldsValue}=useControlledForm<BillOfExchangeForm>({id:"step3-add-barat-file"});const{getEconomicalSection,getEconomicalSectionLoading}=useGetEconomicalSection();const{handleSubmitSub,getSubEconomicalSectionLoading}=useGetSubEconomicalSection();const economicalSectionValue=fieldWatch("economicalSection");useEffect(()=>{if(!economicalSectionValue)return;const hasEconomicalSectionChanged=previousEconomicalSection.current!==economicalSectionValue;if(isInitialMount.current&&formValueState.subEconomicalSection){isInitialMount.current=false;previousEconomicalSection.current=economicalSectionValue;const fetchSubSections=async()=>{try{const result=await handleSubmitSub({economicalSectionValue});setSubEconomicalOptions(result||[])}catch(error){console.error(error)}};fetchSubSections();return}if(hasEconomicalSectionChanged){previousEconomicalSection.current=economicalSectionValue;setSubEconomicalOptions([]);setFieldsValue({subEconomicalSection:""});const fetchSubSections=async()=>{try{const result=await handleSubmitSub({economicalSectionValue});setSubEconomicalOptions(result||[])}catch(error){console.error(error)}};fetchSubSections()}isInitialMount.current=false},[economicalSectionValue,formValueState.subEconomicalSection,handleSubmitSub,setFieldsValue]);const{isLoading:customerTypeLoading,data:customerTypeData}=useGet<OptionData[]>(["customer-type"],Services.EbillServices.GET_BENEFICIARY_TYPES());const handleSubmit=async(formValue:BillOfExchangeForm)=>{updateFormState(formValue);next()};const handleCancel=()=>{prev()};const toOptions=(data:OptionData[]=[])=>{return data.map((item)=>({label:item.name,value:item.code}))};return(<ControlledForm fields={[{type:"business",label:messages(ebillMessages.samatInfo),name:"__semat_info",layout:{span:4},element:FormGenerator.CollapseField,disabled:false,options:{extraProps:{defaultOpen:true,fields:[{type:"select",name:"economicalSection",data:{static:getEconomicalSection},loading:getEconomicalSectionLoading,disabled:getEconomicalSectionLoading,label:messages(ebillMessages.economicalSection),options:{searchable:true},validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"select",name:"subEconomicalSection",label:messages(ebillMessages.subEconomicalSection),data:{static:subEconomicalOptions},loading:getSubEconomicalSectionLoading,disabled:getSubEconomicalSectionLoading||!economicalSectionValue,options:{searchable:true},validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"input",name:"inquiryNumber",label:messages(ebillMessages.taxInquiry),options:{placeholder:messages(ebillMessages.numericValue)},validation:{rules:[{pattern:/^\d*$/,message:messages(ebillMessages.mustBeNumeric)}]},layout:{span:2}},{type:"business",name:"billTotalWorth",label:messages(ebillMessages.billTotalValue),element:FormGenerator.AmountField,validation:{rules:[requiredFiled(),{pattern:/^[1-9]\d*$/,message:messages(ebillMessages.mustBePositiveInteger)}]},layout:{span:2}},{type:"input",name:"intermediaryDeposit",label:messages(ebillMessages.intermediaryDeposit),options:{placeholder:messages(ebillMessages.searchInDeposits)},layout:{span:2}},{type:"textarea",name:"comment",label:messages(ebillMessages.issuanceDescription),options:{maxLength:200},validation:{rules:[requiredFiled()]},layout:{span:4}},{type:"textarea",name:"taxComment",label:messages(ebillMessages.stampTaxPaymentDescription),options:{maxLength:165,placeholder:messages(ebillMessages.max165Characters)},validation:{rules:[requiredFiled(),{pattern:/^[^\\#><&;:"}{[\]]*$/,message:messages(ebillMessages.invalidCharactersNotAllowed)},{max:165,message:messages(ebillMessages.max165Characters)}]},layout:{span:4}},{type:"radio-button",name:"isBankCustomer",label:messages(ebillMessages.beneficiaryType),data:{static:toOptions(customerTypeData?.resultData||[{code:"",name:""}])},loading:customerTypeLoading,validation:{rules:[requiredFiled()]},layout:{span:4}}]}}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.nextStep)}resetLabel={messages(ebillMessages.previousStep)}onReset={handleCancel}reset initialValues={formValueState}/>)};export default SamatThirdStep;
import{useMemo,useCallback}from"react";import{useGet}from"@brdp/engine";import{Services}from"@/services/url";export type IEconomical={code:string;name:string};export const useGetEconomicalSection=()=>{const url=Services.ExternalServices.GET_ECONOMICAL_SECTION();const{data:getEconomicalSectionResponse,isLoading:getEconomicalSectionLoading,isFetching:getEconomicalSectionFetching,error:getEconomicalSectionError,isError:isGetEconomicalSectionError}=useGet<IEconomical[]|undefined>(["get-economical-section"],url);const mapEconomicalSection=useCallback((items?:IEconomical[])=>{const uniqueMap=new Map<string,IEconomical>();items?.forEach((item)=>uniqueMap.set(item.code,item));return Array.from(uniqueMap.values(),(i)=>({value:i.code,label:`${i.name} - ${i.code}`}))},[]);const getEconomicalSection=useMemo(()=>mapEconomicalSection(getEconomicalSectionResponse?.resultData),[getEconomicalSectionResponse?.resultData,mapEconomicalSection]);return{getEconomicalSection,getEconomicalSectionLoading,getEconomicalSectionFetching,getEconomicalSectionError,isGetEconomicalSectionError}};
import{useGet}from"@brdp/engine";import{Services}from"@/services/url";import{useState,useCallback}from"react";export type ISubEconomical={code:string;name:string};export type ISubEconomicalSectionCode={economicalSectionValue:string};export type ISelectOption={value:string;label:string};export const useGetSubEconomicalSection=()=>{const[params,setParams]=useState<string|undefined>();const url=params?Services.ExternalServices.GET_ECONOMICAL_SUB(params):"";const{isLoading:getSubEconomicalSectionLoading,error:getSubEconomicalSectionError,isError:isGetSubEconomicalSectionError,data:getSubEconomicalSectionData,mutate}=useGet<ISubEconomical[]|undefined>(["search-commission-rate",params],url);const mapSubEconomicalSection=useCallback((items?:ISubEconomical[]):ISelectOption[]=>{if(!items)return[];const uniqueMap=new Map<string,ISubEconomical>();items.forEach((item)=>uniqueMap.set(item.code,item));return Array.from(uniqueMap.values(),(i)=>({value:i.code,label:`${i.name} - ${i.code}`))},[]);const handleSubmitSub=async(formValue?:ISubEconomicalSectionCode):Promise<ISelectOption[]|undefined>=>{try{setParams(formValue?.economicalSectionValue||"");if(!formValue)return undefined;const response=await mutate();const result=await response?.promise;if(!result?.resultData)throw new Error("No data returned");return mapSubEconomicalSection(result.resultData)}catch(error){console.error("Fetch error:",error);throw new Error(error instanceof Error?error.message:"Failed to fetch data")}};return{handleSubmitSub,getSubEconomicalSectionLoading,getSubEconomicalSectionError,isGetSubEconomicalSectionError,getSubEconomicalSectionData,mapSubEconomicalSection}};

