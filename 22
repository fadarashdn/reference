}from"@brdp/utils";type CustomerIssuanceBackFormType={billNumber:string};type CustomerIssuanceBackProps={customerNumber:string;billNumber:string;getEbillFiles:()=>void};type CustomerIssuanceBackResponseType=null;const CustomerIssuanceBack=({customerNumber,billNumber,getEbillFiles}:CustomerIssuanceBackProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<CustomerIssuanceBackFormType>({id:"customerIssuanceBackForm"});const{mutate,isLoading,error,data}=usePost<CustomerIssuanceBackResponseType,CustomerIssuanceBackFormType>(Services.EbillFilesManagement.POST_CUSTOMER_ISSUANCE_BACK,{raw:true});const handleSubmit=()=>{mutate({billNumber}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.hasSuccessResponse)},"success","customerIssuanceBack");getEbillFiles();hideAppModal("customerIssuanceBackModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<Typography text={messages(ebillMessages.customerIssuanceBackConfirm,{customerNumber,billNumber})}/><ControlledForm onSubmit={handleSubmit}isSubmitting={isLoading}submitLabel={messages(generalMessages.confirm)}reset resetLabel={messages(generalMessages.cancel)}onReset={()=>{hideAppModal("customerIssuanceBackModal")}}fields={[]}/></>)};export default CustomerIssuanceBack;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{showAppModal}from"@/utils/hooks/useAppModal";import{useGet}from"@brdp/engine";import{DeleteIcon,DownloadIcon,GenerativeTable,PlusCircleIcon,useTablePagination}from"@brdp/ui";import{generalMessages,getFormatMessage}from"@brdp/utils";import AddProof from"./modals/add-proof";import DeleteProof from"./modals/delete-proof";import FormGenerator,{useControlledForm}from"@brdp/ui/form";import{downloadBase64File}from"@/utils/download-base64-file";type ProofManagementResponseType={comment:null|string;extension:string;file:string;fileName:string;proofTypeCode:string;proofTypeName:string};type ProofManagementProps={billNumber:string;startDate:string;endDate:string;amount:number;billTypeCode:string;billTypeName:string;duration:number;customerNumber:string};type ProofManagementFormType={billNumber:string;startDate:string;endDate:string;amount:number;duration:string;billType:string;customerNumber:string};const ProofManagement=({billNumber,startDate,endDate,amount,billTypeCode,billTypeName,duration,customerNumber}:ProofManagementProps)=>{const messages=getFormatMessage();const{tableConfig,tableFromIndex}=useTablePagination();const{ControlledForm}=useControlledForm<ProofManagementFormType>({id:"ebillFileDetailForm"});const{data,isFetching,mutate}=useGet<ProofManagementResponseType[]>(["proof-management"],Services.ExternalServices.GET_PROOF_LOAD(billNumber),{hasPagination:true});return(<><ControlledForm reset={false}initialValues={{billNumber,startDate,endDate,amount,duration:duration+" "+messages(generalMessages.day),customerNumber,billType:billTypeName+" - "+billTypeCode}}fields={[{type:"business",label:messages(ebillMessages.ebillFileInfo),name:"__ebillFileDetailsCollapse",layout:{span:4},readOnly:true,element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"billNumber",label:messages(ebillMessages.ebillFileNumber),type:"input",layout:{span:2}},{name:"billType",label:messages(ebillMessages.billType),type:"input",layout:{span:2}},{name:"startDate",label:messages(ebillMessages.fileCreationDate),type:"input",layout:{span:2}},{name:"endDate",label:messages(ebillMessages.fileExpirationDate),type:"input",layout:{span:2}},{name:"amount",label:messages(ebillMessages.ebillAmount),type:"business",element:FormGenerator.AmountField,layout:{span:2}},{name:"customerNumber",label:messages(generalMessages.customerNumber),type:"input",layout:{span:2}},{name:"duration",label:messages(ebillMessages.billDuration),type:"input",layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.proofsList),name:"__proofsListCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"proofTable",label:"",type:"business",layout:{span:4},element:()=>(<GenerativeTable<ProofManagementResponseType>rowKey="proofTypeCode"fromIndex={tableFromIndex}data={data?.resultData||[]}pagination={tableConfig(data?.resultData?.length||0)}title={`${messages(generalMessages.tableRowsCount)}:${data?.resultData?.length||0}`}loading={isFetching}columns={[{key:"fileName",dataIndex:"fileName",title:messages(generalMessages.fileName),align:"center"},{key:"proofTypeName",dataIndex:"proofTypeName",title:messages(ebillMessages.proofType),align:"center"},{key:"comment",dataIndex:"comment",title:messages(generalMessages.description),align:"center"}]}rowActions={[{id:"1",appearance:{icon:<DownloadIcon/>,tooltip:messages(ebillMessages.downloadProof)},action:(values)=>downloadBase64File({file:values.file,fileName:values.fileName,extension:values.extension})},{id:"2",appearance:{icon:<DeleteIcon/>,tooltip:messages(generalMessages.actionDelete)},action:(values)=>{showAppModal({id:"deleteProofModal",title:messages(ebillMessages.deleteProof),icon:<DeleteIcon/>,element:(<DeleteProof billNumber={billNumber}proofType={values.proofTypeName}fileName={values.fileName}mutateProof={mutate}/>),options:{closable:true,size:"small"}})}}]}tableHeaderActions={[{id:"proofTableHeaderActions",mode:"expanded",actions:[{id:"addProof",action:()=>{showAppModal({id:"addProofModal",title:messages(ebillMessages.addProof),icon:<PlusCircleIcon/>,element:(<AddProof billNumber={billNumber}mutateProof={mutate}/>),options:{closable:true,size:"small"}})},appearance:{tooltip:messages(ebillMessages.addProof),icon:<PlusCircleIcon/>}}]}]}/>)}]}}}]}/></>)};export default ProofManagement;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{convertSelectboxData}from"@/utils/convert-selectbox-data";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,useGet,usePost}from"@brdp/engine";import{ErrorAlert}from"@brdp/ui";import FormGenerator,{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,requiredFiled}from"@brdp/utils";type AddProofFormType={proofType:string;comment:string;fileData:{file:number[];fileExtension:string;fileName:string}};type ProofTypesResponseType={activateProofTypes:{code:string;name:string}[]};type AddProofDataType={fileName:string;extension:string;proofType:string;comment:string;billNumber:string;photo:number[]};type AddProofProps={billNumber:string;mutateProof:()=>void};const AddProof=({billNumber,mutateProof}:AddProofProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<AddProofFormType>({id:"addProofForm"});const{data:proofTypesData,isFetching:proofTypesIsFetching}=useGet<ProofTypesResponseType>(["proof-types"],Services.Proof.GET_PROOF_TYPES());const{data,mutate,isLoading,error}=usePost<null,AddProofDataType>(Services.Proof.ADD(),{raw:true});const handleSubmit=async(values:AddProofFormType)=>{const data={billNumber:billNumber,photo:Array.from(values.fileData.file),fileName:values.fileData.fileName,extension:values.fileData.fileExtension,proofType:values.proofType,comment:values.comment};mutate(data).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.submitSuccess)},"success","addProof");mutateProof();hideAppModal("addProofModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<ControlledForm submitLabel={messages(generalMessages.actionAddition)}onSubmit={(values)=>handleSubmit(values)}isSubmitting={isLoading}reset resetLabel={messages(generalMessages.cancel)}onReset={()=>hideAppModal("addProofModal")}fields={[{name:"proofType",label:messages(ebillMessages.proofType),type:"select",data:{static:proofTypesData?convertSelectboxData(proofTypesData?.resultData?.activateProofTypes):[]},options:{searchable:true,placeholder:messages(generalMessages.doChoose)},loading:proofTypesIsFetching,layout:{span:4},validation:{rules:[requiredFiled()]}},{name:"comment",label:messages(generalMessages.description),type:"textarea",layout:{span:4}},{name:"fileData",label:messages(ebillMessages.proofFile),type:"business",element:FormGenerator.FileParserField,layout:{span:4},options:{extraProps:{accept:[".png",".jpg",".pdf"],parser:"byteArray",sizeLimit:4*1024*1024,sizeLimitValidationMessage:messages(generalMessages.fileSizeValidation,{fileSize:"4 مگابایت"})}},validation:{rules:[requiredFiled()]}}]}/></>)};export default AddProof;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,useDelete}from"@brdp/engine";import{Button,ErrorAlert,Typography}from"@brdp/ui";import{generalMessages,getFormatMessage}from"@brdp/utils";type DeleteProofProps={billNumber:string;proofType:string;fileName:string;mutateProof:()=>void};type DeleteProofData={billNumber:string;proofType:string};const DeleteProof=({billNumber,proofType,fileName,mutateProof}:DeleteProofProps)=>{const messages=getFormatMessage();const{data,mutate,isLoading,error}=useDelete<null,DeleteProofData>(Services.Proof.DELETE,{raw:true});const handleDelete=()=>{mutate({billNumber,proofType}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result.message||messages(generalMessages.deleteSuccessfulResponse,{item:""})},"success","deleteProof");mutateProof();hideAppModal("deleteProofModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<Typography text={messages(ebillMessages.deleteProofConfirmation,{billNumber,fileName})}/><div className="ant-modal-footer custom-actions-modal"><Button label={messages(generalMessages.actionDelete)}loading={isLoading}type="danger"onClick={handleDelete}/><Button label={messages(generalMessages.cancel)}onClick={()=>{hideAppModal("deleteProofModal")}}/></div></>)};export default DeleteProof;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{type BillTypeDataType}from"@/utils/convert-selectbox-data";import{showAppModal}from"@/utils/hooks/useAppModal";import{showToast,useGet}from"@brdp/engine";import{Content,GenerativeTable,IconsList,Tag,useTablePagination}from"@brdp/ui";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,removeEmptyValues}from"@brdp/utils";import{useEffect,useState}from"react";import{flushSync}from"react-dom";import{useGetBillType}from"../base-info/commission-rate/hooks/use-get-bill-type";import AddEbillTypeModal from"./modals/add-ebill-type/add-ebill-type-modal";import DeleteEbillType from"./modals/delete-ebill-type/delete-ebill-type";import EditEbillTypeModal from"./modals/edit-ebill-type/edit-ebill-type-modal";import ShowEbillTypeDetail from"./modals/show-ebill-type-detail/show-ebill-type-detail";type EbillTypesManagementFormType={code:string;deletedType:boolean};type EbillTypesManagementResponseType={pageNumber:number;pageSize:number;totalCount:number;items:BillTypeDataType[]};const EbillTypesManagement:React.FC=()=>{const messages=getFormatMessage();const{billTypeLoading,uniqueBillTypes,mutateBillType}=useGetBillType();const[searchData,setSearchData]=useState({code:"",deletedType:false});const{tableConfig,PAGE_SIZE,resetPage,tableFromIndex,currentPage}=useTablePagination();const{ControlledForm}=useControlledForm<EbillTypesManagementFormType>({id:"ebillTypesManagementForm"});const{data,isFetching,isLoading,mutate}=useGet<EbillTypesManagementResponseType>(["ebill-types-management"],Services.EbillTypesManagement.GET_EBILL_TYPES({pageSize:PAGE_SIZE,pageNumber:currentPage,...removeEmptyValues<Partial<EbillTypesManagementFormType>>({code:searchData.code,deletedType:searchData.deletedType})}),{enable:false,hasPagination:true});const handleSearch=(values:EbillTypesManagementFormType)=>{flushSync(()=>setSearchData({...values,deletedType:!!values.deletedType}));mutate().then((result)=>{if(result?.status==="success"&&!result?.data?.isSuccess){showToast({title:messages(generalMessages.error),description:messages(generalMessages.errorBadResponse)},"error","ebill-types-management")}});resetPage()};useEffect(()=>{if(data?.resultData){mutate()}},[currentPage,PAGE_SIZE]);return(<Content title={messages(ebillMessages.ebillTypesManagement)}><ControlledForm isSubmitting={isLoading}submitLabel={messages(generalMessages.search)}submitButtonIcon={<IconsList.SearchIcon/>}onSubmit={(values)=>handleSearch(values)}fields={[{name:"code",type:"select",label:messages(ebillMessages.ebillTypeCodeName),loading:billTypeLoading,options:{placeholder:messages(generalMessages.doChoose),searchable:true},data:{static:uniqueBillTypes}},{name:"deletedType",type:"checkbox",label:messages(ebillMessages.deletedItems)}]}/><GenerativeTable<BillTypeDataType>rowKey="code"fromIndex={tableFromIndex}data={data?.resultData?.items||[]}pagination={tableConfig(data?.resultData?.totalCount||0)}title={`${messages(generalMessages.tableRowsCount)}:${data?.resultData?.totalCount||0}`}loading={isFetching}columns={[{key:"code",dataIndex:"code",title:messages(ebillMessages.ebillTypeCode)},{key:"name",dataIndex:"name",title:messages(ebillMessages.ebillTypeName)},{key:"enable",dataIndex:"enable",title:messages(ebillMessages.status),render:(col)=>col?(<Tag color="green">{messages(ebillMessages.notDeleted)}</Tag>):(<Tag color="red">{messages(ebillMessages.deleted)}</Tag>)}]}rowActions={[{id:"1",appearance:{icon:<IconsList.EyeIcon/>,tooltip:messages(generalMessages.actionView)},action:(values)=>showAppModal({id:"showEbillTypeDetailModal",icon:<IconsList.EyeIcon/>,title:messages(ebillMessages.viewEbillType),element:<ShowEbillTypeDetail code={values.code}/>,options:{closable:true}}),disabled:false},{id:"2",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(generalMessages.actionEdit)},action:(values)=>{showAppModal({id:"editEbillTypeModal",icon:<IconsList.EditIcon/>,title:messages(ebillMessages.editEbillType),element:(<EditEbillTypeModal mutateEbillTypes={mutate}code={values.code}/>),options:{closable:true,size:"default"}})},disabled:(record)=>!record.enable},{id:"3",appearance:{icon:<IconsList.DeleteIcon/>,tooltip:messages(generalMessages.actionDelete)},action:(values)=>showAppModal({id:"deleteEbillTypeModal",icon:<IconsList.DeleteIcon/>,title:messages(ebillMessages.deleteEbillType),element:(<DeleteEbillType code={values.code}mutateEbillTypes={mutate}name={values.name}/>),options:{closable:true,size:"small"}}),disabled:(record)=>!record.enable}]}tableHeaderActions={[{id:"ebillTypeTableHeaderActions",mode:"expanded",actions:[{id:"addEbillType",action:()=>showAppModal({id:"addEbillTypeModal",icon:<IconsList.PlusCircleIcon/>,title:messages(ebillMessages.addEbillType),element:(<AddEbillTypeModal mutateEbillTypes={mutate}mutateBillType={mutateBillType}/>),options:{closable:true,size:"default"}}),appearance:{tooltip:messages(ebillMessages.addEbillType),icon:<IconsList.PlusCircleIcon/>}}]}]}/></Content>)};export default EbillTypesManagement;
import{ebillMessages}from"@/locale/ebill-messages";import{Steps}from"@brdp/ui";import{getFormatMessage}from"@brdp/utils";import{useState}from"react";import AddEbillTypeDetails from"./components/add-ebill-type-details";import AddHeaders from"./components/add-headers";import AddCommissions from"./components/add-commissions";export type EbillTypeDetailsType={code:string;name:string;mainTopic:string;bankCommitmentsTopic:string;hasGuarantor:boolean;customerCommitmentsTopic:string;temporaryDebtorsTopic:string;convertDebtLoanTypeCode:string;discountLoanTypeCode:string;assuranceTypeCodes:string[];assurancePercentage:number;billAmountFrom:number;billAmountTo:number;proof:boolean;userGroupNumbers:string[];issueContractCommissionTopic:string;otherCommissionTopic:string;transferCommissionTopic:string};type AddEbillTypeProps={mutateEbillTypes:()=>void;mutateBillType:()=>void};const AddEbillTypeModal=({mutateEbillTypes,mutateBillType}:AddEbillTypeProps)=>{const messages=getFormatMessage();const[current,setCurrent]=useState<number>(0);const[ebillTypeDetails,setEbillTypeDetails]=useState<EbillTypeDetailsType>();const next=()=>{setCurrent((prev)=>prev+1)};const prev=()=>{setCurrent((prev)=>prev-1)};const steps=[{title:messages(ebillMessages.ebillTypeDetails),content:(<AddEbillTypeDetails next={next}ebillTypeDetails={ebillTypeDetails}setEbillTypeDetails={setEbillTypeDetails}/>)},{title:messages(ebillMessages.ebillHeaders),content:(<AddHeaders next={next}prev={prev}ebillTypeDetails={ebillTypeDetails}setEbillTypeDetails={setEbillTypeDetails}/>)},{title:messages(ebillMessages.feeHeaders),content:(<AddCommissions prev={prev}ebillTypeDetails={ebillTypeDetails}mutateEbillTypes={mutateEbillTypes}mutateBillType={mutateBillType}/>)}];return(<><Steps current={current}steps={steps}/></>)};export default AddEbillTypeModal;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,useDelete}from"@brdp/engine";import{Button,ErrorAlert,Typography}from"@brdp/ui";import{generalMessages,getFormatMessage}from"@brdp/utils";type DeleteEbillTypeData={code:string};type DeleteEbillTypeProps={code:string;mutateEbillTypes:()=>void;name:string};type DeleteEbillTypeResponse=null;const DeleteEbillType=({code,name,mutateEbillTypes}:DeleteEbillTypeProps)=>{const messages=getFormatMessage();const{data,mutate,isLoading,error}=useDelete<DeleteEbillTypeResponse,DeleteEbillTypeData>(Services.EbillTypesManagement.DELETE_EBILL_TYPE,{raw:true});const handleDelete=()=>{mutate({code}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result.message||messages(generalMessages.deleteDynamicResponse,{item:""})},"success","deleteEbillType");mutateEbillTypes();hideAppModal("deleteEbillTypeModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<Typography text={messages(ebillMessages.deleteEbillTypeConfirmation,{name})}/><div className="ant-modal-footer custom-actions-modal"><Button label={messages(generalMessages.actionDelete)}loading={isLoading}type="danger"onClick={handleDelete}/><Button label={messages(generalMessages.cancel)}onClick={()=>{hideAppModal("deleteEbillTypeModal")}}/></div></>)};export default DeleteEbillType;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{useGetAggregateData}from"@/utils/hooks/use-get-aggregate-data";import{useGet}from"@brdp/engine";import{ErrorAlert,Spin,Steps}from"@brdp/ui";import{generalMessages,getFormatMessage}from"@brdp/utils";import{useState}from"react";import{type EbillTypeDetailsType}from"../add-ebill-type/add-ebill-type-modal";import EditCommissions from"./components/edit-commissions";import EditEbillTypeDetails from"./components/edit-ebill-type-details";import EditHeaders from"./components/edit-headers";type EditEbillTypeProps={mutateEbillTypes:()=>void;code:string};const EditEbillTypeModal=({mutateEbillTypes,code}:EditEbillTypeProps)=>{const messages=getFormatMessage();const[current,setCurrent]=useState<number>(0);const[ebillTypeDetails,setEbillTypeDetails]=useState<EbillTypeDetailsType>();const next=()=>{setCurrent((prev)=>prev+1)};const prev=()=>{setCurrent((prev)=>prev-1)};const{data,isFetching,error}=useGet<EbillTypeDetailsType>(["ebillTypeDetail",code],Services.ExternalServices.GET_EBILL_TYPE_BY_CODE(code),{raw:true});const{aggregateDataIsFetching,convertDebtTypeData,assuranceTypeData,approvalReferenceData}=useGetAggregateData({"[0].ServiceKey":"GetAassuranceTypeExternalApi","[1].ServiceKey":"GetConvertDebtTypeExternalApi","[2].ServiceKey":"GetApprovalReferenceExternalApi"});const steps=[{title:messages(ebillMessages.ebillTypeDetails),content:(<EditEbillTypeDetails next={next}ebillTypeDetails={ebillTypeDetails||data?.resultData}setEbillTypeDetails={setEbillTypeDetails}selectboxData={{convertDebtTypeData,assuranceTypeData,approvalReferenceData}}/>)},{title:messages(ebillMessages.ebillHeaders),content:(<EditHeaders next={next}prev={prev}ebillTypeDetails={ebillTypeDetails||data?.resultData}setEbillTypeDetails={setEbillTypeDetails}/>)},{title:messages(ebillMessages.feeHeaders),content:(<EditCommissions prev={prev}ebillTypeDetails={ebillTypeDetails||data?.resultData}mutateEbillTypes={mutateEbillTypes}/>)}];if(isFetching||aggregateDataIsFetching){return<Spin caption={messages(generalMessages.isFetchingData)}/>}if(data?.isSuccess&&data?.resultData){return<Steps current={current}steps={steps}/>}return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}</>)};export default EditEbillTypeModal;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{type SelectboxDataType}from"@/utils/convert-selectbox-data";import{useGet}from"@brdp/engine";import{ErrorAlert,Spin}from"@brdp/ui";import FormGenerator,{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage}from"@brdp/utils";type EbillTypeDetailFormType={code:string;name:string;convertDebtLoanType:string;discountLoanType:string;assuranceTypes:string[];approvalAuthorities:string[];assurancePercentage:string;billAmountFrom:number;billAmountTo:number;proof:string;hasGuarantor:string;ebillMainTopic:string;temporaryDebtorsTopic:string;bankCommitmentsTopic:string;customerCommitmentsTopic:string;issueCommission:string;otherCommission:string;transferCommission:string};type EbillTypeDetailsType={code:string;name:string;mainTopic:string;bankCommitmentsTopic:string;hasGuarantor:boolean;customerCommitmentsTopic:string;temporaryDebtorsTopic:string;convertDebtLoanTypeCode:string;discountLoanTypeCode:string;assuranceTypeCodes:string[];assurancePercentage:number;billAmountFrom:number;billAmountTo:number;proof:boolean;userGroupNumbers:string[];issueContractCommissionTopic:string;otherCommissionTopic:string;transferCommissionTopic:string;discountLoanTypeName:string;convertDebtLoanTypeName:string;assuranceTypes:SelectboxDataType[];userGroups:SelectboxDataType[]};type ShowEbillTypeDetailProps={code:string};const ShowEbillTypeDetail=({code}:ShowEbillTypeDetailProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailFormType>({id:"ebillTypeDetailForm"});const{data,isFetching,error}import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,useDelete}from"@brdp/engine";import{Button,ErrorAlert,Typography}from"@brdp/ui";import{generalMessages,getFormatMessage}from"@brdp/utils";type DeleteProofProps={billNumber:string;proofType:string;fileName:string;mutateProof:()=>void};type DeleteProofData={billNumber:string;proofType:string};const DeleteProof=({billNumber,proofType,fileName,mutateProof}:DeleteProofProps)=>{const messages=getFormatMessage();const{data,mutate,isLoading,error}=useDelete<null,DeleteProofData>(Services.Proof.DELETE,{raw:true});const handleDelete=()=>{mutate({billNumber,proofType}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result.message||messages(generalMessages.deleteSuccessfulResponse,{item:""})},"success","deleteProof");mutateProof();hideAppModal("deleteProofModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<Typography text={messages(ebillMessages.deleteProofConfirmation,{billNumber,fileName})}/><div className="ant-modal-footer custom-actions-modal"><Button label={messages(generalMessages.actionDelete)}loading={isLoading}type="danger"onClick={handleDelete}/><Button label={messages(generalMessages.cancel)}onClick={()=>{hideAppModal("deleteProofModal")}}/></div></>)};export default DeleteProof;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{type BillTypeDataType}from"@/utils/convert-selectbox-data";import{showAppModal}from"@/utils/hooks/useAppModal";import{showToast,useGet}from"@brdp/engine";import{Content,GenerativeTable,IconsList,Tag,useTablePagination}from"@brdp/ui";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,removeEmptyValues}from"@brdp/utils";import{useEffect,useState}from"react";import{flushSync}from"react-dom";import{useGetBillType}from"../base-info/commission-rate/hooks/use-get-bill-type";import AddEbillTypeModal from"./modals/add-ebill-type/add-ebill-type-modal";import DeleteEbillType from"./modals/delete-ebill-type/delete-ebill-type";import EditEbillTypeModal from"./modals/edit-ebill-type/edit-ebill-type-modal";import ShowEbillTypeDetail from"./modals/show-ebill-type-detail/show-ebill-type-detail";type EbillTypesManagementFormType={code:string;deletedType:boolean};type EbillTypesManagementResponseType={pageNumber:number;pageSize:number;totalCount:number;items:BillTypeDataType[]};const EbillTypesManagement:React.FC=()=>{const messages=getFormatMessage();const{billTypeLoading,uniqueBillTypes,mutateBillType}=useGetBillType();const[searchData,setSearchData]=useState({code:"",deletedType:false});const{tableConfig,PAGE_SIZE,resetPage,tableFromIndex,currentPage}=useTablePagination();const{ControlledForm}=useControlledForm<EbillTypesManagementFormType>({id:"ebillTypesManagementForm"});const{data,isFetching,isLoading,mutate}=useGet<EbillTypesManagementResponseType>(["ebill-types-management"],Services.EbillTypesManagement.GET_EBILL_TYPES({pageSize:PAGE_SIZE,pageNumber:currentPage,...removeEmptyValues<Partial<EbillTypesManagementFormType>>({code:searchData.code,deletedType:searchData.deletedType})}),{enable:false,hasPagination:true});const handleSearch=(values:EbillTypesManagementFormType)=>{flushSync(()=>setSearchData({...values,deletedType:!!values.deletedType}));mutate().then((result)=>{if(result?.status==="success"&&!result?.data?.isSuccess){showToast({title:messages(generalMessages.error),description:messages(generalMessages.errorBadResponse)},"error","ebill-types-management")}});resetPage()};useEffect(()=>{if(data?.resultData){mutate()}},[currentPage,PAGE_SIZE]);return(<Content title={messages(ebillMessages.ebillTypesManagement)}><ControlledForm isSubmitting={isLoading}submitLabel={messages(generalMessages.search)}submitButtonIcon={<IconsList.SearchIcon/>}onSubmit={(values)=>handleSearch(values)}fields={[{name:"code",type:"select",label:messages(ebillMessages.ebillTypeCodeName),loading:billTypeLoading,options:{placeholder:messages(generalMessages.doChoose),searchable:true},data:{static:uniqueBillTypes}},{name:"deletedType",type:"checkbox",label:messages(ebillMessages.deletedItems)}]}/><GenerativeTable<BillTypeDataType>rowKey="code"fromIndex={tableFromIndex}data={data?.resultData?.items||[]}pagination={tableConfig(data?.resultData?.totalCount||0)}title={`${messages(generalMessages.tableRowsCount)}:${data?.resultData?.totalCount||0}`}loading={isFetching}columns={[{key:"code",dataIndex:"code",title:messages(ebillMessages.ebillTypeCode)},{key:"name",dataIndex:"name",title:messages(ebillMessages.ebillTypeName)},{key:"enable",dataIndex:"enable",title:messages(ebillMessages.status),render:(col)=>col?(<Tag color="green">{messages(ebillMessages.notDeleted)}</Tag>):(<Tag color="red">{messages(ebillMessages.deleted)}</Tag>)}]}rowActions={[{id:"1",appearance:{icon:<IconsList.EyeIcon/>,tooltip:messages(generalMessages.actionView)},action:(values)=>showAppModal({id:"showEbillTypeDetailModal",icon:<IconsList.EyeIcon/>,title:messages(ebillMessages.viewEbillType),element:<ShowEbillTypeDetail code={values.code}/>,options:{closable:true}}),disabled:false},{id:"2",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(generalMessages.actionEdit)},action:(values)=>{showAppModal({id:"editEbillTypeModal",icon:<IconsList.EditIcon/>,title:messages(ebillMessages.editEbillType),element:(<EditEbillTypeModal mutateEbillTypes={mutate}code={values.code}/>),options:{closable:true,size:"default"}})},disabled:(record)=>!record.enable},{id:"3",appearance:{icon:<IconsList.DeleteIcon/>,tooltip:messages(generalMessages.actionDelete)},action:(values)=>showAppModal({id:"deleteEbillTypeModal",icon:<IconsList.DeleteIcon/>,title:messages(ebillMessages.deleteEbillType),element:(<DeleteEbillType code={values.code}mutateEbillTypes={mutate}name={values.name}/>),options:{closable:true,size:"small"}}),disabled:(record)=>!record.enable}]}tableHeaderActions={[{id:"ebillTypeTableHeaderActions",mode:"expanded",actions:[{id:"addEbillType",action:()=>showAppModal({id:"addEbillTypeModal",icon:<IconsList.PlusCircleIcon/>,title:messages(ebillMessages.addEbillType),element:(<AddEbillTypeModal mutateEbillTypes={mutate}mutateBillType={mutateBillType}/>),options:{closable:true,size:"default"}}),appearance:{tooltip:messages(ebillMessages.addEbillType),icon:<IconsList.PlusCircleIcon/>}}]}]}/></Content>)};export default EbillTypesManagement;
import{ebillMessages}from"@/locale/ebill-messages";import{Steps}from"@brdp/ui";import{getFormatMessage}from"@brdp/utils";import{useState}from"react";import AddEbillTypeDetails from"./components/add-ebill-type-details";import AddHeaders from"./components/add-headers";import AddCommissions from"./components/add-commissions";export type EbillTypeDetailsType={code:string;name:string;mainTopic:string;bankCommitmentsTopic:string;hasGuarantor:boolean;customerCommitmentsTopic:string;temporaryDebtorsTopic:string;convertDebtLoanTypeCode:string;discountLoanTypeCode:string;assuranceTypeCodes:string[];assurancePercentage:number;billAmountFrom:number;billAmountTo:number;proof:boolean;userGroupNumbers:string[];issueContractCommissionTopic:string;otherCommissionTopic:string;transferCommissionTopic:string};type AddEbillTypeProps={mutateEbillTypes:()=>void;mutateBillType:()=>void};const AddEbillTypeModal=({mutateEbillTypes,mutateBillType}:AddEbillTypeProps)=>{const messages=getFormatMessage();const[current,setCurrent]=useState<number>(0);const[ebillTypeDetails,setEbillTypeDetails]=useState<EbillTypeDetailsType>();const next=()=>{setCurrent((prev)=>prev+1)};const prev=()=>{setCurrent((prev)=>prev-1)};const steps=[{title:messages(ebillMessages.ebillTypeDetails),content:(<AddEbillTypeDetails next={next}ebillTypeDetails={ebillTypeDetails}setEbillTypeDetails={setEbillTypeDetails}/>)},{title:messages(ebillMessages.ebillHeaders),content:(<AddHeaders next={next}prev={prev}ebillTypeDetails={ebillTypeDetails}setEbillTypeDetails={setEbillTypeDetails}/>)},{title:messages(ebillMessages.feeHeaders),content:(<AddCommissions prev={prev}ebillTypeDetails={ebillTypeDetails}mutateEbillTypes={mutateEbillTypes}mutateBillType={mutateBillType}/>)}];return(<><Steps current={current}steps={steps}/></>)};export default AddEbillTypeModal;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,useDelete}from"@brdp/engine";import{Button,ErrorAlert,Typography}from"@brdp/ui";import{generalMessages,getFormatMessage}from"@brdp/utils";type DeleteEbillTypeData={code:string};type DeleteEbillTypeProps={code:string;mutateEbillTypes:()=>void;name:string};type DeleteEbillTypeResponse=null;const DeleteEbillType=({code,name,mutateEbillTypes}:DeleteEbillTypeProps)=>{const messages=getFormatMessage();const{data,mutate,isLoading,error}=useDelete<DeleteEbillTypeResponse,DeleteEbillTypeData>(Services.EbillTypesManagement.DELETE_EBILL_TYPE,{raw:true});const handleDelete=()=>{mutate({code}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result.message||messages(generalMessages.deleteDynamicResponse,{item:""})},"success","deleteEbillType");mutateEbillTypes();hideAppModal("deleteEbillTypeModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<Typography text={messages(ebillMessages.deleteEbillTypeConfirmation,{name})}/><div className="ant-modal-footer custom-actions-modal"><Button label={messages(generalMessages.actionDelete)}loading={isLoading}type="danger"onClick={handleDelete}/><Button label={messages(generalMessages.cancel)}onClick={()=>{hideAppModal("deleteEbillTypeModal")}}/></div></>)};export default DeleteEbillType;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{useGetAggregateData}from"@/utils/hooks/use-get-aggregate-data";import{useGet}from"@brdp/engine";import{ErrorAlert,Spin,Steps}from"@brdp/ui";import{generalMessages,getFormatMessage}from"@brdp/utils";import{useState}from"react";import{type EbillTypeDetailsType}from"../add-ebill-type/add-ebill-type-modal";import EditCommissions from"./components/edit-commissions";import EditEbillTypeDetails from"./components/edit-ebill-type-details";import EditHeaders from"./components/edit-headers";type EditEbillTypeProps={mutateEbillTypes:()=>void;code:string};const EditEbillTypeModal=({mutateEbillTypes,code}:EditEbillTypeProps)=>{const messages=getFormatMessage();const[current,setCurrent]=useState<number>(0);const[ebillTypeDetails,setEbillTypeDetails]=useState<EbillTypeDetailsType>();const next=()=>{setCurrent((prev)=>prev+1)};const prev=()=>{setCurrent((prev)=>prev-1)};const{data,isFetching,error}=useGet<EbillTypeDetailsType>(["ebillTypeDetail",code],Services.ExternalServices.GET_EBILL_TYPE_BY_CODE(code),{raw:true});const{aggregateDataIsFetching,convertDebtTypeData,assuranceTypeData,approvalReferenceData}=useGetAggregateData({"[0].ServiceKey":"GetAassuranceTypeExternalApi","[1].ServiceKey":"GetConvertDebtTypeExternalApi","[2].ServiceKey":"GetApprovalReferenceExternalApi"});const steps=[{title:messages(ebillMessages.ebillTypeDetails),content:(<EditEbillTypeDetails next={next}ebillTypeDetails={ebillTypeDetails||data?.resultData}setEbillTypeDetails={setEbillTypeDetails}selectboxData={{convertDebtTypeData,assuranceTypeData,approvalReferenceData}}/>)},{title:messages(ebillMessages.ebillHeaders),content:(<EditHeaders next={next}prev={prev}ebillTypeDetails={ebillTypeDetails||data?.resultData}setEbillTypeDetails={setEbillTypeDetails}/>)},{title:messages(ebillMessages.feeHeaders),content:(<EditCommissions prev={prev}ebillTypeDetails={ebillTypeDetails||data?.resultData}mutateEbillTypes={mutateEbillTypes}/>)}];if(isFetching||aggregateDataIsFetching){return<Spin caption={messages(generalMessages.isFetchingData)}/>}if(data?.isSuccess&&data?.resultData){return<Steps current={current}steps={steps}/>}return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}</>)};export default EditEbillTypeModal;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{type SelectboxDataType}from"@/utils/convert-selectbox-data";import{useGet}from"@brdp/engine";import{ErrorAlert,Spin}from"@brdp/ui";import FormGenerator,{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage}from"@brdp/utils";type EbillTypeDetailFormType={code:string;name:string;convertDebtLoanType:string;discountLoanType:string;assuranceTypes:string[];approvalAuthorities:string[];assurancePercentage:string;billAmountFrom:number;billAmountTo:number;proof:string;hasGuarantor:string;ebillMainTopic:string;temporaryDebtorsTopic:string;bankCommitmentsTopic:string;customerCommitmentsTopic:string;issueCommission:string;otherCommission:string;transferCommission:string};type EbillTypeDetailsType={code:string;name:string;mainTopic:string;bankCommitmentsTopic:string;hasGuarantor:boolean;customerCommitmentsTopic:string;temporaryDebtorsTopic:string;convertDebtLoanTypeCode:string;discountLoanTypeCode:string;assuranceTypeCodes:string[];assurancePercentage:number;billAmountFrom:number;billAmountTo:number;proof:boolean;userGroupNumbers:string[];issueContractCommissionTopic:string;otherCommissionTopic:string;transferCommissionTopic:string;discountLoanTypeName:string;convertDebtLoanTypeName:string;assuranceTypes:SelectboxDataType[];userGroups:SelectboxDataType[]};type ShowEbillTypeDetailProps={code:string};const ShowEbillTypeDetail=({code}:ShowEbillTypeDetailProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailFormType>({id:"ebillTypeDetailForm"});const{data,isFetching,error}=useGet<EbillTypeDetailsType>(["ebillTypeDetail",code],Services.ExternalServices.GET_EBILL_TYPE_BY_CODE(code),{raw:true});if(isFetching){return<Spin caption={messages(generalMessages.isFetchingData)}/>}if(data?.isSuccess&&data?.resultData){return(<ControlledForm readOnly={true}initialValues={{code:data.resultData.code,name:data.resultData.name,convertDebtLoanType:`${data.resultData.convertDebtLoanTypeName} - ${data.resultData.convertDebtLoanTypeCode}`,discountLoanType:`${data.resultData.discountLoanTypeName} - ${data.resultData.discountLoanTypeCode}`,assuranceTypes:data.resultData.assuranceTypes.map(({code,name})=>`${name} - ${code}`),approvalAuthorities:data.resultData.userGroups.map(({code,name})=>`${name} - ${code}`),assurancePercentage:`${data.resultData.assurancePercentage} ${messages(generalMessages.percentage)}`,billAmountFrom:data.resultData.billAmountFrom,billAmountTo:data.resultData.billAmountTo,proof:data.resultData.proof?messages(generalMessages.yes):messages(generalMessages.no),hasGuarantor:data.resultData.hasGuarantor?messages(generalMessages.yes):messages(generalMessages.no),ebillMainTopic:data.resultData.mainTopic,temporaryDebtorsTopic:data.resultData.temporaryDebtorsTopic,bankCommitmentsTopic:data.resultData.bankCommitmentsTopic,customerCommitmentsTopic:data.resultData.customerCommitmentsTopic,issueCommission:data.resultData.issueContractCommissionTopic,otherCommission:data.resultData.otherCommissionTopic,transferCommission:data.resultData.transferCommissionTopic}}fields={[{type:"business",label:messages(ebillMessages.ebillDetails),name:"__ebillDetailsCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"code",label:messages(ebillMessages.ebillTypeCode),type:"input",layout:{span:2}},{name:"name",label:messages(ebillMessages.ebillTypeName),type:"input",layout:{span:2}},{name:"convertDebtLoanType",label:messages(ebillMessages.convertDebtLoanType),type:"input",layout:{span:2}},{name:"discountLoanType",label:messages(ebillMessages.discountLoanType),type:"input",layout:{span:2}},{name:"billAmountFrom",label:messages(ebillMessages.billAmountFrom),type:"business",element:FormGenerator.AmountField,layout:{span:2}},{name:"billAmountTo",label:messages(ebillMessages.billAmountTo),type:"business",element:FormGenerator.AmountField,layout:{span:2}},{name:"proof",label:messages(ebillMessages.proof),type:"input",layout:{span:2}},{name:"hasGuarantor",label:messages(ebillMessages.hasGuarantor),type:"input",layout:{span:2}},{name:"assuranceTypes",label:messages(ebillMessages.assuranceTypes),type:"select",layout:{span:4},data:{static:[]},options:{multiple:true}},{name:"approvalAuthorities",label:messages(ebillMessages.approvalAuthorities),type:"select",layout:{span:4},data:{static:[]},options:{multiple:true}},{name:"assurancePercentage",label:messages(ebillMessages.assurancePercentage),type:"input",layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.headers),name:"__headersCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"ebillMainTopic",label:messages(ebillMessages.ebillMainTopic),type:"input",layout:{span:2}},{name:"temporaryDebtorsTopic",label:messages(ebillMessages.temporaryDebtorsTopic),type:"input",layout:{span:2}},{name:"bankCommitmentsTopic",label:messages(ebillMessages.bankCommitmentsTopic),type:"input",layout:{span:2}},{name:"customerCommitmentsTopic",label:messages(ebillMessages.customerCommitmentsTopic),type:"input",layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.mainCommission),name:"__mainCommissionCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"issueCommission",label:messages(ebillMessages.issueCommission),type:"input",layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.otherCommission),name:"__otherCommissionCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"otherCommission",label:messages(ebillMessages.otherCommission),type:"input",layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.transferCommission),name:"__transferCommissionCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"transferCommission",label:messages(ebillMessages.transferCommission),type:"input",layout:{span:2}}]}}}]}/>)}return(<ErrorAlert errorMessage={data?.message||error?.message||messages(generalMessages.errorBadHappened)}/>)};export default ShowEbillTypeDetail;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,usePost}from"@brdp/engine";import{ErrorAlert}from"@brdp/ui";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,validateMaxLength,requiredFiled}from"@brdp/utils";import{type EbillTypeDetailsType}from"../add-ebill-type-modal";type CommissionsProps={prev:()=>void;ebillTypeDetails:EbillTypeDetailsType|undefined;mutateEbillTypes:()=>void;mutateBillType:()=>void};type AddEbillResponseType=null;const AddCommissions=({prev,ebillTypeDetails,mutateEbillTypes,mutateBillType}:CommissionsProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailsType>({id:"addCommissionsForm"});const{data,mutate,isLoading,error}=usePost<AddEbillResponseType,EbillTypeDetailsType>(Services.EbillTypesManagement.POST_EBILL_TYPE(),{raw:true});const handleSubmit=(values:EbillTypeDetailsType)=>{const data={...values,...ebillTypeDetails};mutate({...data,billAmountFrom:Number(data.billAmountFrom),billAmountTo:Number(data.billAmountTo),assurancePercentage:Number(data.assurancePercentage),proof:!!data.proof,hasGuarantor:!!data.hasGuarantor}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.submitSuccess)},"success","addEbillType");mutateEbillTypes();mutateBillType();hideAppModal("addEbillTypeModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<ControlledForm submitLabel={messages(generalMessages.submit)}onSubmit={(values)=>handleSubmit(values)}isSubmitting={isLoading}reset resetLabel={messages(generalMessages.previousStep)}onReset={()=>prev()}initialValues={{...ebillTypeDetails}}fields={[{name:"issueContractCommissionTopic",label:messages(ebillMessages.issueCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"otherCommissionTopic",label:messages(ebillMessages.otherCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"transferCommissionTopic",label:messages(ebillMessages.transferCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}}]}/></>)};export default AddCommissions;
import{ebillMessages}from"@/locale/ebill-messages";import{convertApprovalReferenceData,formatSelectOptionsWithCode}from"@/utils/convert-selectbox-data";import{useGetAggregateData}from"@/utils/hooks/use-get-aggregate-data";import{hideAppModal}from"@/utils/hooks/useAppModal";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,numbersOnly,numbersOnlyNotStartWithZero,requiredFiled,validateMaxEqualNumber,validateMaxLength,validateMinEqualNumber,validateMinNumber}from"@brdp/utils";import{type EbillTypeDetailsType}from"../add-ebill-type-modal";type EbillTypeDetailsProps={next:()=>void;ebillTypeDetails:EbillTypeDetailsType|undefined;setEbillTypeDetails:React.Dispatch<React.SetStateAction<EbillTypeDetailsType|undefined>>};const AddEbillTypeDetails=({next,ebillTypeDetails,setEbillTypeDetails}:EbillTypeDetailsProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailsType>({id:"addEbillTypeDetailsForm"});const{aggregateDataIsFetching,convertDebtTypeData,assuranceTypeData,approvalReferenceData}=useGetAggregateData({"[0].ServiceKey":"GetAassuranceTypeExternalApi","[1].ServiceKey":"GetConvertDebtTypeExternalApi","[2].ServiceKey":"GetApprovalReferenceExternalApi"});return(<ControlledForm submitLabel={messages(generalMessages.continue)}onSubmit={(values)=>{next();setEbillTypeDetails({...ebillTypeDetails,...values})}}reset resetLabel={messages(generalMessages.cancel)}onReset={()=>{hideAppModal("addEbillTypeModal")}}initialValues={{...ebillTypeDetails}}fields={[{name:"code",label:messages(ebillMessages.ebillTypeCode),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255),numbersOnly()]}},{name:"name",label:messages(ebillMessages.ebillTypeName),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"convertDebtLoanTypeCode",label:messages(ebillMessages.convertDebtLoanType),type:"select",layout:{span:2},loading:aggregateDataIsFetching,data:{static:convertDebtTypeData?formatSelectOptionsWithCode(convertDebtTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true},validation:{rules:[requiredFiled()]}},{name:"discountLoanTypeCode",label:messages(ebillMessages.discountLoanType),type:"select",layout:{span:2},loading:aggregateDataIsFetching,data:{static:convertDebtTypeData?formatSelectOptionsWithCode(convertDebtTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true},validation:{rules:[requiredFiled()]}},{name:"assuranceTypeCodes",label:messages(ebillMessages.assuranceTypes),type:"select",layout:{span:2},loading:aggregateDataIsFetching,data:{static:assuranceTypeData?formatSelectOptionsWithCode(assuranceTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true,multiple:true},validation:{rules:[requiredFiled()]}},{name:"userGroupNumbers",label:messages(ebillMessages.approvalAuthorities),type:"select",layout:{span:2},loading:aggregateDataIsFetching,data:{static:approvalReferenceData?convertApprovalReferenceData(approvalReferenceData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true,multiple:true},validation:{rules:[requiredFiled()]}},{name:"billAmountFrom",label:messages(ebillMessages.billAmountFrom),type:"input",layout:{span:2},validation:{rules:[validateMinNumber(0,"number"),numbersOnlyNotStartWithZero()]}},{name:"billAmountTo",layout:{span:2},label:messages(ebillMessages.billAmountTo),type:"input",validation:{rules:[validateMinNumber(0,"number"),numbersOnlyNotStartWithZero()]}},{name:"assurancePercentage",label:messages(ebillMessages.assurancePercentage),type:"input",layout:{span:2},options:{suffix:messages(generalMessages.percentage)},validation:{rules:[requiredFiled(),validateMinEqualNumber(0,"number"),validateMaxEqualNumber(1000,"number"),numbersOnly()]}},{name:"proof",label:messages(ebillMessages.proof),type:"checkbox"},{name:"hasGuarantor",label:messages(ebillMessages.hasGuarantor),type:"checkbox"}]}/>)};export default AddEbillTypeDetails;
import{ebillMessages}from"@/locale/ebill-messages";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,validateMaxLength,requiredFiled}from"@brdp/utils";import{type EbillTypeDetailsType}from"../add-ebill-type-modal";type HeadersProps={prev:()=>void;next:()=>void;ebillTypeDetails:EbillTypeDetailsType|undefined;setEbillTypeDetails:React.Dispatch<React.SetStateAction<EbillTypeDetailsType|undefined>>};const AddHeaders=({prev,next,ebillTypeDetails,setEbillTypeDetails}:HeadersProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailsType>({id:"addHeadersForm"});return(<ControlledForm submitLabel={messages(generalMessages.continue)}onSubmit={(values)=>{next();setEbillTypeDetails({...ebillTypeDetails,...values})}}reset resetLabel={messages(generalMessages.previousStep)}onReset={()=>prev()}initialValues={{...ebillTypeDetails}}fields={[{name:"mainTopic",label:messages(ebillMessages.ebillMainTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"temporaryDebtorsTopic",label:messages(ebillMessages.temporaryDebtorsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"bankCommitmentsTopic",label:messages(ebillMessages.bankCommitmentsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"customerCommitmentsTopic",label:messages(ebillMessages.customerCommitmentsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}}]}/>)};export default AddHeaders;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,usePatch}from"@brdp/engine";import{ErrorAlert}from"@brdp/ui";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,validateMaxLength,requiredFiled}from"@brdp/utils";import{type EbillTypeDetailsType}from"../../add-ebill-type/add-ebill-type-modal";type CommissionsProps={prev:()=>void;ebillTypeDetails:EbillTypeDetailsType|undefined;mutateEbillTypes:()=>void};type EditEbillResponseType=null;const EditCommissions=({prev,ebillTypeDetails,mutateEbillTypes}:CommissionsProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailsType>({id:"editCommissionsForm"});const{data,mutate,isLoading,error}=usePatch<EditEbillResponseType,EbillTypeDetailsType>(Services.EbillTypesManagement.PATCH_EBILL_TYPE(),{raw:true});const handleSubmit=(values:EbillTypeDetailsType)=>{const data={...values,...ebillTypeDetails};mutate({...data,...(data.billAmountFrom&&{billAmountFrom:Number(data.billAmountFrom)}),...(data.billAmountTo&&{billAmountTo:Number(data.billAmountTo)}),assurancePercentage:Number(data.assurancePercentage),proof:!!data.proof,hasGuarantor:!!data.hasGuarantor}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.hasSuccessResponse)},"success","editEbillType");mutateEbillTypes();hideAppModal("editEbillTypeModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<ControlledForm submitLabel={messages(generalMessages.submit)}onSubmit={(values)=>handleSubmit(values)}isSubmitting={isLoading}reset resetLabel={messages(generalMessages.previousStep)}onReset={()=>prev()}initialValues={{...ebillTypeDetails}}fields={[{name:"issueContractCommissionTopic",label:messages(ebillMessages.issueCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"otherCommissionTopic",label:messages(ebillMessages.otherCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"transferCommissionTopic",label:messages(ebillMessages.transferCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}}]}/></>)};export default EditCommissions;
import{ebillMessages}from"@/locale/ebill-messages";import{type ApprovalReferenceDataType,convertApprovalReferenceData,formatSelectOptionsWithCode,type SelectboxDataType}from"@/utils/convert-selectbox-data";import{hideAppModal}from"@/utils/hooks/useAppModal";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,numbersOnly,numbersOnlyNotStartWithZero,requiredFiled,validateMaxEqualNumber,validateMaxLength,validateMinEqualNumber,validateMinNumber}from"@brdp/utils";import{type EbillTypeDetailsType}from"../../add-ebill-type/add-ebill-type-modal";type EbillTypeDetailsProps={next:()=>void;ebillTypeDetails:EbillTypeDetailsType|undefined;setEbillTypeDetails:React.Dispatch<React.SetStateAction<EbillTypeDetailsType|undefined>>;selectboxData:{convertDebtTypeData:SelectboxDataType[];assuranceTypeData:SelectboxDataType[];approvalReferenceData:ApprovalReferenceDataType[]}};const EditEbillTypeDetails=({next,ebillTypeDetails,setEbillTypeDetails,selectboxData}:EbillTypeDetailsProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailsType>({id:"editEbillTypeDetailsForm"});return(<ControlledForm submitLabel={messages(generalMessages.continue)}onSubmit={(values)=>{next();setEbillTypeDetails({...ebillTypeDetails,...values})}}reset resetLabel={messages(generalMessages.cancel)}onReset={()=>{hideAppModal("editEbillTypeModal")}}initialValues={{...ebillTypeDetails}}fields={[{name:"code",label:messages(ebillMessages.ebillTypeCode),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255),numbersOnly()]}},{name:"name",label:messages(ebillMessages.ebillTypeName),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"convertDebtLoanTypeCode",label:messages(ebillMessages.convertDebtLoanType),type:"select",layout:{span:2},data:{static:selectboxData.convertDebtTypeData?formatSelectOptionsWithCode(selectboxData.convertDebtTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true},validation:{rules:[requiredFiled()]}},{name:"discountLoanTypeCode",label:messages(ebillMessages.discountLoanType),type:"select",layout:{span:2},data:{static:selectboxData.convertDebtTypeData?formatSelectOptionsWithCode(selectboxData.convertDebtTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true},validation:{rules:[requiredFiled()]}},{name:"assuranceTypeCodes",label:messages(ebillMessages.assuranceTypes),type:"select",layout:{span:2},data:{static:selectboxData.assuranceTypeData?formatSelectOptionsWithCode(selectboxData.assuranceTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),multiple:true,searchable:true},validation:{rules:[requiredFiled()]}},{name:"userGroupNumbers",label:messages(ebillMessages.approvalAuthorities),type:"select",layout:{span:2},data:{static:selectboxData.approvalReferenceData?convertApprovalReferenceData(selectboxData.approvalReferenceData):[]},options:{placeholder:messages(generalMessages.doChoose),multiple:true,searchable:true},validation:{rules:[requiredFiled()]}},{name:"billAmountFrom",label:messages(ebillMessages.billAmountFrom),type:"input",layout:{span:2},validation:{rules:[validateMinNumber(0,"number"),numbersOnlyNotStartWithZero()]}},{name:"billAmountTo",label:messages(ebillMessages.billAmountTo),type:"input",layout:{span:2},validation:{rules:[validateMinNumber(0,"number"),numbersOnlyNotStartWithZero()]}},{name:"assurancePercentage",label:messages(ebillMessages.assurancePercentage),type:"input",layout:{span:2},options:{suffix:messages(generalMessages.percentage)},validation:{rules:[requiredFiled(),validateMinEqualNumber(0,"number"),validateMaxEqualNumber(1000,"number"),numbersOnly()]}},{name:"proof",label:messages(ebillMessages.proof),type:"checkbox"},{name:"hasGuarantor",label:messages(ebillMessages.hasGuarantor),type:"checkbox"}]}/>)};export default EditEbillTypeDetails;
import{ebillMessages}from"@/locale/ebill-messages";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,validateMaxLength,requiredFiled}from"@brdp/utils";import{type EbillTypeDetailsType}from"../../add-ebill-type/add-ebill-type-modal";type HeadersProps={prev:()=>void;next:()=>void;ebillTypeDetails:EbillTypeDetailsType|undefined;setEbillTypeDetails:React.Dispatch<React.SetStateAction<EbillTypeDetailsType|undefined>>};const EditHeaders=({prev,next,ebillTypeDetails,setEbillTypeDetails}:HeadersProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailsType>({id:"editHeadersForm"});return(<ControlledForm submitLabel={messages(generalMessages.continue)}onSubmit={(values)=>{next();setEbillTypeDetails({...ebillTypeDetails,...values})}}reset resetLabel={messages(generalMessages.previousStep)}onReset={()=>prev()}initialValues={{...ebillTypeDetails}}fields={[{name:"mainTopic",label:messages(ebillMessages.ebillMainTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"temporaryDebtorsTopic",label:messages(ebillMessages.temporaryDebtorsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"bankCommitmentsTopic",label:messages(ebillMessages.bankCommitmentsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"customerCommitmentsTopic",label:messages(ebillMessages.customerCommitmentsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}}]}/>)};export default EditHeaders;DetailsType>(Services.EbillTypesManagement.POST_EBILL_TYPE(),{raw:true});const handleSubmit=(values:EbillTypeDetailsType)=>{const data={...values,...ebillTypeDetails};mutate({...data,billAmountFrom:Number(data.billAmountFrom),billAmountTo:Number(data.billAmountTo),assurancePercentage:Number(data.assurancePercentage),proof:!!data.proof,hasGuarantor:!!data.hasGuarantor}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.submitSuccess)},"success","addEbillType");mutateEbillTypes();mutateBillType();hideAppModal("addEbillTypeModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<ControlledForm submitLabel={messages(generalMessages.submit)}onSubmit={(values)=>handleSubmit(values)}isSubmitting={isLoading}reset resetLabel={messages(generalMessages.previousStep)}onReset={()=>prev()}initialValues={{...ebillTypeDetails}}fields={[{name:"issueContractCommissionTopic",label:messages(ebillMessages.issueCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"otherCommissionTopic",label:messages(ebillMessages.otherCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"transferCommissionTopic",label:messages(ebillMessages.transferCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}}]}/></>)};export default AddCommissions;
import{ebillMessages}from"@/locale/ebill-messages";import{convertApprovalReferenceData,formatSelectOptionsWithCode}from"@/utils/convert-selectbox-data";import{useGetAggregateData}from"@/utils/hooks/use-get-aggregate-data";import{hideAppModal}from"@/utils/hooks/useAppModal";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,numbersOnly,numbersOnlyNotStartWithZero,requiredFiled,validateMaxEqualNumber,validateMaxLength,validateMinEqualNumber,validateMinNumber}from"@brdp/utils";import{type EbillTypeDetailsType}from"../add-ebill-type-modal";type EbillTypeDetailsProps={next:()=>void;ebillTypeDetails:EbillTypeDetailsType|undefined;setEbillTypeDetails:React.Dispatch<React.SetStateAction<EbillTypeDetailsType|undefined>>};const AddEbillTypeDetails=({next,ebillTypeDetails,setEbillTypeDetails}:EbillTypeDetailsProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailsType>({id:"addEbillTypeDetailsForm"});const{aggregateDataIsFetching,convertDebtTypeData,assuranceTypeData,approvalReferenceData}=useGetAggregateData({"[0].ServiceKey":"GetAassuranceTypeExternalApi","[1].ServiceKey":"GetConvertDebtTypeExternalApi","[2].ServiceKey":"GetApprovalReferenceExternalApi"});return(<ControlledForm submitLabel={messages(generalMessages.continue)}onSubmit={(values)=>{next();setEbillTypeDetails({...ebillTypeDetails,...values})}}reset resetLabel={messages(generalMessages.cancel)}onReset={()=>{hideAppModal("addEbillTypeModal")}}initialValues={{...ebillTypeDetails}}fields={[{name:"code",label:messages(ebillMessages.ebillTypeCode),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255),numbersOnly()]}},{name:"name",label:messages(ebillMessages.ebillTypeName),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"convertDebtLoanTypeCode",label:messages(ebillMessages.convertDebtLoanType),type:"select",layout:{span:2},loading:aggregateDataIsFetching,data:{static:convertDebtTypeData?formatSelectOptionsWithCode(convertDebtTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true},validation:{rules:[requiredFiled()]}},{name:"discountLoanTypeCode",label:messages(ebillMessages.discountLoanType),type:"select",layout:{span:2},loading:aggregateDataIsFetching,data:{static:convertDebtTypeData?formatSelectOptionsWithCode(convertDebtTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true},validation:{rules:[requiredFiled()]}},{name:"assuranceTypeCodes",label:messages(ebillMessages.assuranceTypes),type:"select",layout:{span:2},loading:aggregateDataIsFetching,data:{static:assuranceTypeData?formatSelectOptionsWithCode(assuranceTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true,multiple:true},validation:{rules:[requiredFiled()]}},{name:"userGroupNumbers",label:messages(ebillMessages.approvalAuthorities),type:"select",layout:{span:2},loading:aggregateDataIsFetching,data:{static:approvalReferenceData?convertApprovalReferenceData(approvalReferenceData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true,multiple:true},validation:{rules:[requiredFiled()]}},{name:"billAmountFrom",label:messages(ebillMessages.billAmountFrom),type:"input",layout:{span:2},validation:{rules:[validateMinNumber(0,"number"),numbersOnlyNotStartWithZero()]}},{name:"billAmountTo",layout:{span:2},label:messages(ebillMessages.billAmountTo),type:"input",validation:{rules:[validateMinNumber(0,"number"),numbersOnlyNotStartWithZero()]}},{name:"assurancePercentage",label:messages(ebillMessages.assurancePercentage),type:"input",layout:{span:2},options:{suffix:messages(generalMessages.percentage)},validation:{rules:[requiredFiled(),validateMinEqualNumber(0,"number"),validateMaxEqualNumber(1000,"number"),numbersOnly()]}},{name:"proof",label:messages(ebillMessages.proof),type:"checkbox"},{name:"hasGuarantor",label:messages(ebillMessages.hasGuarantor),type:"checkbox"}]}/>)};export default AddEbillTypeDetails;
import{ebillMessages}from"@/locale/ebill-messages";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,validateMaxLength,requiredFiled}from"@brdp/utils";import{type EbillTypeDetailsType}from"../add-ebill-type-modal";type HeadersProps={prev:()=>void;next:()=>void;ebillTypeDetails:EbillTypeDetailsType|undefined;setEbillTypeDetails:React.Dispatch<React.SetStateAction<EbillTypeDetailsType|undefined>>};const AddHeaders=({prev,next,ebillTypeDetails,setEbillTypeDetails}:HeadersProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailsType>({id:"addHeadersForm"});return(<ControlledForm submitLabel={messages(generalMessages.continue)}onSubmit={(values)=>{next();setEbillTypeDetails({...ebillTypeDetails,...values})}}reset resetLabel={messages(generalMessages.previousStep)}onReset={()=>prev()}initialValues={{...ebillTypeDetails}}fields={[{name:"mainTopic",label:messages(ebillMessages.ebillMainTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"temporaryDebtorsTopic",label:messages(ebillMessages.temporaryDebtorsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"bankCommitmentsTopic",label:messages(ebillMessages.bankCommitmentsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"customerCommitmentsTopic",label:messages(ebillMessages.customerCommitmentsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}}]}/>)};export default AddHeaders;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,usePatch}from"@brdp/engine";import{ErrorAlert}from"@brdp/ui";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,validateMaxLength,requiredFiled}from"@brdp/utils";import{type EbillTypeDetailsType}from"../../add-ebill-type/add-ebill-type-modal";type CommissionsProps={prev:()=>void;ebillTypeDetails:EbillTypeDetailsType|undefined;mutateEbillTypes:()=>void};type EditEbillResponseType=null;const EditCommissions=({prev,ebillTypeDetails,mutateEbillTypes}:CommissionsProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailsType>({id:"editCommissionsForm"});const{data,mutate,isLoading,error}=usePatch<EditEbillResponseType,EbillTypeDetailsType>(Services.EbillTypesManagement.PATCH_EBILL_TYPE(),{raw:true});const handleSubmit=(values:EbillTypeDetailsType)=>{const data={...values,...ebillTypeDetails};mutate({...data,...(data.billAmountFrom&&{billAmountFrom:Number(data.billAmountFrom)}),...(data.billAmountTo&&{billAmountTo:Number(data.billAmountTo)}),assurancePercentage:Number(data.assurancePercentage),proof:!!data.proof,hasGuarantor:!!data.hasGuarantor}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.hasSuccessResponse)},"success","editEbillType");mutateEbillTypes();hideAppModal("editEbillTypeModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<ControlledForm submitLabel={messages(generalMessages.submit)}onSubmit={(values)=>handleSubmit(values)}isSubmitting={isLoading}reset resetLabel={messages(generalMessages.previousStep)}onReset={()=>prev()}initialValues={{...ebillTypeDetails}}fields={[{name:"issueContractCommissionTopic",label:messages(ebillMessages.issueCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"otherCommissionTopic",label:messages(ebillMessages.otherCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"transferCommissionTopic",label:messages(ebillMessages.transferCommission),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}}]}/></>)};export default EditCommissions;
import{ebillMessages}from"@/locale/ebill-messages";import{type ApprovalReferenceDataType,convertApprovalReferenceData,formatSelectOptionsWithCode,type SelectboxDataType}from"@/utils/convert-selectbox-data";import{hideAppModal}from"@/utils/hooks/useAppModal";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,numbersOnly,numbersOnlyNotStartWithZero,requiredFiled,validateMaxEqualNumber,validateMaxLength,validateMinEqualNumber,validateMinNumber}from"@brdp/utils";import{type EbillTypeDetailsType}from"../../add-ebill-type/add-ebill-type-modal";type EbillTypeDetailsProps={next:()=>void;ebillTypeDetails:EbillTypeDetailsType|undefined;setEbillTypeDetails:React.Dispatch<React.SetStateAction<EbillTypeDetailsType|undefined>>;selectboxData:{convertDebtTypeData:SelectboxDataType[];assuranceTypeData:SelectboxDataType[];approvalReferenceData:ApprovalReferenceDataType[]}};const EditEbillTypeDetails=({next,ebillTypeDetails,setEbillTypeDetails,selectboxData}:EbillTypeDetailsProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailsType>({id:"editEbillTypeDetailsForm"});return(<ControlledForm submitLabel={messages(generalMessages.continue)}onSubmit={(values)=>{next();setEbillTypeDetails({...ebillTypeDetails,...values})}}reset resetLabel={messages(generalMessages.cancel)}onReset={()=>{hideAppModal("editEbillTypeModal")}}initialValues={{...ebillTypeDetails}}fields={[{name:"code",label:messages(ebillMessages.ebillTypeCode),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255),numbersOnly()]}},{name:"name",label:messages(ebillMessages.ebillTypeName),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"convertDebtLoanTypeCode",label:messages(ebillMessages.convertDebtLoanType),type:"select",layout:{span:2},data:{static:selectboxData.convertDebtTypeData?formatSelectOptionsWithCode(selectboxData.convertDebtTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true},validation:{rules:[requiredFiled()]}},{name:"discountLoanTypeCode",label:messages(ebillMessages.discountLoanType),type:"select",layout:{span:2},data:{static:selectboxData.convertDebtTypeData?formatSelectOptionsWithCode(selectboxData.convertDebtTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),searchable:true},validation:{rules:[requiredFiled()]}},{name:"assuranceTypeCodes",label:messages(ebillMessages.assuranceTypes),type:"select",layout:{span:2},data:{static:selectboxData.assuranceTypeData?formatSelectOptionsWithCode(selectboxData.assuranceTypeData):[]},options:{placeholder:messages(generalMessages.doChoose),multiple:true,searchable:true},validation:{rules:[requiredFiled()]}},{name:"userGroupNumbers",label:messages(ebillMessages.approvalAuthorities),type:"select",layout:{span:2},data:{static:selectboxData.approvalReferenceData?convertApprovalReferenceData(selectboxData.approvalReferenceData):[]},options:{placeholder:messages(generalMessages.doChoose),multiple:true,searchable:true},validation:{rules:[requiredFiled()]}},{name:"billAmountFrom",label:messages(ebillMessages.billAmountFrom),type:"input",layout:{span:2},validation:{rules:[validateMinNumber(0,"number"),numbersOnlyNotStartWithZero()]}},{name:"billAmountTo",label:messages(ebillMessages.billAmountTo),type:"input",layout:{span:2},validation:{rules:[validateMinNumber(0,"number"),numbersOnlyNotStartWithZero()]}},{name:"assurancePercentage",label:messages(ebillMessages.assurancePercentage),type:"input",layout:{span:2},options:{suffix:messages(generalMessages.percentage)},validation:{rules:[requiredFiled(),validateMinEqualNumber(0,"number"),validateMaxEqualNumber(1000,"number"),numbersOnly()]}},{name:"proof",label:messages(ebillMessages.proof),type:"checkbox"},{name:"hasGuarantor",label:messages(ebillMessages.hasGuarantor),type:"checkbox"}]}/>)};export default EditEbillTypeDetails;
import{ebillMessages}from"@/locale/ebill-messages";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,validateMaxLength,requiredFiled}from"@brdp/utils";import{type EbillTypeDetailsType}from"../../add-ebill-type/add-ebill-type-modal";type HeadersProps={prev:()=>void;next:()=>void;ebillTypeDetails:EbillTypeDetailsType|undefined;setEbillTypeDetails:React.Dispatch<React.SetStateAction<EbillTypeDetailsType|undefined>>};const EditHeaders=({prev,next,ebillTypeDetails,setEbillTypeDetails}:HeadersProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<EbillTypeDetailsType>({id:"editHeadersForm"});return(<ControlledForm submitLabel={messages(generalMessages.continue)}onSubmit={(values)=>{next();setEbillTypeDetails({...ebillTypeDetails,...values})}}reset resetLabel={messages(generalMessages.previousStep)}onReset={()=>prev()}initialValues={{...ebillTypeDetails}}fields={[{name:"mainTopic",label:messages(ebillMessages.ebillMainTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"temporaryDebtorsTopic",label:messages(ebillMessages.temporaryDebtorsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"bankCommitmentsTopic",label:messages(ebillMessages.bankCommitmentsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}},{name:"customerCommitmentsTopic",label:messages(ebillMessages.customerCommitmentsTopic),type:"input",layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255)]}}]}/>)};export default EditHeaders;import CustomerSearch from"@/components/business-components/customerSearch/customer-search";import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{convertSelectboxData,type SelectboxDataType}from"@/utils/convert-selectbox-data";import{showAppModal}from"@/utils/hooks/useAppModal";import{formatNumber}from"@/utils/string-format";import{showToast,useGet}from"@brdp/engine";import{Content,DocumentWithLinesIcon,GenerativeTable,IconsList,Tag,useTablePagination}from"@brdp/ui";import FormGenerator,{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,numbersOnly,removeEmptyValues,validateExactLength,validateMaxLength}from"@brdp/utils";import{useEffect,useState}from"react";import{flushSync}from"react-dom";import{useGetBillType}from"../base-info/commission-rate/hooks/use-get-bill-type";import AddBaratFile from"./modals/add-barat-file/add-barat-file";import BankIssuance from"./modals/bank-issuance/bank-issuance";import CentralBankManagement from"./modals/central-bank-management/central-bank-management-modal";import CustomerIssuanceBack from"./modals/customer-issuance-back/customer-issuance-back";import CustomerIssuance from"./modals/customer-issuance/customer-issuance";import{EbillCommissions}from"./modals/ebill-commissions/ebill-commissions";import EditBaratFile from"./modals/edit-barat-file/edit-barat-file";import{MinistryOfEconomy}from"./modals/ministry-of-economy/ministry-of-economy";import ProofManagement from"./modals/proof/proof-management-modal";import ReceiveAmount from"./modals/receive-amount/receive-amount";import SanctionApprove from"./modals/sanction-approve/sanction-approve";import Sanction from"./modals/sanction/sanction";import ViewEbillDetail from"./modals/detail-view/view-ebill-detail";type EbillFilesManagementFormType={billTypeCode:string;customerNumber:string;centralBankCode:string;billNumber:string;startDateFrom:string;startDateTo:string;expireDateFrom:string;expireDateTo:string;amountFrom:number;amountTo:number;status:string};export type EbillFilesManagementDataType={billTypeCode?:string;customerNumber?:string;centralBankCode?:string;billNumber?:string;startDateFrom?:string;startDateTo?:string;expireDateFrom?:string;expireDateTo?:string;amountFrom?:number;amountTo?:number;status?:string;pageSize:number;pageNumber:number};type EbillFileType={centralBankCode:string;billNumber:string;enable:boolean;statusName:string;statusCode:string;startDate:string;endDate:string;amount:number;customerNumber:string;duration:number;billTypeCode:string;billTypeName:string;action:{update:boolean;view:boolean;delete:boolean;certificate:boolean;sanction:boolean;transfer:boolean;approve:boolean;assurance:boolean;centralBank:boolean;economyMinistry:boolean;issuance:boolean;commission:boolean;receivePayment:boolean;payPayment:boolean;convertDebt:boolean;spmManagement:boolean;settlement:boolean;customerIssuance:boolean;customerIssuanceBack:boolean;ministryTax:boolean;receiveCash:boolean}};type EbillFilesManagementResponseType={pageNumber:number;pageSize:number;totalCount:number;items:EbillFileType[]};const CustomTag:React.FC<{title:string;type:string}>={({title,type})=>{switch(type){case"ELECTRONIC_BILL_ISSUED":return(<Tag bordered={false}color="#1991FF0D"style={{color:"#105EA6"}}>{title}</Tag>);case"ELECTRONIC_BILL_PAYED":return(<Tag bordered={false}color="#0081790F"style={{color:"#008179"}}>{title}</Tag>);case"ELECTRONIC_BILL_SETTLED":return(<Tag bordered={false}color="#F4F4F5"style={{color:"#272937"}}>{title}</Tag>);case"ELECTRONIC_BILL_APPROVED":return(<Tag bordered={false}color="#43A8240D"style={{color:"#2C6D17"}}>{title}</Tag>);case"ELECTRONIC_BILL_HAS_MINISTRY_TAX":return(<Tag color="#FFFFFF"style={{color:"#272937",border:"1px solid #E5E5E7"}}>{title}</Tag>);case"ELECTRONIC_BILL_BANK_ISSUED":return(<Tag bordered={false}color="#7C00810F"style={{color:"#7C0081"}}>{title}</Tag>);case"ELECTRONIC_BILL_DELETED":return(<Tag bordered={false}color="#F1380E0D"style={{color:"#9D2409"}}>{title}</Tag>);case"ELECTRONIC_BILL_CREATED":return(<Tag bordered={false}color="#48A4EA1A"style={{color:"#2F6B98"}}>{title}</Tag>);default:return<Tag>{title}</Tag>}};const EbillFilesManagement:React.FC=()=>{const messages=getFormatMessage();const{billTypeLoading,uniqueBillTypes}=useGetBillType();const[searchData,setSearchData]=useState<EbillFilesManagementFormType>({billTypeCode:"",customerNumber:"",centralBankCode:"",billNumber:"",startDateFrom:"",startDateTo:"",expireDateFrom:"",expireDateTo:"",amountFrom:0,amountTo:0,status:""});const{tableConfig,PAGE_SIZE,resetPage,tableFromIndex,currentPage}=useTablePagination();const{ControlledForm}=useControlledForm<EbillFilesManagementFormType>({id:"ebillFilesManagementForm"});const{data:allBillStatusData,isFetching:allBillStatusIsFetching}=useGet<SelectboxDataType[]>(["all-bill-status"],Services.EbillServices.GET_ALL_BILL_STATUS());const{data,isFetching,isLoading,mutate}=useGet<EbillFilesManagementResponseType>(["ebill-files-management"],Services.EbillFilesManagement.GET_EBILL_FILES({pageSize:PAGE_SIZE,pageNumber:currentPage,...removeEmptyValues<Partial<EbillFilesManagementFormType>>({...searchData})}),{enable:false,hasPagination:true});const handleSearch=(values:EbillFilesManagementFormType)=>{flushSync(()=>setSearchData(values));mutate().then((result)=>{if(result?.status==="success"&&!result?.data?.isSuccess){showToast({title:messages(generalMessages.error),description:messages(generalMessages.errorBadResponse)},"error","ebill-files-management")}});resetPage()};useEffect(()=>{if(data?.resultData){mutate()}},[currentPage,PAGE_SIZE]);return(<Content title={messages(ebillMessages.ebillFilesManagement)}><ControlledForm isSubmitting={isLoading}submitLabel={messages(generalMessages.search)}submitButtonIcon={<IconsList.SearchIcon/>}onSubmit={(values)=>handleSearch(values)}fields={[{name:"billTypeCode",type:"select",label:messages(ebillMessages.ebillTypeCodeName),loading:billTypeLoading,options:{placeholder:messages(generalMessages.doChoose),searchable:true},data:{static:uniqueBillTypes}},{type:"business",name:"customerNumber",label:messages(generalMessages.customerNumber),element:CustomerSearch},{name:"centralBankCode",type:"input",label:messages(ebillMessages.centralBankCode),validation:{rules:[validateExactLength(16),numbersOnly()]}},{name:"billNumber",type:"input",label:messages(ebillMessages.ebillFileNumber)},{name:"startDateFrom",type:"business",element:FormGenerator.DatePickerField,label:messages(ebillMessages.creationDateFrom),options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{maxDate:"startDateTo"}}},{name:"startDateTo",type:"business",element:FormGenerator.DatePickerField,label:messages(ebillMessages.creationDateTo),options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{minDate:"startDateFrom"}}},{name:"expireDateFrom",type:"business",element:FormGenerator.DatePickerField,label:messages(ebillMessages.expireDateFrom),options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{maxDate:"expireDateTo"}}},{name:"expireDateTo",type:"business",element:FormGenerator.DatePickerField,label:messages(ebillMessages.expireDateTo),options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{minDate:"expireDateFrom"}}},{name:"amountFrom",type:"input",label:messages(ebillMessages.ebillAmountFrom),validation:{rules:[validateMaxLength(15),numbersOnly()]}},{name:"amountTo",type:"input",label:messages(ebillMessages.ebillAmountTo),validation:{rules:[validateMaxLength(15),numbersOnly()]}},{name:"status",type:"select",label:messages(generalMessages.status),loading:allBillStatusIsFetching,options:{placeholder:messages(generalMessages.doChoose)},data:{static:allBillStatusData?convertSelectboxData(allBillStatusData?.resultData):[]}}]}/><GenerativeTable<EbillFileType>rowKey="billNumber"fromIndex={tableFromIndex}data={data?.resultData?.items||[]}pagination={tableConfig(data?.resultData?.totalCount||0)}title={`${messages(generalMessages.tableRowsCount)}:${data?.resultData?.totalCount||0}`}loading={isFetching}tableHeaderActions={[{id:"barat-file",mode:"expanded",actions:[{id:"add-barat-file",appearance:{icon:<IconsList.PlusCircleIcon/>,tooltip:messages(ebillMessages.addNewBarat)},action:()=>showAppModal({id:"add-barat-file",title:messages(ebillMessages.addNewBarat),element:<AddBaratFile mutate={mutate}/>,options:{size:"default",closable:true}})}]}]}columns={[{key:"billNumber",dataIndex:"billNumber",title:messages(ebillMessages.ebillFileNumber),align:"center"},{key:"customerNumber",dataIndex:"customerNumber",title:messages(generalMessages.customerNumber),align:"center"},{key:"centralBankCode",dataIndex:"centralBankCode",title:messages(ebillMessages.centralBankCode),align:"center"},{key:"startDate",dataIndex:"startDate",title:messages(ebillMessages.fileCreationDate),align:"center",sorter:(a,b)=>a.startDate.localeCompare(b.startDate)},{key:"endDate",dataIndex:"endDate",title:messages(ebillMessages.fileExpirationDate),align:"center",sorter:(a,b)=>a.endDate.localeCompare(b.endDate)},{key:"amount",dataIndex:"amount",title:messages(ebillMessages.ebillAmount),render:(col)=>{return<p>{formatNumber(col)+" "+messages(ebillMessages.rial)}</p>},align:"center",sorter:(a,b)=>{const amountA=Number(a.amount)||0;const amountB=Number(b.amount)||0;return amountA-amountB}},{key:"statusName",dataIndex:"statusName",title:messages(generalMessages.status),render:(col,row)=><CustomTag title={col}type={row.statusCode}/>,align:"center"}]}rowActions={[{id:"1",appearance:{icon:<IconsList.EyeIcon/>,tooltip:messages(generalMessages.actionView)},action:(value)=>{showAppModal({id:"ebill-detail-view",icon:<IconsList.EyeIcon/>,title:messages(ebillMessages.viewDetailBaratManagement),element:<ViewEbillDetail billNumber={value.billNumber}/>,options:{onCancel:()=>{},size:"wide",closable:true,cancelText:messages(ebillMessages.closeWindow)}})},permissionField(record){return record.action.view}},{id:"2",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(generalMessages.actionEdit)},action:(value)=>{showAppModal({id:"edit-barat-file",title:messages(ebillMessages.editFileBarat,{billNumber:value?.billNumber||""}),element:(<EditBaratFile mutate={mutate}billNumber={value?.billNumber||""}/>),options:{size:"default",closable:true}})}},{id:"3",appearance:{icon:<IconsList.DeleteIcon/>,tooltip:messages(generalMessages.actionDelete)},action:()=>{},permissionField(record){return record.action.delete}},{id:"4",appearance:{icon:"",tooltip:messages(ebillMessages.certificates)},action:(values)=>{showAppModal({id:"proofModal",title:messages(ebillMessages.certificates),element:<ProofManagement{...values}/>,options:{size:"wide",closable:true}})},permissionField(record){return record.action.certificate}},{id:"5",appearance:{icon:"",tooltip:messages(ebillMessages.sanction)},action:(values)=>{showAppModal({id:"sanction-barat-file",icon:<IconsList.EyeIcon/>,title:messages(ebillMessages.sanction),element:<Sanction{...values}/>,options:{size:"default",closable:true}})},permissionField(record){return record.action.sanction}},{id:"6",appearance:{icon:"",tooltip:messages(ebillMessages.transfer)},action:()=>{},permissionField(record){return record.action.transfer}},{id:"7",appearance:{icon:"",tooltip:messages(ebillMessages.approve)},action:(value)=>{showAppModal({id:"approve-barat-file",title:messages(ebillMessages.approve),element:<SanctionApprove{...value}/>,icon:<IconsList.DocumentWithLinesIcon/>,options:{size:"default",closable:true}})},permissionField(record){return record.action.approve}},{id:"8",appearance:{icon:"",tooltip:messages(ebillMessages.assurance)},action:()=>{},permissionField(record){return record.action.assurance}},{id:"economy-ministry-action",appearance:{icon:"",tooltip:messages(ebillMessages.economyMinistry)},action:()=>{showAppModal({id:"economy-ministry-modal",title:messages(ebillMessages.economyMinistryServicesManagement),icon:<DocumentWithLinesIcon/>,element:<MinistryOfEconomy/>,options:{onCancel:()=>{},cancelText:messages(generalMessages.close),closable:true}})},permissionField(record){return record.action.economyMinistry}},{id:"10",appearance:{icon:"",tooltip:messages(ebillMessages.ministryTax)},action:()=>{},permissionField(record){return record.action.ministryTax}},{id:"11",appearance:{icon:"",tooltip:messages(ebillMessages.issuance)},action:(values)=>{showAppModal({id:"bankIssuanceModal",title:messages(ebillMessages.issuance),element:(<BankIssuance billNumber={values.billNumber}customerNumber={values.customerNumber}getEbillFiles={mutate}/>),options:{size:"small",closable:true}})},permissionField(record){return record.action.issuance}},{id:"ebill-commission",appearance:{icon:"",tooltip:messages(ebillMessages.commission)},action:()=>{showAppModal({id:"ebill-commission-modal",title:messages(ebillMessages.ebillCommissions),icon:<DocumentWithLinesIcon/>,element:<EbillCommissions/>,options:{onCancel:()=>{},cancelText:messages(generalMessages.close),closable:true}})},permissionField(record){return record.action.commission}},{id:"13",appearance:{icon:"",tooltip:messages(ebillMessages.receivePayment)},action:(values)=>{showAppModal({id:"receiveAmountModal",title:messages(ebillMessages.receivePayment),icon:<IconsList.DocumentWithLinesIcon/>,element:<ReceiveAmount{...values}/>,options:{size:"wide",closable:true,cancelText:messages(generalMessages.close),onCancel:()=>{}}})},permissionField(record){return record.action.receivePayment}},{id:"14",appearance:{icon:"",tooltip:messages(ebillMessages.payPayment)},action:()=>{},permissionField(record){return record.action.payPayment}},{id:"15",appearance:{icon:"",tooltip:messages(ebillMessages.convertDebt)},action:()=>{},permissionField(record){return record.action.convertDebt}},{id:"16",appearance:{icon:"",tooltip:messages(ebillMessages.centralBankManagement)},action:(values)=>{showAppModal({id:"centralBankManagementModal",title:messages(ebillMessages.centralBankManagement),element:<CentralBankManagement{...values}getEbillFiles={mutate}/>,options:{closable:true,size:"wide"}})}},{id:"17",appearance:{icon:"",tooltip:messages(ebillMessages.settlement)},action:()=>{},permissionField(record){return record.action.settlement}},{id:"18",appearance:{icon:"",tooltip:messages(ebillMessages.customerIssuance)},action:(values)=>{showAppModal({id:"customerIssuanceModal",title:messages(ebillMessages.customerIssuance),element:(<CustomerIssuance billNumber={values.billNumber}customerNumber={values.customerNumber}getEbillFiles={mutate}/>),options:{size:"small"}})},permissionField(record){return record.action.customerIssuance}},{id:"19",appearance:{icon:"",tooltip:messages(ebillMessages.customerIssuanceBack)},action:(values)=>{showAppModal({id:"customerIssuanceBackModal",title:messages(ebillMessages.customerIssuanceBack),element:(<CustomerIssuanceBack billNumber={values.billNumber}customerNumber={values.customerNumber}getEbillFiles={mutate}/>),options:{size:"small"}})},permissionField(record){return record.action.customerIssuanceBack}}]}/></Content>)};export default EbillFilesManagement;
import{ebillMessages}from"@/locale/ebill-messages";import{Steps}from"@brdp/ui";import{currentJalali,getFormatMessage}from"@brdp/utils";import{useState,useMemo,useCallback}from"react";import InitialInfoFirstStep from"./components/initial-info-first-step";import BillSpecificationsSecondStep from"./components/bill-specifications-second-step";import SamatThirdStep from"./components/samat-third-step";import BeneficiaryFourthStep from"./components/beneficiary-fourth-step";import GuarantorFifthStep from"./components/guarantor-fifth-step";export type BillOfExchangeForm={billTypeCode:string;depositNumber:string;ibanNumber:string;customerNumber:string;nationalCode:string;billApplicantPlace:string;billApplicantSanaCode:string;centralBankCode:string;taxStampNumber:string;requestDate:string;transferable:boolean;startDate:string;expireDate:string;billTakerName:string;billTakerPlace:string;billTakerSanaCode:string;billPayPlace:string;advisorName:string;advisorCode:string;advisorSwiftCode:string;advisorBranchCode:string;economicalSection:string;subEconomicalSection:string;inquiryNumber:string;billTotalWorth:string;intermediaryDeposit:string;comment:string;taxComment:string;isBankCustomer:"BANK_CUSTOMER"|"OTHER_BANK_CUSTOMER";beneficiaryCustomerNumber:string;beneficiaryNationalCode:string;beneficiaryName:string;beneficiaryBirthCertificateNumber:string;beneficiaryRegisterNumber:string;beneficiaryShahabCode:string;beneficiaryBirthDate:string;beneficiaryRegisterDate:string;beneficiaryPhoneNumber:string;beneficiaryBirthCity:string;beneficiaryRegisterCity:string;beneficiaryPostalCode:string;beneficiaryIbanNumber:string;beneficiarySanaCode:string;beneficiaryAddress:string;noneBeneficiaryType:string;noneBeneficiaryGender:string;guarantors:guarantors;user:string;currentBranchCode:string;branchName:string};export type guarantors={guaranteePercent:number;customerNumber:string;sanaCode:string}[];export const initialElectronicBill:BillOfExchangeForm={billTypeCode:"",depositNumber:"",customerNumber:"",nationalCode:"1234567890",ibanNumber:"IR123456789123456789123456",billApplicantPlace:"",billApplicantSanaCode:"",centralBankCode:"",taxStampNumber:"",requestDate:currentJalali(),transferable:false,startDate:"",expireDate:"",billTakerName:"بانک پاسارگاد",billTakerPlace:"",billTakerSanaCode:"",billPayPlace:"",advisorName:"پاسارگاد",advisorCode:"57",advisorSwiftCode:"BKBPIRTHXXX",economicalSection:"",subEconomicalSection:"",inquiryNumber:"",billTotalWorth:"",intermediaryDeposit:"",comment:"",taxComment:"",isBankCustomer:"BANK_CUSTOMER",beneficiaryCustomerNumber:"",beneficiaryNationalCode:"9876543210",beneficiaryName:"",beneficiaryBirthCertificateNumber:"",beneficiaryRegisterNumber:"",beneficiaryShahabCode:"",beneficiaryBirthDate:"",beneficiaryRegisterDate:"",beneficiaryPhoneNumber:"",beneficiaryBirthCity:"",beneficiaryRegisterCity:"",beneficiaryPostalCode:"",beneficiaryIbanNumber:"",beneficiarySanaCode:"",beneficiaryAddress:"",noneBeneficiaryType:"",noneBeneficiaryGender:"",guarantors:[],user:"current_user",currentBranchCode:"119",branchName:"پاسارگاد",advisorBranchCode:"119"};type IProps={mutate:()=>void};const AddBaratFilePage:React.FC<IProps>=({mutate})=>{const messages=getFormatMessage();const[current,setCurrent]=useState(0);const[formValueState,setFormValueState]=useState<BillOfExchangeForm>(initialElectronicBill);const next=useCallback(()=>setCurrent((prev)=>prev+1),[]);const prev=useCallback(()=>setCurrent((prev)=>prev-1),[]);const updateFormState=useCallback((updates:Partial<BillOfExchangeForm>)=>{setFormValueState((prevState)=>({...prevState,...updates}))},[]);const steps=useMemo(()=>[{title:messages(ebillMessages.initialInfo),content:(<InitialInfoFirstStep formValueState={formValueState}updateFormState={updateFormState}next={next}/>)},{title:messages(ebillMessages.billSpecifications),content:(<BillSpecificationsSecondStep formValueState={formValueState}updateFormState={updateFormState}next={next}prev={prev}/>)},{title:messages(ebillMessages.samatInfo),content:(<SamatThirdStep formValueState={formValueState}updateFormState={updateFormState}next={next}prev={prev}/>)},{title:messages(ebillMessages.beneficiaryInfo),content:(<BeneficiaryFourthStep formValueState={formValueState}updateFormState={updateFormState}next={next}prev={prev}/>)},{title:messages(ebillMessages.guaranteeInfo),content:(<GuarantorFifthStep prev={prev}updateFormState={updateFormState}formValueState={formValueState}mutate={mutate}/>)}],[formValueState,messages,next,prev,updateFormState]);return<Steps current={current}steps={steps}/>};export default AddBaratFilePage;
import{useControlledForm}from"@brdp/ui/form";import{BillOfExchangeForm}from"../add-barat-file";import FormGenerator from"@brdp/ui/form";import{useGetBaratCity}from"@/pages/configuration/hook/use-get-barat-city-api";import{useGet}from"@brdp/engine";import{Services}from"@/services/url";import{ebillMessages}from"@/locale/ebill-messages";import{generalMessages,getFormatMessage,requiredFiled}from"@brdp/utils";import CustomerSearch from"@/components/business-components/customerSearch/customer-search";import{convertSelectboxData}from"@/utils/convert-selectbox-data";type OptionData={name:string;code:string};type IProps={next:()=>void;prev:()=>void;updateFormState:(updates:Partial<BillOfExchangeForm>)=>void;formValueState:BillOfExchangeForm};const BeneficiaryFourthStep=({next,prev,updateFormState,formValueState}:IProps)=>{const messages=getFormatMessage();const{ControlledForm,fieldWatch,setFieldsValue}=useControlledForm<BillOfExchangeForm>({id:"step3-add-barat-file"});const watchPersonType=fieldWatch("noneBeneficiaryType");const isBankCustomer=formValueState?.isBankCustomer==="BANK_CUSTOMER";const isRealPerson=watchPersonType==="REAL"||watchPersonType==="FOREIGN_REAL";const isLegalPerson=watchPersonType==="LEGAL"||watchPersonType==="FOREIGN_LEGAL";const isForeignPerson=watchPersonType==="FOREIGN_REAL"||watchPersonType==="FOREIGN_LEGAL";const{fetchedCity,isLoadingCity}=useGetBaratCity();const{isLoading:personTypeLoading,data:personTypeData}=useGet<OptionData[]>(["person-type"],Services.EbillServices.GET_PERSON_TYPES());const{isLoading:genderTypeLoading,data:genderTypeData}=useGet<OptionData[]>(["gender-type"],Services.EbillServices.GET_GENDER());const validateNationalCode=(value:string)=>{if(!value)return Promise.reject(messages(ebillMessages.enterNationalIdCode));if(watchPersonType==="REAL"&&value.length!==10){return Promise.reject(messages(ebillMessages.nationalCodeMustBe10Digits))}if(watchPersonType==="LEGAL"&&value.length!==11){return Promise.reject(messages(ebillMessages.nationalIdMustBe11Digits))}if(isForeignPerson&&(value.length<8||value.length>13)){return Promise.reject(messages(ebillMessages.foreignCodeBetween8To13Digits))}if(value===formValueState.nationalCode){return Promise.reject(messages(ebillMessages.beneficiaryCannotBeSameAsDrawer))}return Promise.resolve()};const handleSubmit=(formValue:BillOfExchangeForm)=>{updateFormState(formValue);next()};const handleCancel=()=>{prev()};const bankCustomerFields=[{type:"business",element:CustomerSearch,name:"beneficiaryCustomerNumber",label:messages(ebillMessages.searchCustomer),validation:{rules:[requiredFiled()]},layout:{span:2},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryCustomerNumber:""})}return!!values?.centralBankCode||!isBankCustomer}},{type:"input",name:"__beneficiaryPersonType",label:messages(ebillMessages.personType),layout:{span:2},disabled:true},{type:"input",name:"__beneficiaryGender",label:messages(generalMessages.genderType),layout:{span:2},disabled:true},{type:"input",name:"beneficiaryNationalCode",label:messages(ebillMessages.nationalId),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryNationalCode:""})}return true}},{type:"input",name:"beneficiaryName",label:messages(ebillMessages.beneficiaryBillName),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryName:""})}return true}},{type:"input",name:"beneficiaryBirthCertificateNumber",label:messages(ebillMessages.beneficiaryCertificateNumber),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryBirthCertificateNumber:""})}return true}},{type:"input",name:"beneficiaryRegisterNumber",label:messages(ebillMessages.beneficiaryRegistrationNumber),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryRegisterNumber:""})}return true}},{type:"input",name:"beneficiaryShahabCode",label:messages(ebillMessages.beneficiaryShahabCode),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryShahabCode:""})}return true}},{type:"business",name:"beneficiaryBirthDate",label:messages(ebillMessages.beneficiaryBirthDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"}},layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryBirthDate:""})}return true}},{type:"business",name:"beneficiaryRegisterDate",label:messages(ebillMessages.beneficiaryRegistrationDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"}},layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryRegisterDate:""})}return true}},{type:"input",name:"beneficiaryPhoneNumber",label:messages(ebillMessages.beneficiaryContactNumber),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryPhoneNumber:""})}return true}},{type:"input",name:"beneficiaryPostalCode",label:messages(generalMessages.postalCode),layout:{span:2},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryPostalCode:""})}return true}},{type:"business",name:"beneficiaryIbanNumber",label:messages(ebillMessages.beneficiaryIbanNumber),element:FormGenerator.IBANField,validation:{rules:[requiredFiled()]},options:{extraProps:{addIR:true}},layout:{span:2},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryIbanNumber:""})}return!!values?.centralBankCode||!isBankCustomer}},{type:"input",name:"beneficiarySanaCode",label:messages(ebillMessages.beneficiarySanaCode),layout:{span:2},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiarySanaCode:""})}return!!values?.centralBankCode||!isBankCustomer}},{type:"textarea",name:"beneficiaryAddress",label:messages(generalMessages.address),layout:{span:4},disabled:()=>{if(isBankCustomer){setFieldsValue({beneficiaryAddress:""})}return true}}];const nonBankCustomerFields=[{type:"select",name:"noneBeneficiaryType",label:messages(ebillMessages.personType),layout:{span:2},data:{static:convertSelectboxData(personTypeData?.resultData||[])},loading:personTypeLoading,options:{searchable:true},validation:{rules:[requiredFiled()]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({noneBeneficiaryType:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"select",name:"noneBeneficiaryGender",label:messages(generalMessages.genderType),layout:{span:2},data:{static:convertSelectboxData(genderTypeData?.resultData||[])},loading:genderTypeLoading,validation:{rules:[{required:true,message:messages(ebillMessages.selectGender)},{validator:(_:unknown,value:string)=>{if((watchPersonType==="REAL"||watchPersonType==="FOREIGN_REAL")&&value==="LEGAL"){return Promise.reject(messages(ebillMessages.realPersonGenderCannotBeLegal))}if(isLegalPerson&&value!=="LEGAL"){return Promise.reject(messages(ebillMessages.legalPersonGenderMustBeLegal))}return Promise.resolve()}}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({noneBeneficiaryGender:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"input",name:"beneficiaryNationalCode",label:messages(ebillMessages.nationalId),layout:{span:2},validation:{rules:[{required:true,validator:(_:unknown,value:string)=>validateNationalCode(value)}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryNationalCode:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"input",name:"beneficiaryName",label:messages(ebillMessages.beneficiaryBillName),layout:{span:2},validation:{rules:[requiredFiled(),{max:255,message:messages(ebillMessages.max255Characters)}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryName:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"input",name:"beneficiaryBirthCertificateNumber",label:messages(ebillMessages.beneficiaryCertificateNumber),layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isRealPerson=personType==="REAL"||personType==="FOREIGN_REAL";if(isBankCustomer||!isRealPerson){setFieldsValue({beneficiaryBirthCertificateNumber:""})}return!isRealPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isRealPerson?[requiredFiled(),{max:255,message:messages(ebillMessages.max255Characters)}]:[]}},{type:"input",name:"beneficiaryRegisterNumber",label:messages(ebillMessages.beneficiaryRegistrationNumber),layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isLegalPerson=personType==="LEGAL"||personType==="FOREIGN_LEGAL";if(isBankCustomer||!isLegalPerson){setFieldsValue({beneficiaryRegisterNumber:""})}return!isLegalPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isLegalPerson?[requiredFiled(),{max:255,message:messages(ebillMessages.max255Characters)}]:[]}},{type:"input",name:"beneficiaryShahabCode",label:messages(ebillMessages.beneficiaryShahabCode),layout:{span:2},validation:{rules:[requiredFiled(),{pattern:/^\d{16}$/,message:messages(ebillMessages.shahabCodeMustBe16Digits)}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryShahabCode:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"business",name:"beneficiaryBirthDate",label:messages(ebillMessages.beneficiaryBirthDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"}},layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isRealPerson=personType==="REAL"||personType==="FOREIGN_REAL";if(isBankCustomer||!isRealPerson){setFieldsValue({beneficiaryBirthDate:""})}return!isRealPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isRealPerson?[requiredFiled()]:[]}},{type:"business",name:"beneficiaryRegisterDate",label:messages(ebillMessages.beneficiaryRegistrationDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"}},layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isLegalPerson=personType==="LEGAL"||personType==="FOREIGN_LEGAL";if(isBankCustomer||!isLegalPerson){setFieldsValue({beneficiaryRegisterDate:""})}return!isLegalPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isLegalPerson?[requiredFiled()]:[]}},{type:"select",name:"beneficiaryBirthCity",label:messages(ebillMessages.birthCity),data:{static:fetchedCity||[]},loading:isLoadingCity,options:{searchable:true},layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isRealPerson=personType==="REAL"||personType==="FOREIGN_REAL";if(isBankCustomer||!isRealPerson){setFieldsValue({beneficiaryBirthCity:""})}return!isRealPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isRealPerson?[requiredFiled()]:[]}},{type:"select",name:"beneficiaryRegisterCity",label:messages(ebillMessages.registrationCity),data:{static:fetchedCity||[]},loading:isLoadingCity,options:{searchable:true},layout:{span:2},dependencies:["noneBeneficiaryType","centralBankCode"],disabled:({values}:{values:BillOfExchangeForm})=>{const personType=values?.noneBeneficiaryType;const isLegalPerson=personType==="LEGAL"||personType==="FOREIGN_LEGAL";if(isBankCustomer||!isLegalPerson){setFieldsValue({beneficiaryRegisterCity:""})}return!isLegalPerson||!!values?.centralBankCode||isBankCustomer},validation:{rules:isLegalPerson?[requiredFiled()]:[]}},{type:"input",name:"beneficiaryPhoneNumber",label:messages(ebillMessages.beneficiaryContactNumber),layout:{span:2},validation:{rules:[requiredFiled(),{validator:(_:unknown,value:string)=>value?.startsWith("0")?Promise.reject(messages(ebillMessages.contactNumberCannotStartWithZero)):Promise.resolve()}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryPhoneNumber:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"input",name:"beneficiaryPostalCode",label:messages(generalMessages.postalCode),layout:{span:2},validation:{rules:[requiredFiled(),{pattern:/^\d{10}$/,message:messages(ebillMessages.postalCodeMustBe10Digits)}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryPostalCode:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"business",name:"beneficiaryIbanNumber",label:messages(ebillMessages.beneficiaryIbanNumber),element:FormGenerator.IBANField,options:{extraProps:{addIR:true}},layout:{span:2},validation:{rules:[requiredFiled()]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryIbanNumber:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"input",name:"beneficiarySanaCode",label:messages(ebillMessages.beneficiarySanaCode),layout:{span:2},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiarySanaCode:""})}return!!values?.centralBankCode||isBankCustomer}},{type:"textarea",name:"beneficiaryAddress",label:messages(generalMessages.address),options:{maxLength:200},layout:{span:4},validation:{rules:[requiredFiled(),{max:200,message:messages(ebillMessages.max200Characters)}]},disabled:({values}:{values:BillOfExchangeForm})=>{if(isBankCustomer){setFieldsValue({beneficiaryAddress:""})}return!!values?.centralBankCode||isBankCustomer}}];return(<ControlledForm fields={[{type:"business",label:isBankCustomer?messages(ebillMessages.bankCustomerBeneficiary):messages(ebillMessages.nonCustomerBeneficiary),name:isBankCustomer?"__bank_customer_beneficiary":"__non_customer_beneficiary",layout:{span:4},element:FormGenerator.CollapseField,disabled:false,options:{extraProps:{defaultOpen:true,fields:isBankCustomer?bankCustomerFields:nonBankCustomerFields}}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.nextStep)}resetLabel={messages(ebillMessages.previousStep)}onReset={handleCancel}reset initialValues={formValueState}/>)};export default BeneficiaryFourthStep;
import{useControlledForm}from"@brdp/ui/form";import{BillOfExchangeForm}from"../add-barat-file";import FormGenerator from"@brdp/ui/form";import{getFormatMessage,requiredFiled}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";type IProps={next:()=>void;prev:()=>void;updateFormState:(updates:Partial<BillOfExchangeForm>)=>void;formValueState:BillOfExchangeForm};const BillSpecificationsSecondStep=({next,prev,updateFormState,formValueState}:IProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<BillOfExchangeForm>({id:"step2-add-barat-file"});const handleSubmit=async(formValue:BillOfExchangeForm)=>{updateFormState(formValue);next()};const handleCancel=()=>{prev()};return(<ControlledForm fields={[{type:"business",label:messages(ebillMessages.billDetails),name:"__bill_details",layout:{span:4},element:FormGenerator.CollapseField,disabled:false,options:{extraProps:{defaultOpen:true,fields:[{type:"input",name:"centralBankCode",label:messages(ebillMessages.centralBankCode),layout:{span:2},disabled:true},{type:"input",name:"taxStampNumber",label:messages(ebillMessages.taxStampId),layout:{span:2},disabled:true},{type:"business",name:"requestDate",label:messages(ebillMessages.requestDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"}},layout:{span:2},disabled:true},{type:"business",name:"startDate",label:messages(ebillMessages.billStartDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{maxDate:"expireDate"}},validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"business",name:"expireDate",label:messages(ebillMessages.billExpiryDate),element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{minDate:"startDate"}},validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"checkbox",name:"transferable",label:messages(ebillMessages.transferable),layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.billRecipientDetails),name:"__bill_recipient",layout:{span:4},element:FormGenerator.CollapseField,disabled:false,options:{extraProps:{defaultOpen:true,fields:[{type:"input",name:"billTakerName",label:messages(ebillMessages.billRecipient),options:{placeholder:messages(ebillMessages.currentBankName)},disabled:true,layout:{span:2}},{type:"input",name:"advisorName",label:messages(ebillMessages.advisor),disabled:true,layout:{span:2}},{type:"input",name:"advisorCode",label:messages(ebillMessages.advisorCode),disabled:true,layout:{span:2}},{type:"input",name:"advisorSwiftCode",label:messages(ebillMessages.swiftCode),disabled:true,layout:{span:2}},{type:"input",name:"advisorIdentifier",label:messages(ebillMessages.bankIdentifier),validation:{rules:[requiredFiled(),{pattern:/^\d{10,11}$/,message:messages(ebillMessages.bankIdentifierMustBe10Or11Digits)}]},layout:{span:2}},{type:"input",name:"advisorBranchCode",label:messages(ebillMessages.advisorBranchCode),disabled:true,layout:{span:2}},{type:"textarea",name:"billPayPlace",label:messages(ebillMessages.billPaymentPlace),options:{maxLength:200,placeholder:messages(ebillMessages.minMaxCharacterRange,{min:5,max:200})},validation:{rules:[requiredFiled(),{min:5,message:messages(ebillMessages.min5MaxCharacters)},{max:200,message:messages(ebillMessages.max200Characters)}]},layout:{span:2}},{type:"input",name:"billTakerSanaCode",label:messages(ebillMessages.billRecipientSanaCode),options:{placeholder:messages(ebillMessages.enterSanaCode)},layout:{span:2}}]}}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.nextStep)}resetLabel={messages(ebillMessages.previousStep)}onReset={handleCancel}reset initialValues={formValueState}/>)};export default BillSpecificationsSecondStep;
import{useControlledForm}from"@brdp/ui/form";import{BillOfExchangeForm}from"../add-barat-file";import FormGenerator from"@brdp/ui/form";import{showToast,usePost}from"@brdp/engine";import{Services}from"@/services/url";import{generalMessages,getFormatMessage,removeEmptyValues,requiredFiled}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";import{hideAppModal}from"@/utils/hooks/useAppModal";import CustomerSearch from"@/components/business-components/customerSearch/customer-search";import{ErrorAlert}from"@brdp/ui";type IProps={prev:()=>void;updateFormState:(updates:Partial<BillOfExchangeForm>)=>void;formValueState:BillOfExchangeForm;mutate:()=>void};const GuarantorFifthStep=({updateFormState,formValueState,prev,mutate}:IProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<BillOfExchangeForm>({id:"guarantors-form"});const{error:createError,isError:createIsError,mutate:createMutate,isLoading:createIsLoading}=usePost(Services.EbillFilesManagement.CREATE,{raw:true});const handleBillOfExchangeSubmit=async(formData:BillOfExchangeForm)=>{const normalizedGuarantors=(formData.guarantors||[]).map((guarantor)=>({guaranteePercent:Number(guarantor.guaranteePercent),customerNumber:guarantor.customerNumber,sanaCode:guarantor.sanaCode||""}));const payload={...formValueState,...formData,guarantors:normalizedGuarantors,billTotalWorth:parseInt(formValueState.billTotalWorth),isBankCustomer:formValueState.isBankCustomer==="BANK_CUSTOMER"};updateFormState(formData);const sanitizedPayload=removeEmptyValues(payload);const response=await createMutate(sanitizedPayload);if(response.isSuccess){showToast({title:messages(generalMessages.successful),description:response?.message||messages(generalMessages.hasSuccessResponse)},"success");mutate();hideAppModal("add-barat-file")}};const guarantorFields=[{name:"customerNumber",label:messages(ebillMessages.searchGuarantorCustomer),type:"business",element:CustomerSearch,layout:{span:4},extra:messages(generalMessages.customerName),validation:{rules:[requiredFiled(),{validator:(_:unknown,value:string)=>value===formValueState.customerNumber?Promise.reject(messages(ebillMessages.drawerCannotBeGuarantor)):Promise.resolve()}]}},{name:"guaranteePercent",label:messages(ebillMessages.guaranteePercent),type:"input",layout:{span:4},options:{placeholder:"1-100",suffix:"%"},validation:{rules:[requiredFiled(),{pattern:/^(?:[1-9][0-9]?|100)$/,message:messages(ebillMessages.guaranteePercentBetween1To100)}]}},{name:"sanaCode",label:messages(ebillMessages.guarantorSanaCode),type:"input",layout:{span:4}}];return(<>{createIsError&&<ErrorAlert errorMessage={createError.message}/>}<ControlledForm fields={[{type:"business",name:"guarantors",label:messages(ebillMessages.guarantorsList),element:FormGenerator.DynamicListField,options:{extraProps:{addButtonLabel:messages(ebillMessages.addNewGuarantor),formTitle:messages(ebillMessages.addNewGuarantor),fields:guarantorFields}},layout:{span:4}}]}initialValues={{guarantors:formValueState?.guarantors||[]}}onSubmit={handleBillOfExchangeSubmit}isSubmitting={createIsLoading}reset onReset={prev}resetLabel={messages(ebillMessages.previousStep)}submitLabel={messages(ebillMessages.createBill)}/></>)};export default GuarantorFifthStep;
import{useControlledForm}from"@brdp/ui/form";import{BillOfExchangeForm}from"../add-barat-file";import{useGetBillType}from"@/pages/base-info/commission-rate/hooks/use-get-bill-type";import{generalMessages,getFormatMessage,requiredFiled}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";import{hideAppModal}from"@/utils/hooks/useAppModal";import CustomerSearch from"@/components/business-components/customerSearch/customer-search";type IProps={next:()=>void;updateFormState:(updates:Partial<BillOfExchangeForm>)=>void;formValueState:BillOfExchangeForm};const InitialInfoFirstStep=({updateFormState,next,formValueState}:IProps)=>{const messages=getFormatMessage();const{billTypeLoading,uniqueBillTypes}=useGetBillType();const{ControlledForm}=useControlledForm<BillOfExchangeForm>({id:"step1-add-barat-file"});const handleSubmit=async(formValue:BillOfExchangeForm)=>{updateFormState(formValue);next()};const handleCancel=()=>{hideAppModal("add-barat-file")};return(<ControlledForm fields={[{type:"select",name:"billTypeCode",label:messages(ebillMessages.ebillTypeCodeName),data:{static:uniqueBillTypes||[]},loading:billTypeLoading,options:{searchable:true},validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"input",name:"depositNumber",label:messages(ebillMessages.billDrawerDeposit),validation:{rules:[requiredFiled(),{pattern:/^[\d.]+$/,message:messages(ebillMessages.depositNumberMustBeNumeric)}]},layout:{span:2}},{type:"input",name:"__depositTitle",label:messages(ebillMessages.depositTitle),disabled:true,layout:{span:2}},{type:"input",name:"ibanNumber",label:messages(generalMessages.shebaCode),disabled:true,layout:{span:2}},{type:"business",name:"customerNumber",label:messages(generalMessages.customerNumber),element:CustomerSearch,validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"input",name:"__customerName",label:messages(generalMessages.customerName),disabled:true,layout:{span:2}},{type:"textarea",name:"billApplicantPlace",label:messages(ebillMessages.billDrawerResidence),options:{maxLength:200,placeholder:messages(ebillMessages.minMaxCharacterRange,{min:5,max:200})},validation:{rules:[requiredFiled(),{min:5,message:messages(ebillMessages.min5MaxCharacters)},{max:200,message:messages(ebillMessages.max200Characters)}]},layout:{span:2}},{type:"input",name:"billApplicantSanaCode",label:messages(ebillMessages.billDrawerSanaCode),layout:{span:2}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.nextStep)}resetLabel={messages(generalMessages.cancel)}reset onReset={handleCancel}initialValues={formValueState}/>)};export default InitialInfoFirstStep;
import{useControlledForm}from"@brdp/ui/form";import{BillOfExchangeForm}from"../add-barat-file";import FormGenerator from"@brdp/ui/form";import{useGetEconomicalSection}from"../hooks/use-get-economical-section";import{ISelectOption,useGetSubEconomicalSection}from"../hooks/use-get-subeconomical-section";import{useEffect,useState,useRef}from"react";import{getFormatMessage,requiredFiled}from"@brdp/utils";import{ebillMessages}from"@/locale/ebill-messages";import{useGet}from"@brdp/engine";import{Services}from"@/services/url";type IProps={next:()=>void;prev:()=>void;updateFormState:(updates:Partial<BillOfExchangeForm>)=>void;formValueState:BillOfExchangeForm};type OptionData={name:string;code:string};const SamatThirdStep=({next,prev,updateFormState,formValueState}:IProps)=>{const messages=getFormatMessage();const[subEconomicalOptions,setSubEconomicalOptions]=useState<ISelectOption[]>([]);const isInitialMount=useRef(true);const previousEconomicalSection=useRef<string|undefined>(undefined);const{ControlledForm,fieldWatch,setFieldsValue}=useControlledForm<BillOfExchangeForm>({id:"step3-add-barat-file"});const{getEconomicalSection,getEconomicalSectionLoading}=useGetEconomicalSection();const{handleSubmitSub,getSubEconomicalSectionLoading}=useGetSubEconomicalSection();const economicalSectionValue=fieldWatch("economicalSection");useEffect(()=>{if(!economicalSectionValue)return;const hasEconomicalSectionChanged=previousEconomicalSection.current!==economicalSectionValue;if(isInitialMount.current&&formValueState.subEconomicalSection){isInitialMount.current=false;previousEconomicalSection.current=economicalSectionValue;const fetchSubSections=async()=>{try{const result=await handleSubmitSub({economicalSectionValue});setSubEconomicalOptions(result||[])}catch(error){console.error(error)}};fetchSubSections();return}if(hasEconomicalSectionChanged){previousEconomicalSection.current=economicalSectionValue;setSubEconomicalOptions([]);setFieldsValue({subEconomicalSection:""});const fetchSubSections=async()=>{try{const result=await handleSubmitSub({economicalSectionValue});setSubEconomicalOptions(result||[])}catch(error){console.error(error)}};fetchSubSections()}isInitialMount.current=false},[economicalSectionValue,formValueState.subEconomicalSection,handleSubmitSub,setFieldsValue]);const{isLoading:customerTypeLoading,data:customerTypeData}=useGet<OptionData[]>(["customer-type"],Services.EbillServices.GET_BENEFICIARY_TYPES());const handleSubmit=async(formValue:BillOfExchangeForm)=>{updateFormState(formValue);next()};const handleCancel=()=>{prev()};const toOptions=(data:OptionData[]=[])=>{return data.map((item)=>({label:item.name,value:item.code}))};return(<ControlledForm fields={[{type:"business",label:messages(ebillMessages.samatInfo),name:"__semat_info",layout:{span:4},element:FormGenerator.CollapseField,disabled:false,options:{extraProps:{defaultOpen:true,fields:[{type:"select",name:"economicalSection",data:{static:getEconomicalSection},loading:getEconomicalSectionLoading,disabled:getEconomicalSectionLoading,label:messages(ebillMessages.economicalSection),options:{searchable:true},validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"select",name:"subEconomicalSection",label:messages(ebillMessages.subEconomicalSection),data:{static:subEconomicalOptions},loading:getSubEconomicalSectionLoading,disabled:getSubEconomicalSectionLoading||!economicalSectionValue,options:{searchable:true},validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"input",name:"inquiryNumber",label:messages(ebillMessages.taxInquiry),options:{placeholder:messages(ebillMessages.numericValue)},validation:{rules:[{pattern:/^\d*$/,message:messages(ebillMessages.mustBeNumeric)}]},layout:{span:2}},{type:"business",name:"billTotalWorth",label:messages(ebillMessages.billTotalValue),element:FormGenerator.AmountField,validation:{rules:[requiredFiled(),{pattern:/^[1-9]\d*$/,message:messages(ebillMessages.mustBePositiveInteger)}]},layout:{span:2}},{type:"input",name:"intermediaryDeposit",label:messages(ebillMessages.intermediaryDeposit),options:{placeholder:messages(ebillMessages.searchInDeposits)},layout:{span:2}},{type:"textarea",name:"comment",label:messages(ebillMessages.issuanceDescription),options:{maxLength:200},validation:{rules:[requiredFiled()]},layout:{span:4}},{type:"textarea",name:"taxComment",label:messages(ebillMessages.stampTaxPaymentDescription),options:{maxLength:165,placeholder:messages(ebillMessages.max165Characters)},validation:{rules:[requiredFiled(),{pattern:/^[^\\#><&;:"}{[\]]*$/,message:messages(ebillMessages.invalidCharactersNotAllowed)},{max:165,message:messages(ebillMessages.max165Characters)}]},layout:{span:4}},{type:"radio-button",name:"isBankCustomer",label:messages(ebillMessages.beneficiaryType),data:{static:toOptions(customerTypeData?.resultData||[{code:"",name:""}])},loading:customerTypeLoading,validation:{rules:[requiredFiled()]},layout:{span:4}}]}}}]}onSubmit={handleSubmit}submitLabel={messages(ebillMessages.nextStep)}resetLabel={messages(ebillMessages.previousStep)}onReset={handleCancel}reset initialValues={formValueState}/>)};export default SamatThirdStep;
import{useMemo,useCallback}from"react";import{useGet}from"@brdp/engine";import{Services}from"@/services/url";export type IEconomical={code:string;name:string};export const useGetEconomicalSection=()=>{const url=Services.ExternalServices.GET_ECONOMICAL_SECTION();const{data:getEconomicalSectionResponse,isLoading:getEconomicalSectionLoading,isFetching:getEconomicalSectionFetching,error:getEconomicalSectionError,isError:isGetEconomicalSectionError}=useGet<IEconomical[]|undefined>(["get-economical-section"],url);const mapEconomicalSection=useCallback((items?:IEconomical[])=>{const uniqueMap=new Map<string,IEconomical>();items?.forEach((item)=>uniqueMap.set(item.code,item));return Array.from(uniqueMap.values(),(i)=>({value:i.code,label:`${i.name} - ${i.code}`}))},[]);const getEconomicalSection=useMemo(()=>mapEconomicalSection(getEconomicalSectionResponse?.resultData),[getEconomicalSectionResponse?.resultData,mapEconomicalSection]);return{getEconomicalSection,getEconomicalSectionLoading,getEconomicalSectionFetching,getEconomicalSectionError,isGetEconomicalSectionError}};
import{useGet}from"@brdp/engine";import{Services}from"@/services/url";import{useState,useCallback}from"react";export type ISubEconomical={code:string;name:string};export type ISubEconomicalSectionCode={economicalSectionValue:string};export type ISelectOption={value:string;label:string};export const useGetSubEconomicalSection=()=>{const[params,setParams]=useState<string|undefined>();const url=params?Services.ExternalServices.GET_ECONOMICAL_SUB(params):"";const{isLoading:getSubEconomicalSectionLoading,error:getSubEconomicalSectionError,isError:isGetSubEconomicalSectionError,data:getSubEconomicalSectionData,mutate}=useGet<ISubEconomical[]|undefined>(["search-commission-rate",params],url);const mapSubEconomicalSection=useCallback((items?:ISubEconomical[]):ISelectOption[]=>{if(!items)return[];const uniqueMap=new Map<string,ISubEconomical>();items.forEach((item)=>uniqueMap.set(item.code,item));return Array.from(uniqueMap.values(),(i)=>({value:i.code,label:`${i.name} - ${i.code}`))},[]);const handleSubmitSub=async(formValue?:ISubEconomicalSectionCode):Promise<ISelectOption[]|undefined>=>{try{setParams(formValue?.economicalSectionValue||"");if(!formValue)return undefined;const response=await mutate();const result=await response?.promise;if(!result?.resultData)throw new Error("No data returned");return mapSubEconomicalSection(result.resultData)}catch(error){console.error("Fetch error:",error);throw new Error(error instanceof Error?error.message:"Failed to fetch data")}};return{handleSubmitSub,getSubEconomicalSectionLoading,getSubEconomicalSectionError,isGetSubEconomicalSectionError,getSubEconomicalSectionData,mapSubEconomicalSection}};
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,useGet,usePost}from"@brdp/engine";import{ErrorAlert,Spin,Typography}from"@brdp/ui";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage}from"@brdp/utils";type BankIssuanceFormType={billNumber:string};type BankIssuanceProps={customerNumber:string;billNumber:string;getEbillFiles:()=>void};type BankIssuanceResponseType=null;const BankIssuance=({customerNumber,billNumber,getEbillFiles}:BankIssuanceProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<BankIssuanceFormType>({id:"bankIssuanceForm"});const{data:canAddItemData,isFetching:canAddItemIsFetching,error:canAddItemError}=useGet<null>(["canAddItem",billNumber],Services.Sanction.GET_CAN_ADD_ITEM(billNumber),{raw:true});const{mutate:bankIssuanceMutate,isLoading:bankIssuanceIsLoading,error:bankIssuanceError,data:bankIssuanceData}=usePost<BankIssuanceResponseType,BankIssuanceFormType>(Services.EbillFilesManagement.POST_BANK_ISSUANCE,{raw:true});const handleSubmit=()=>{bankIssuanceMutate({billNumber}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.hasSuccessResponse)},"success","bankIssuance");getEbillFiles();hideAppModal("bankIssuanceModal")}})};if(canAddItemIsFetching){return<Spin caption={messages(generalMessages.isFetchingData)}/>}if(canAddItemData?.isSuccess){return(<>{bankIssuanceError&&(<ErrorAlert errorMessage={bankIssuanceError?.message||messages(generalMessages.errorBadHappened)}/>)}{bankIssuanceData?.isSuccess===false&&(<ErrorAlert errorMessage={bankIssuanceData?.message||messages(generalMessages.errorBadHappened)}/>)}<Typography text={messages(ebillMessages.bankIssuanceConfirm,{customerNumber,billNumber})}/><ControlledForm onSubmit={handleSubmit}isSubmitting={bankIssuanceIsLoading}submitLabel={messages(generalMessages.confirm)}reset resetLabel={messages(generalMessages.cancel)}onReset={()=>{hideAppModal("bankIssuanceModal")}}fields={[]}/></>)}return(<>{canAddItemError&&(<ErrorAlert errorMessage={canAddItemError?.message||messages(generalMessages.errorBadHappened)}/>)}{canAddItemData?.isSuccess===false&&(<ErrorAlert errorMessage={canAddItemData?.message||messages(generalMessages.errorBadHappened)}/>)}</>)};export default BankIssuance;
import{ebillMessages}from"@/locale/ebill-messages";import{Tabs}from"@brdp/ui";import FormGenerator,{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage}from"@brdp/utils";import CentralBankServices from"./components/central-bank-services/central-bank-services";type CentralBankManagementProps={billNumber:string;centralBankCode:string;startDate:string;endDate:string;amount:number;billTypeCode:string;billTypeName:string;duration:number;customerNumber:string;getEbillFiles:()=>void};type CentralBankManagementFormType={billNumber:string;centralBankCode:string;startDate:string;endDate:string;amount:number;duration:string;billType:string;customerNumber:string};const CentralBankManagement=({billNumber,centralBankCode,startDate,endDate,amount,billTypeCode,billTypeName,duration,customerNumber,getEbillFiles}:CentralBankManagementProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<CentralBankManagementFormType>({id:"ebillFileDetailForm"});return(<><ControlledForm reset={false}initialValues={{billNumber,centralBankCode:centralBankCode??"-",startDate,endDate,amount,duration:duration+" "+messages(generalMessages.day),customerNumber,billType:billTypeName+" - "+billTypeCode}}fields={[{type:"business",label:messages(ebillMessages.ebillFileInfo),name:"__ebillFileDetailsCollapse",layout:{span:4},readOnly:true,element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"billNumber",label:messages(ebillMessages.ebillFileNumber),type:"input",layout:{span:2}},{name:"billType",label:messages(ebillMessages.billType),type:"input",layout:{span:2}},{name:"startDate",label:messages(ebillMessages.fileCreationDate),type:"input",layout:{span:2}},{name:"endDate",label:messages(ebillMessages.fileExpirationDate),type:"input",layout:{span:2}},{name:"amount",label:messages(ebillMessages.ebillAmount),type:"business",element:FormGenerator.AmountField,layout:{span:2}},{name:"customerNumber",label:messages(generalMessages.customerNumber),type:"input",layout:{span:2}},{name:"duration",label:messages(ebillMessages.billDuration),type:"input",layout:{span:2}},{name:"centralBankCode",label:messages(ebillMessages.centralBankCode),type:"input",layout:{span:2}}]}}},{type:"business",label:"",name:"__centralBankCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"centralBankTabs",label:"",type:"business",layout:{span:4},element:()=>(<Tabs defaultActiveKey="1"type="card"size="middle"items={[{key:"1",label:messages(ebillMessages.centralBankServices),children:(<CentralBankServices billNumber={billNumber}getEbillFiles={getEbillFiles}/>)},{key:"2",label:messages(ebillMessages.endorsementServices),children:<></>}]}/>)}]}}}]}/></>)};export default CentralBankManagement;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{showAppModal}from"@/utils/hooks/useAppModal";import{useGet}from"@brdp/engine";import{EyeIcon,GenerativeTable,IconsList,ManagementIcon,useTablePagination}from"@brdp/ui";import{generalMessages,getFormatMessage,ISOToJalaaliDateTime}from"@brdp/utils";import RequestCentralBankCode from"./modals/request-central-bank-code";import ViewRequestDetails from"./modals/view-request-details";type CentralBankServicesProps={billNumber:string;getEbillFiles:()=>void};type ItemType={createDate:string;createDateTime:string;creatorBranch:string;refId:string;type:string;user:string};type CentralBankServicesResponseType={pageNumber:number;pageSize:number;totalCount:number;items:ItemType[]};const CentralBankServices=({billNumber,getEbillFiles}:CentralBankServicesProps)=>{const messages=getFormatMessage();const{tableConfig,tableFromIndex,PAGE_SIZE,currentPage}=useTablePagination();const{data,isFetching,mutate}=useGet<CentralBankServicesResponseType>(["central-bank-search"],Services.Spm.SEARCH({pageSize:PAGE_SIZE,pageNumber:currentPage,billNumber:billNumber}),{hasPagination:true});return(<><GenerativeTable<ItemType>rowKey="refId"fromIndex={tableFromIndex}data={data?.resultData?.items||[]}pagination={tableConfig(data?.resultData?.totalCount||0)}title={`${messages(generalMessages.tableRowsCount)}:${data?.resultData?.totalCount||0}`}loading={isFetching}columns={[{key:"type",dataIndex:"type",title:messages(ebillMessages.requestType),align:"center"},{key:"creatorBranch",dataIndex:"creatorBranch",title:messages(ebillMessages.creatorBranch),align:"center"},{key:"createDateTime",dataIndex:"createDateTime",title:messages(ebillMessages.createDateTime),render:(col)=>ISOToJalaaliDateTime(col),align:"center"},{key:"user",dataIndex:"user",title:messages(generalMessages.user),align:"center"},{key:"refId",dataIndex:"refId",title:messages(ebillMessages.refId),align:"center"}]}rowActions={[{id:"1",appearance:{icon:<IconsList.EyeIcon/>,tooltip:messages(generalMessages.actionView)},action:(values)=>{showAppModal({id:"viewRequestDetailsModal",icon:<EyeIcon/>,title:messages(ebillMessages.viewRequestDetails),element:(<ViewRequestDetails billNumber={billNumber}refId={values.refId}/>),options:{closable:true}})}}]}tableHeaderActions={[{id:"centralBankTableHeaderActions",mode:"expanded",actions:[{id:"requestCentralBankCode",action:()=>{showAppModal({id:"requestCentralBankCodeModal",title:messages(ebillMessages.requestCentralBankCode),icon:<IconsList.ManagementIcon/>,element:(<RequestCentralBankCode billNumber={billNumber}mutate={mutate}getEbillFiles={getEbillFiles}/>),options:{closable:true}})},appearance:{tooltip:messages(ebillMessages.requestCentralBankCode),icon:<ManagementIcon/>}}]}]}/></>)};export default CentralBankServices;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,useGet,usePost}from"@brdp/engine";import{ErrorAlert,Spin}from"@brdp/ui";import FormGenerator,{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage}from"@brdp/utils";type RequestCentralBankCodeProps={billNumber:string;mutate:()=>void;getEbillFiles:()=>void};type CentralBankCodeFormType={swiftCode:string;refId:string;billNumber:string;amount:number;billDueDate:string;shahabCode:string;customerType:string;applicantName:string;nationalCode:string;certificateNumber:string;customerGenderType:string;birthCityCode:string;birthDate:string;registrationCityCode:string;registrationDate:string;phoneNumber:string;postalCode:string;beneficiaryShahabCode:string;beneficiaryNationalCode:string;beneficiaryCustomerType:string;beneficiaryCertificateNumber:string;beneficiaryBirthDate:string;beneficiaryRegisterDate:string;beneficiaryBirthCityCode:string;beneficiaryRegistrationCityCode:string;beneficiaryPhoneNumber:string;beneficiaryPostalCode:string;beneficiaryGenderType:string;beneficiaryShebaNumber:string;beneficiaryName:string};const RequestCentralBankCode=({billNumber,mutate,getEbillFiles}:RequestCentralBankCodeProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<CentralBankCodeFormType>({id:"requestCentralBankCodeForm"});const{data:preActionData,isFetching:preActionIsFetching,error:preActionError}=useGet<null>(["unique-number-pre-action",billNumber],Services.Spm.UNIQUE_NUMBER_PRE_ACTION(billNumber),{raw:true});const{data:uniqueNumberData,isFetching:loadDataIsFetching,error:loadDataError}=useGet<CentralBankCodeFormType>(["unique-number-data",billNumber],Services.Spm.UNIQUE_NUMBER_DATA(billNumber),{raw:true,enable:!!preActionData?.isSuccess});const{data:uniqueNumberRequestData,mutate:uniqueNumberRequestMutate,isLoading:uniqueNumberRequestIsLoading,error:uniqueNumberRequestError}=usePost<null,CentralBankCodeFormType>(Services.Spm.UNIQUE_NUMBER_REQUEST(),{raw:true});const handleSubmit=async(values:CentralBankCodeFormType)=>{uniqueNumberRequestMutate({...values}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.submitSuccess)},"success","requestCentralBankCode");mutate();getEbillFiles();hideAppModal("requestCentralBankCodeModal")}})};if(preActionIsFetching||loadDataIsFetching){return<Spin caption={messages(generalMessages.isFetchingData)}/>}if(uniqueNumberData?.isSuccess&&uniqueNumberData?.resultData){return(<>{uniqueNumberRequestError&&(<ErrorAlert errorMessage={uniqueNumberRequestError?.message||messages(generalMessages.errorBadHappened)}/>)}{uniqueNumberRequestData?.isSuccess===false&&(<ErrorAlert errorMessage={uniqueNumberRequestData?.message||messages(generalMessages.errorBadHappened)}/>)}<ControlledForm readOnly={true}initialValues={uniqueNumberData.resultData}submitLabel={messages(generalMessages.confirm)}resetLabel={messages(generalMessages.cancel)}reset onSubmit={(values)=>handleSubmit(values)}onReset={()=>hideAppModal("requestCentralBankCodeModal")}isSubmitting={uniqueNumberRequestIsLoading}fields={[{type:"business",label:messages(ebillMessages.ebillDetails),name:"__ebillDetailsCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"swiftCode",label:messages(ebillMessages.sender),type:"input",layout:{span:2}},{name:"refId",label:messages(ebillMessages.refId),type:"input",layout:{span:2}},{name:"billNumber",label:messages(ebillMessages.ebillSystemNumber),type:"input",layout:{span:2}},{name:"amount",label:messages(ebillMessages.billAmount),type:"business",layout:{span:2},element:FormGenerator.AmountField},{name:"billDueDate",label:messages(ebillMessages.billExpiryDate),type:"input",layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.billDrawerDetails),name:"__billDrawerDetailsCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"shahabCode",label:messages(generalMessages.shahabCode),type:"input",layout:{span:2}},{name:"customerType",label:messages(ebillMessages.personType),type:"input",layout:{span:2}},{name:"applicantName",label:messages(ebillMessages.applicantName),type:"input",layout:{span:2}},{name:"nationalCode",label:messages(ebillMessages.nationalId),type:"input",layout:{span:2}},{name:"certificateNumber",label:messages(ebillMessages.certificateNumber),type:"input",layout:{span:2}},{name:"customerGenderType",label:messages(generalMessages.genderType),type:"input",layout:{span:2}},{name:"birthCityCode",label:messages(ebillMessages.birthCityCode),type:"input",layout:{span:2}},{name:"birthDate",label:messages(ebillMessages.birthDate),type:"input",layout:{span:2}},{name:"phoneNumber",label:messages(generalMessages.contactNumber),type:"input",layout:{span:2}},{name:"registrationCityCode",label:messages(ebillMessages.registrationCityCode),type:"input",layout:{span:2}},{name:"registrationDate",label:messages(ebillMessages.registrationDate),type:"input",layout:{span:2}},{name:"postalCode",label:messages(generalMessages.postalCode),type:"input",layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.billBeneficiaryDetails),name:"__billBeneficiaryDetailsCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"beneficiaryShahabCode",label:messages(generalMessages.shahabCode),type:"input",layout:{span:2}},{name:"beneficiaryCustomerType",label:messages(ebillMessages.customerType),type:"input",layout:{span:2}},{name:"beneficiaryName",label:messages(ebillMessages.applicantName),type:"input",layout:{span:2}},{name:"beneficiaryNationalCode",label:messages(ebillMessages.nationalId),type:"input",layout:{span:2}},{name:"beneficiaryCertificateNumber",label:messages(ebillMessages.certificateNumber),type:"input",layout:{span:2}},{name:"beneficiaryGenderType",label:messages(generalMessages.genderType),type:"input",layout:{span:2}},{name:"beneficiaryBirthCityCode",label:messages(ebillMessages.birthCityCode),type:"input",layout:{span:2}},{name:"beneficiaryBirthDate",label:messages(ebillMessages.birthDate),type:"input",layout:{span:2}},{name:"beneficiaryPhoneNumber",label:messages(generalMessages.phoneNumber),type:"input",layout:{span:2}},{name:"beneficiaryRegistrationCityCode",label:messages(ebillMessages.registrationCityCode),type:"input",layout:{span:2}},{name:"beneficiaryRegisterDate",label:messages(ebillMessages.registrationDate),type:"input",layout:{span:2}},{name:"beneficiaryPostalCode",label:messages(generalMessages.postalCode),type:"input",layout:{span:2}},{name:"beneficiaryShebaNumber",label:messages(generalMessages.shebaCode),type:"input",layout:{span:2}}]}}}]}/></>)}return(<ErrorAlert errorMessage={(preActionData?.isSuccess===false&&preActionData?.message)||(preActionError&&preActionError?.message)||(uniqueNumberData?.isSuccess===false&&uniqueNumberData?.message)||(loadDataError&&loadDataError?.message)||messages(generalMessages.errorBadHappened)}/>)};export default RequestCentralBankCode;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{useGet}from"@brdp/engine";import{ErrorAlert,Spin}from"@brdp/ui";import FormGenerator,{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,ISOToJalaaliDate}from"@brdp/utils";export type ViewRequestDetailsProps={billNumber:string;refId:string};type RequestDetailsFormType={swiftCode:string;refId:string;billNumber:string;amount:number;billDueDateTime:string;shahabCode:string;customerType:string;applicantName:string;nationalCode:string;certificateNumber:string;customerGenderType:string;birthCityCode:string;birthDateTime:string;registrationCityCode:string;registrationDateTime:string;phoneNumber:string;postalCode:string;beneficiaryShahabCode:string;beneficiaryNationalCode:string;beneficiaryCustomerType:string;beneficiaryCertificateNumber:string;beneficiaryBirthDateTime:string;beneficiaryRegisterDateTime:string;beneficiaryBirthCityCode:string;beneficiaryRegistrationCityCode:string;beneficiaryPhoneNumber:string;beneficiaryPostalCode:string;beneficiaryGenderType:string;beneficiaryShebaNumber:string;beneficiaryName:string};const ViewRequestDetails=({billNumber,refId}:ViewRequestDetailsProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<RequestDetailsFormType>({id:"requestDetailsForm"});const{data,isFetching,error}=useGet<RequestDetailsFormType>(["request-details",billNumber,refId],Services.Spm.VIEW({billNumber,refId}),{raw:true});if(isFetching){return<Spin caption={messages(generalMessages.isFetchingData)}/>}if(data?.isSuccess&&data?.resultData){return(<ControlledForm readOnly={true}initialValues={{...data.resultData,billDueDateTime:ISOToJalaaliDate(data.resultData.billDueDateTime),birthDateTime:ISOToJalaaliDate(data.resultData.birthDateTime),registrationDateTime:ISOToJalaaliDate(data.resultData.registrationDateTime),beneficiaryBirthDateTime:ISOToJalaaliDate(data.resultData.beneficiaryBirthDateTime),beneficiaryRegisterDateTime:ISOToJalaaliDate(data.resultData.beneficiaryRegisterDateTime)}}fields={[{type:"business",label:messages(ebillMessages.ebillDetails),name:"__ebillDetailsCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"swiftCode",label:messages(ebillMessages.sender),type:"input",layout:{span:2}},{name:"refId",label:messages(ebillMessages.refId),type:"input",layout:{span:2}},{name:"billNumber",label:messages(ebillMessages.ebillSystemNumber),type:"input",layout:{span:2}},{name:"amount",label:messages(ebillMessages.billAmount),type:"business",layout:{span:2},element:FormGenerator.AmountField},{name:"billDueDateTime",label:messages(ebillMessages.billExpiryDate),type:"input",layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.billDrawerDetails),name:"__billDrawerDetailsCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"shahabCode",label:messages(generalMessages.shahabCode),type:"input",layout:{span:2}},{name:"customerType",label:messages(ebillMessages.personType),type:"input",layout:{span:2}},{name:"applicantName",label:messages(ebillMessages.applicantName),type:"input",layout:{span:2}},{name:"nationalCode",label:messages(ebillMessages.nationalId),type:"input",layout:{span:2}},{name:"certificateNumber",label:messages(ebillMessages.certificateNumber),type:"input",layout:{span:2}},{name:"customerGenderType",label:messages(generalMessages.genderType),type:"input",layout:{span:2}},{name:"birthCityCode",label:messages(ebillMessages.birthCityCode),type:"input",layout:{span:2}},{name:"birthDateTime",label:messages(ebillMessages.birthDate),type:"input",layout:{span:2}},{name:"phoneNumber",label:messages(generalMessages.contactNumber),type:"input",layout:{span:2}},{name:"registrationCityCode",label:messages(ebillMessages.registrationCityCode),type:"input",layout:{span:2}},{name:"registrationDateTime",label:messages(ebillMessages.registrationDate),type:"input",layout:{span:2}},{name:"postalCode",label:messages(generalMessages.postalCode),type:"input",layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.billBeneficiaryDetails),name:"__billBeneficiaryDetailsCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"beneficiaryShahabCode",label:messages(generalMessages.shahabCode),type:"input",layout:{span:2}},{name:"beneficiaryCustomerType",label:messages(ebillMessages.customerType),type:"input",layout:{span:2}},{name:"beneficiaryName",label:messages(ebillMessages.applicantName),type:"input",layout:{span:2}},{name:"beneficiaryNationalCode",label:messages(ebillMessages.nationalId),type:"input",layout:{span:2}},{name:"beneficiaryCertificateNumber",label:messages(ebillMessages.certificateNumber),type:"input",layout:{span:2}},{name:"beneficiaryGenderType",label:messages(generalMessages.genderType),type:"input",layout:{span:2}},{name:"beneficiaryBirthCityCode",label:messages(ebillMessages.birthCityCode),type:"input",layout:{span:2}},{name:"beneficiaryBirthDateTime",label:messages(ebillMessages.birthDate),type:"input",layout:{span:2}},{name:"beneficiaryPhoneNumber",label:messages(generalMessages.phoneNumber),type:"input",layout:{span:2}},{name:"beneficiaryRegistrationCityCode",label:messages(ebillMessages.registrationCityCode),type:"input",layout:{span:2}},{name:"beneficiaryRegisterDateTime",label:messages(ebillMessages.registrationDate),type:"input",layout:{span:2}},{name:"beneficiaryPostalCode",label:messages(generalMessages.postalCode),type:"input",layout:{span:2}},{name:"beneficiaryShebaNumber",label:messages(generalMessages.shebaCode),type:"input",layout:{span:2}}]}}}]}/>)}return(<ErrorAlert errorMessage={data?.message||error?.message||messages(generalMessages.errorBadHappened)}/>)};export default ViewRequestDetails;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,usePost}from"@brdp/engine";import{ErrorAlert,Typography}from"@brdp/ui";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage}from"@brdp/utils";type CustomerIssuanceBackFormType={billNumber:string};type CustomerIssuanceBackProps={customerNumber:string;billNumber:string;getEbillFiles:()=>void};type CustomerIssuanceBackResponseType=null;const CustomerIssuanceBack=({customerNumber,billNumber,getEbillFiles}:CustomerIssuanceBackProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<CustomerIssuanceBackFormType>({id:"customerIssuanceBackForm"});const{mutate,isLoading,error,data}=usePost<CustomerIssuanceBackResponseType,CustomerIssuanceBackFormType>(Services.EbillFilesManagement.POST_CUSTOMER_ISSUANCE_BACK,{raw:true});const handleSubmit=()=>{mutate({billNumber}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.hasSuccessResponse)},"success","customerIssuanceBack");getEbillFiles();hideAppModal("customerIssuanceBackModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<Typography text={messages(ebillMessages.customerIssuanceBackConfirm,{customerNumber,billNumber})}/><ControlledForm onSubmit={handleSubmit}isSubmitting={isLoading}submitLabel={messages(generalMessages.confirm)}reset resetLabel={messages(generalMessages.cancel)}onReset={()=>{hideAppModal("customerIssuanceBackModal")}}fields={[]}/></>)};export default CustomerIssuanceBack;}from"@brdp/utils";type CustomerIssuanceBackFormType={billNumber:string};type CustomerIssuanceBackProps={customerNumber:string;billNumber:string;getEbillFiles:()=>void};type CustomerIssuanceBackResponseType=null;const CustomerIssuanceBack=({customerNumber,billNumber,getEbillFiles}:CustomerIssuanceBackProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<CustomerIssuanceBackFormType>({id:"customerIssuanceBackForm"});const{mutate,isLoading,error,data}=usePost<CustomerIssuanceBackResponseType,CustomerIssuanceBackFormType>(Services.EbillFilesManagement.POST_CUSTOMER_ISSUANCE_BACK,{raw:true});const handleSubmit=()=>{mutate({billNumber}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.hasSuccessResponse)},"success","customerIssuanceBack");getEbillFiles();hideAppModal("customerIssuanceBackModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<Typography text={messages(ebillMessages.customerIssuanceBackConfirm,{customerNumber,billNumber})}/><ControlledForm onSubmit={handleSubmit}isSubmitting={isLoading}submitLabel={messages(generalMessages.confirm)}reset resetLabel={messages(generalMessages.cancel)}onReset={()=>{hideAppModal("customerIssuanceBackModal")}}fields={[]}/></>)};export default CustomerIssuanceBack;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{showAppModal}from"@/utils/hooks/useAppModal";import{useGet}from"@brdp/engine";import{DeleteIcon,DownloadIcon,GenerativeTable,PlusCircleIcon,useTablePagination}from"@brdp/ui";import{generalMessages,getFormatMessage}from"@brdp/utils";import AddProof from"./modals/add-proof";import DeleteProof from"./modals/delete-proof";import FormGenerator,{useControlledForm}from"@brdp/ui/form";import{downloadBase64File}from"@/utils/download-base64-file";type ProofManagementResponseType={comment:null|string;extension:string;file:string;fileName:string;proofTypeCode:string;proofTypeName:string};type ProofManagementProps={billNumber:string;startDate:string;endDate:string;amount:number;billTypeCode:string;billTypeName:string;duration:number;customerNumber:string};type ProofManagementFormType={billNumber:string;startDate:string;endDate:string;amount:number;duration:string;billType:string;customerNumber:string};const ProofManagement=({billNumber,startDate,endDate,amount,billTypeCode,billTypeName,duration,customerNumber}:ProofManagementProps)=>{const messages=getFormatMessage();const{tableConfig,tableFromIndex}=useTablePagination();const{ControlledForm}=useControlledForm<ProofManagementFormType>({id:"ebillFileDetailForm"});const{data,isFetching,mutate}=useGet<ProofManagementResponseType[]>(["proof-management"],Services.ExternalServices.GET_PROOF_LOAD(billNumber),{hasPagination:true});return(<><ControlledForm reset={false}initialValues={{billNumber,startDate,endDate,amount,duration:duration+" "+messages(generalMessages.day),customerNumber,billType:billTypeName+" - "+billTypeCode}}fields={[{type:"business",label:messages(ebillMessages.ebillFileInfo),name:"__ebillFileDetailsCollapse",layout:{span:4},readOnly:true,element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"billNumber",label:messages(ebillMessages.ebillFileNumber),type:"input",layout:{span:2}},{name:"billType",label:messages(ebillMessages.billType),type:"input",layout:{span:2}},{name:"startDate",label:messages(ebillMessages.fileCreationDate),type:"input",layout:{span:2}},{name:"endDate",label:messages(ebillMessages.fileExpirationDate),type:"input",layout:{span:2}},{name:"amount",label:messages(ebillMessages.ebillAmount),type:"business",element:FormGenerator.AmountField,layout:{span:2}},{name:"customerNumber",label:messages(generalMessages.customerNumber),type:"input",layout:{span:2}},{name:"duration",label:messages(ebillMessages.billDuration),type:"input",layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.proofsList),name:"__proofsListCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"proofTable",label:"",type:"business",layout:{span:4},element:()=>(<GenerativeTable<ProofManagementResponseType>rowKey="proofTypeCode"fromIndex={tableFromIndex}data={data?.resultData||[]}pagination={tableConfig(data?.resultData?.length||0)}title={`${messages(generalMessages.tableRowsCount)}:${data?.resultData?.length||0}`}loading={isFetching}columns={[{key:"fileName",dataIndex:"fileName",title:messages(generalMessages.fileName),align:"center"},{key:"proofTypeName",dataIndex:"proofTypeName",title:messages(ebillMessages.proofType),align:"center"},{key:"comment",dataIndex:"comment",title:messages(generalMessages.description),align:"center"}]}rowActions={[{id:"1",appearance:{icon:<DownloadIcon/>,tooltip:messages(ebillMessages.downloadProof)},action:(values)=>downloadBase64File({file:values.file,fileName:values.fileName,extension:values.extension})},{id:"2",appearance:{icon:<DeleteIcon/>,tooltip:messages(generalMessages.actionDelete)},action:(values)=>{showAppModal({id:"deleteProofModal",title:messages(ebillMessages.deleteProof),icon:<DeleteIcon/>,element:(<DeleteProof billNumber={billNumber}proofType={values.proofTypeName}fileName={values.fileName}mutateProof={mutate}/>),options:{closable:true,size:"small"}})}}]}tableHeaderActions={[{id:"proofTableHeaderActions",mode:"expanded",actions:[{id:"addProof",action:()=>{showAppModal({id:"addProofModal",title:messages(ebillMessages.addProof),icon:<PlusCircleIcon/>,element:(<AddProof billNumber={billNumber}mutateProof={mutate}/>),options:{closable:true,size:"small"}})},appearance:{tooltip:messages(ebillMessages.addProof),icon:<PlusCircleIcon/>}}]}]}/>)}]}}}]}/></>)};export default ProofManagement;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{convertSelectboxData}from"@/utils/convert-selectbox-data";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,useGet,usePost}from"@brdp/engine";import{ErrorAlert}from"@brdp/ui";import FormGenerator,{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage,requiredFiled}from"@brdp/utils";type AddProofFormType={proofType:string;comment:string;fileData:{file:number[];fileExtension:string;fileName:string}};type ProofTypesResponseType={activateProofTypes:{code:string;name:string}[]};type AddProofDataType={fileName:string;extension:string;proofType:string;comment:string;billNumber:string;photo:number[]};type AddProofProps={billNumber:string;mutateProof:()=>void};const AddProof=({billNumber,mutateProof}:AddProofProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<AddProofFormType>({id:"addProofForm"});const{data:proofTypesData,isFetching:proofTypesIsFetching}=useGet<ProofTypesResponseType>(["proof-types"],Services.Proof.GET_PROOF_TYPES());const{data,mutate,isLoading,error}=usePost<null,AddProofDataType>(Services.Proof.ADD(),{raw:true});const handleSubmit=async(values:AddProofFormType)=>{const data={billNumber:billNumber,photo:Array.from(values.fileData.file),fileName:values.fileData.fileName,extension:values.fileData.fileExtension,proofType:values.proofType,comment:values.comment};mutate(data).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.submitSuccess)},"success","addProof");mutateProof();hideAppModal("addProofModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<ControlledForm submitLabel={messages(generalMessages.actionAddition)}onSubmit={(values)=>handleSubmit(values)}isSubmitting={isLoading}reset resetLabel={messages(generalMessages.cancel)}onReset={()=>hideAppModal("addProofModal")}fields={[{name:"proofType",label:messages(ebillMessages.proofType),type:"select",data:{static:proofTypesData?convertSelectboxData(proofTypesData?.resultData?.activateProofTypes):[]},options:{searchable:true,placeholder:messages(generalMessages.doChoose)},loading:proofTypesIsFetching,layout:{span:4},validation:{rules:[requiredFiled()]}},{name:"comment",label:messages(generalMessages.description),type:"textarea",layout:{span:4}},{name:"fileData",label:messages(ebillMessages.proofFile),type:"business",element:FormGenerator.FileParserField,layout:{span:4},options:{extraProps:{accept:[".png",".jpg",".pdf"],parser:"byteArray",sizeLimit:4*1024*1024,sizeLimitValidationMessage:messages(generalMessages.fileSizeValidation,{fileSize:"4 مگابایت"})}},validation:{rules:[requiredFiled()]}}]}/></>)};export default AddProof;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,useDelete}from"@brdp/engine";import{Button,ErrorAlert,Typography}from"@brdp/ui";import{generalMessages,getFormatMessage}from"@brdp/utils";type DeleteProofProps={billNumber:string;proofType:string;fileName:string;mutateProof:()=>void};type DeleteProofData={billNumber:string;proofType:string};const DeleteProof=({billNumber,proofType,fileName,mutateProof}:DeleteProofProps)=>{const messages=getFormatMessage();const{data,mutate,isLoading,error}=useDelete<null,DeleteProofData>(Services.Proof.DELETE,{raw:true});const handleDelete=()=>{mutate({billNumber,proofType}).then((result)=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result.message||messages(generalMessages.deleteSuccessfulResponse,{item:""})},"success","deleteProof");mutateProof();hideAppModal("deleteProofModal")}})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}<Typography text={messages(ebillMessages.deleteProofConfirmation,{billNumber,fileName})}/><div className="ant-modal-footer custom-actions-modal"><Button label={messages(generalMessages.actionDelete)}loading={isLoading}type="danger"onClick={handleDelete}/><Button label={messages(generalMessages.cancel)}onClick={()=>{hideAppModal("deleteProofModal")}}/></div></>)};export default DeleteProof;}from"@brdp/utils";type CustomerIssuanceFormType={billNumber:string};type CustomerIssuanceProps={customerNumber:string;billNumber:string;getEbillFiles:()=>void};type CustomerIssuanceResponseType=string[];const CustomerIssuance=({customerNumber,billNumber,getEbillFiles}:CustomerIssuanceProps)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<CustomerIssuanceFormType>({id:"customerIssuanceForm"});const{mutate,isLoading,error,data}=usePost<CustomerIssuanceResponseType,CustomerIssuanceFormType>(Services.EbillFilesManagement.POST_CUSTOMER_ISSUANCE,{raw:true});const handleSubmit=()=>{mutate({billNumber})};return(<>{error&&(<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess===false&&(<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>)}{data?.isSuccess&&data?.resultData?(data.resultData.map((item)=><Typography text={item}type="paragraph"/>)):(<Typography text={messages(ebillMessages.customerIssuanceConfirm,{customerNumber,billNumber})}/>)}<ControlledForm onSubmit={data?.isSuccess?undefined:handleSubmit}isSubmitting={isLoading}submitLabel={messages(generalMessages.confirm)}reset resetLabel={messages(generalMessages.close)}onReset={()=>{if(data?.isSuccess){getEbillFiles()}hideAppModal("customerIssuanceModal")}}fields={[]}/></>)};export default CustomerIssuance;
import{ebillMessages}from"@/locale/ebill-messages";import{Services}from"@/services/url";import{hideAppModal}from"@/utils/hooks/useAppModal";import{showToast,usePost}from"@brdp/engine";import{ErrorAlert,Typography}from"@brdp/ui";import{useControlledForm}from"@brdp/ui/form";import{generalMessages,getFormatMessage
