FORM_SYSTEM_REF_v1.0{controlled-form.tsx:useControlledForm<T,K=NamePath<T>|IgnorablePattern>({id,disabledForm}:{id:string,disabledForm?:boolean})=>{{isDisabled,setIsDisabled}=useState(disabledForm??false),[form]=Form.useForm(),ControlledForm=(p)=>React.createElement(FormBuilder<T>,{...p,disabled:isDisabled?isDisabled:p.disabled,drill:form,id}),fieldWatch=(n,o)=>Form.useWatch(n,{form,...o}),getFieldValue=(n)=>form.getFieldValue(n),getFieldsValue=(n)=>form.getFieldsValue(n),setFieldsValue=(s)=>form.setFieldsValue(s),resetFields=(n)=>form.resetFields(n),submit=()=>form.submit(),validateFields=(n)=>form.validateFields(n,{dirty:true,recursive:true}),getFieldError=(n)=>form.getFieldError(n),isFieldTouched=(n)=>form.isFieldTouched(n),isFieldsTouched=(n,a)=>form.isFieldsTouched(n,a),isFieldsValidating=(n)=>form.isFieldsValidating(n),toggleFormDisable=(n)=>setIsDisabled(prev=>n===undefined?!prev:n),validateRequiredGroup=(g,f,e)=>new Promise((resolve,reject)=>{groupFields=f.filter(field=>field.requiredGroup===g),fieldNames=groupFields.map(f=>f.name),values=form.getFieldsValue(fieldNames),hasValue=fieldNames.some(n=>{v=values[n];return v!==undefined&&v!==null&&(typeof v==="string"?v.trim().length>0:true)}),!hasValue?(error=e||messages(generalMessages.requiredGroup),form.setFields(fieldNames.map(n=>({name:n,errors:[error]}))),reject(new Error(error))):(form.setFields(fieldNames.map(n=>({name:n,errors:[]}))),resolve())}),clearRequiredGroupErrors=(g,f)=>{groupFields=f.filter(field=>field.requiredGroup===g),fieldNames=groupFields.map(f=>f.name),form.setFields(fieldNames.map(n=>({name:n,errors:[]})))};return{ControlledForm:useCallback(ControlledForm,[isDisabled]),fieldWatch,getFieldValue,getFieldsValue,setFieldsValue,resetFields,submit,toggleFormDisable,validateFields,getFieldError,isFieldsValidating,isFieldTouched,isFieldsTouched,validateRequiredGroup,clearRequiredGroupErrors}}}
{customized-required-mark.tsx:CustomizedRequiredMark=(label,context)=>{isRequiredGroup="requiredGroup"in context&&context.requiredGroup,isRequired=context.required;return<>{label}{isRequired&&!isRequiredGroup?<Typography.Text strong style={{paddingInlineStart:4}} type="danger">*</Typography.Text>:null}{isRequiredGroup?<Typography.Text strong style={{color:"#1890ff",paddingInlineStart:4}}>*</Typography.Text>:null}</>}}
{form.css:.brdp-form-wrapper .brdp-form-col-with-left-border::after{content:'';height:100%;width:var(--ant-line-width);background-color:var(--ant-color-split);position:absolute;top:0;bottom:0;left:0}.brdp-business-CollapseField{--ant-form-item-margin-bottom:0;padding-top:var(--ant-padding)}.brdp-business-CollapseField>.ant-form-item-row>.ant-form-item-label{display:none}.brdp-field-amount--readonly,.brdp-field-iban--readonly{width:fit-content}.brdp-field-amount--readonly .ant-input,.brdp-field-iban--readonly .ant-input{field-sizing:content}.brdp-form-wrapper .brdp-readonly-field .ant-input-disabled,.ant-picker-disabled,.ant-select-selector,.ant-input-number,.ant-input-css-var{--ant-color-text-disabled:var(--ant-color-text);--ant-color-bg-container-disabled:transparent;--ant-color-border:transparent;--ant-input-addon-bg:transparent;cursor:default!important}}
{form.tsx:type IgnorablePattern=`__${string}`;type FormFields<Fields=any>=FormField<Fields>[];type BusinessElementsRepositoryTypes={BusinessTagDemo:typeof BusinessTagDemo,FileParserField:typeof FileParserField,DatePickerField:typeof DatePickerField,DateTimePickerField:typeof DateTimePickerField,IBANField:typeof IbanField,FileUploaderField:typeof FileUploaderField,AmountField:typeof AmountField,CollapseField:typeof CollapseField,NestDynamicField:typeof NestDynamicField,ButtonField:typeof ButtonField,DynamicListField:typeof DynamicListField,TagField:typeof TagField};FormGenerator=FormBuilder as CompoundedComponent;FormGenerator.BusinessTagDemo=BusinessTagDemo;FormGenerator.FileParserField=FileParserField;FormGenerator.DatePickerField=DatePickerField;FormGenerator.DateTimePickerField=DateTimePickerField;FormGenerator.IBANField=IbanField;FormGenerator.FileUploaderField=FileUploaderField;FormGenerator.AmountField=AmountField;FormGenerator.CollapseField=CollapseField;FormGenerator.NestDynamicField=NestDynamicField;FormGenerator.ButtonField=ButtonField;FormGenerator.DynamicListField=DynamicListField;FormGenerator.TagField=TagField;export{useControlledForm,FormFields,FormGenerator as default}}
{form-builder.tsx:FormBuilder<Fields,HeaderActionData=unknown>({id,fields,initialValues,onSubmit,reset,submitLabel,onReset,resetLabel,compact,isLoading,isSubmitting,isSubmitDisabled,drill,disabled,readOnly,title,formHeaderActions,submitButtonIcon}:FormBuilderPropsType<Fields,HeaderActionData>)=>{[form]=Form.useForm<Fields>(drill??undefined),fieldsList=(fields)=>fields.flatMap(field=>{nestedFields=field.type==="business"&&field.options?.extraProps?.fields?fieldsList(field.options.extraProps.fields):[];return[field,...nestedFields]}),initializedWithDashIfEmpty=useMemo(()=>{if(!initialValues)return initialValues;return Object.fromEntries(Object.entries(initialValues).map(([key,value])=>{currentField=fieldsList(fields).find(f=>f?.name===key),isReadOnly=currentField?.readOnly||readOnly,isEmptyArray=Array.isArray(value)&&value.length===0,isEmptyString=typeof value==="string"&&value.trim().length===0,isNullish=value===null||value===undefined,cleanedArray=(data)=>Array.isArray(data)?data.map(cleanedArray):data&&typeof data==="object"?Object.fromEntries(Object.entries(data).map(([k,v])=>[k,cleanedArray(v)])):data===null||data===undefined||(typeof data==="string"&&data.trim().length===0)?"-":data;return[key,isReadOnly&&(isEmptyString||isNullish)?"-":isReadOnly&&isEmptyArray?["-"]:Array.isArray(value)?cleanedArray(value):value]}));},[initialValues,fieldsList,fields,readOnly]),messages=getFormatMessage(),footerButtons=[],onSubmit&&footerButtons.push(<AntButton key="submit" type="primary" htmlType="submit" style={{minWidth:"120px",lineHeight:1}} loading={isSubmitting} disabled={isSubmitting||!!isSubmitDisabled} icon={submitButtonIcon??null}>{submitLabel?submitLabel:messages(generalMessages.submit)}</AntButton>),reset!==false&&!readOnly&&footerButtons.push(<AntButton key="reset" type="default" htmlType="reset" style={{minWidth:"120px",marginInlineStart:"1rem"}} disabled={false} onClick={onReset}>{resetLabel?resetLabel:messages(generalMessages.clearForm)}</AntButton>),enhancedRequiredMark=(label,info)=>{currentField=fields.find(field=>field.label===label),context={required:info.required,requiredGroup:currentField?.requiredGroup};return CustomizedRequiredMark(label,context)};return<Card className={clsx("brdp-card brdp-form-wrapper",{"brdp-form-readonly":readOnly})} style={{border:"none",borderRadius:0,background:"none",flex:1,width:"100%"}} title={title??null} extra={formHeaderActions&&formHeaderActions.length>=1?<ActionBarBuilder actionList={formHeaderActions}/>:null} styles={{title:{fontWeight:"normal",fontSize:"var(--ant-font-size)",paddingInlineEnd:"var(--ant-font-size)"},header:{background:"none",padding:0},body:{padding:0}}}><Spin spinning={!!isLoading}><Form<Fields> id={id} name={id} form={form} onFinish={isSubmitDisabled?undefined:onSubmit} initialValues={initializedWithDashIfEmpty} requiredMark={enhancedRequiredMark} layout={readOnly?"horizontal":"vertical"} disabled={disabled||readOnly} scrollToFirstError size={compact?"small":undefined} colon={true}>{compact&&<style>{`.ant-form-item-label{--ant-form-label-font-size:0.75rem;--ant-form-vertical-label-padding:0 0 4px}`}</style>}<Card className="brdp-card brdp-form-fields-wrapper" actions={footerButtons}><FormFieldsRow fields={fields} form={form} gutter={16} readOnly={readOnly}/></Card></Form></Spin></Card>}}
{form-field.tsx:BaseFormField<Fields,NameOfFields=keyof Fields|IgnorablePattern>={name:NameOfFields,label:string,validation?:{rules:GetProps<typeof Form.Item>["rules"]},dependencies?:NameOfFields[],tooltip?:string,extra?:string,hasFeedback?:boolean,layout?:{span?:1|2|3|4,offset?:0|1|2|3,endPoint?:boolean},disabled?:boolean|((options:{values:Partial<Fields>})=>boolean),hidden?:boolean|((options:{values:Partial<Fields>})=>boolean),readOnly?:boolean,requiredGroup?:string};FormBusinessField<Fields,ExtraProps extends object=object,StaticData extends object=object>=BaseFormField<Fields>&{type:"business",element:BusinessElementsRepositoryTypes[keyof BusinessElementsRepositoryTypes]|React.ElementType<BusinessElementFieldsProps<Partial<ExtraProps>,StaticData>>,options?:{returnFormat?:{type:"string"|"object"|"fn",template:string|object|((data:unknown)=>null|number|string|object)},staticData?:StaticData,placeholder?:string,extraProps?:ExtraProps}};BusinessElementFieldsProps<ExtraProps extends object=object,StaticData extends object=object>={id:string,name:string,value?:unknown,onChange?:(value:unknown)=>void,validation?:unknown,form:FormInstance,options?:FormBusinessField<never,ExtraProps,StaticData>["options"]&Omit<FormBusinessField<never,ExtraProps,StaticData>,"element"|"options">&{disabled?:boolean,hidden?:boolean}};FormSelectField<Fields>=BaseFormField<Fields>&{type:"select",options?:{searchable?:boolean,multiple?:boolean,maxCount?:number,placeholder?:string,dataMapper?:{label?:string,value?:string,options?:string,groupLabel?:string},tags?:boolean},data:{static:{value:string|number|boolean,label:string,disabled?:boolean}[]}|{static:{label:string,title:string,options:{label:string,value:string|number|boolean}[]}[]},loading?:boolean};FormCascaderField<Fields>=BaseFormField<Fields>&{type:"cascader",options?:{searchable?:boolean,multiple?:boolean,maxCount?:number,placeholder?:string},data:CascaderProps<CascaderDataNodeType>["options"],loading?:boolean};FormInputField<Fields>=BaseFormField<Fields>&{type:"input",options?:{prefix?:string,suffix?:string,placeholder?:string,direction?:"ltr"|"rtl"}};FormPasswordField<Fields>=BaseFormField<Fields>&{type:"password",options?:{placeholder?:string}};FormCheckboxField<Fields>=BaseFormField<Fields>&{type:"checkbox"};FormNumericField<Fields>=BaseFormField<Fields>&{type:"numeric",options?:{placeholder?:string}};FormTextareaField<Fields>=BaseFormField<Fields>&{type:"textarea",options?:{maxLength?:number,placeholder?:string,direction?:"ltr"|"rtl"}};FormTimePickerField<Fields>=BaseFormField<Fields>&{type:"time-picker",options?:{disabledDate?:(current:Date)=>boolean,minDate?:Date,maxDate?:Date,placeholder?:string}};FormRangePickerField<Fields>=BaseFormField<Fields>&{type:"range-date-picker",options?:{disabledDate?:(current:Date)=>boolean,minDate?:Date,maxDate?:Date,placeholder?:[string,string]}};FormRadioButtonField<Fields>=BaseFormField<Fields>&{type:"radio-button",data:{static:{value:string|number|boolean,label:string,disabled?:boolean}[]}};FormTreeSelectField<Fields>=BaseFormField<Fields>&{type:"tree-select",options?:{placeholder?:string,treeCheckable?:boolean,showIcon?:boolean,expandAll?:boolean,treeLine?:boolean,showLeafIcon?:boolean},data:TreeSelectProps<TreeSelectDataNodeType>["treeData"]};DividerField<Fields>=BaseFormField<Fields>&{type:"divider",options?:{orientation?:"left"|"right"|"center"}};FormField<Fields>=FormBusinessField<Fields>|FormSelectField<Fields>|FormCascaderField<Fields>|FormInputField<Fields>|FormPasswordField<Fields>|FormCheckboxField<Fields>|FormNumericField<Fields>|FormTextareaField<Fields>|FormTimePickerField<Fields>|FormRangePickerField<Fields>|FormRadioButtonField<Fields>|FormTreeSelectField<Fields>|DividerField<Fields>}
{form-fields-renderer.tsx:RenderBusinessElement:React.FC<BusinessElementFieldsProps&{field:FormBusinessField<never>}>=({name,id,onChange,validation,value,form,field:{element,options,...restField}})=>React.createElement(element as React.ElementType,{id,name,value,onChange,validation,form,options:{...options,...restField}});FormFieldsRenderer=<Fields,>({field,form}:{field:FormField<Fields>,form:FormInstance})=>{messages=getFormatMessage(),calculatedRelationResult=Form.useWatch((values)=>{if(!field.dependencies||field.dependencies.length===0)return()=>{};result:Partial<Fields>={},field.dependencies.forEach((key)=>{if(Object.prototype.hasOwnProperty.call(values,key)){result[key]=values[key]}});return result},form),relationHandler=useCallback((cb)=>{if(isFunction(cb)){return cb({values:calculatedRelationResult as Partial<Fields>})}return cb??false},[calculatedRelationResult]),getCommonFormItemProps=React.useCallback((field)=>{const{name,label,validation,tooltip,extra,hasFeedback,hidden}=field;return{name:name as string,htmlFor:String(name),label,rules:validation?.rules,tooltip,extra,hasFeedback,hidden:hidden===undefined?undefined:relationHandler(hidden)}},[relationHandler]),renderFormItem=(formItemProps,children)=>{businessElementName=field.type==="business"?(field.element as React.ComponentType).displayName||(field.element as React.ComponentType).name:undefined;return<Form.Item key={String(field.name)} {...getCommonFormItemProps(field)} layout={field.readOnly?"horizontal":"vertical"} {...formItemProps} className={clsx({"brdp-readonly-field":field.readOnly},{"brdp-disabled-field":field.disabled},{"brdp-business-field":field.type==="business"},{[`brdp-field--type-${field.type}`]:field.type},{[`brdp-business-${businessElementName}`]:businessElementName})}>{children}</Form.Item>},commonInputProps={id:String(field.name),disabled:(field.disabled||field.readOnly)===undefined?undefined:relationHandler(field.disabled||field.readOnly),hidden:relationHandler(field.hidden)};switch(field.type){case"business":return renderFormItem({},<RenderBusinessElement field={{...field,...commonInputProps}} id={String(field.name)} name={field.name as string} validation={field.validation} form={form}/>);case"input":{fieldValue=form.getFieldValue(field.name),isReadOnly=Boolean(field.readOnly),span=field.layout?.span??1,hasSuffix=Boolean(field.options?.suffix),valueCharSizes={1:15,2:45,3:80,4:110},withTooltip=isReadOnly&&(typeof fieldValue==="string"||typeof fieldValue==="number")&&String(fieldValue).length>=valueCharSizes[span];return renderFormItem({labelAlign:"right"},<Input {...commonInputProps} addonAfter={hasSuffix||withTooltip?<Flex align="center" justify="center" gap="small">{withTooltip&&<Tooltip title={fieldValue}><Button type="text" disabled={false} size="small" icon={<HorizontalEllipsisIcon/>}/></Tooltip>}{hasSuffix&&<span>{field.options?.suffix}</span>}</Flex>:null} addonBefore={field.options?.prefix} placeholder={field.options?.placeholder} dir={field?.options?.direction} className={clsx({"ellipsis-input-filed-with-tooltip":withTooltip})}/>)}case"numeric":return renderFormItem({},<InputNumber<string> style={{width:"100%"}} {...commonInputProps} controls={false} keyboard={false} placeholder={field.options?.placeholder}/>);case"password":return renderFormItem({},<Input.Password {...commonInputProps} placeholder={field.options?.placeholder}/>);case"checkbox":return renderFormItem({layout:"horizontal",valuePropName:"checked",style:{height:"100%",display:"flex",alignItems:"center"}},<Checkbox {...commonInputProps} className="brdp-checkbox" rootClassName="brdp-checkbox-root">{field.label}</Checkbox>);case"select":return renderFormItem({},<Select {...commonInputProps} options={field.data.static} showSearch={field.options?.searchable} mode={field.options?.multiple?"multiple":field.options?.tags?"tags":undefined} maxTagCount={field.options?.maxCount} allowClear={true} loading={field.loading} placeholder={field.options?.placeholder} fieldNames={field.options?.dataMapper} notFoundContent={<Empty description={messages(generalMessages.notFound)}/>} filterOption={(_input,option)=>{input=_input.toLowerCase().trim(),label=option?.label?.toString().toLowerCase().trim();if(label.includes(input))return true;value=option?.value?.toString().toLowerCase().trim();if(value.includes(input.trim()))return true;return false}}/>);case"cascader":return renderFormItem({},<Cascader {...commonInputProps} options={field.data} showSearch={field.options?.searchable} multiple={field.options?.multiple} maxTagCount={field.options?.maxCount} allowClear={true} placeholder={field.options?.placeholder} loading={field.loading}/>);case"textarea":return renderFormItem({},<Input.TextArea {...commonInputProps} maxLength={field.options?.maxLength} showCount={Boolean(field.options?.maxLength)} placeholder={field.options?.placeholder}/>);case"time-picker":return renderFormItem({},<DatePicker.TimePicker {...commonInputProps} style={{width:"100%"}} placeholder={field.options?.placeholder}/>);case"range-date-picker":return renderFormItem({},<DatePicker.RangePicker {...commonInputProps} style={{width:"100%"}} placeholder={field.options?.placeholder}/>);case"radio-button":return renderFormItem({},<Radio.Group {...commonInputProps} options={field.data.static as unknown as CheckboxOptionType[]}/>);case"tree-select":return renderFormItem({},<TreeSelect treeData={field.data} allowClear multiple placeholder={field.options?.placeholder} placement="bottomLeft" showSearch treeCheckable={field.options?.treeCheckable} treeDefaultExpandAll={field.options?.expandAll} treeIcon={field.options?.showIcon} treeLine={field.options?.treeLine&&{showLeafIcon:field.options?.showLeafIcon}}/>);case"divider":return<Divider {...field.options}>{field.label}</Divider>;default:console.error(`rendering form field:invalid field type ${(field as{type:string}).type},field id:${(field as{id:string}).id}`);return null}}}
{form-fields-row.tsx:calculateSpan=(field)=>({xs:24,md:(field.layout?.span||1)>=2?24:12,lg:(field.layout?.span||1)*6});FormFieldsRow=<Fields,>({fields,form,gutter,readOnly,disabled,withBorder}:{fields:FormBuilderPropsType<Fields>["fields"],form:FormInstance<Fields>,gutter:RowProps["gutter"],readOnly?:boolean,disabled?:boolean,withBorder?:boolean})=>{breakpoint=useBreakpoint(),calculateHasBorder=(()=>{if(!withBorder||!breakpoint)return undefined;spanAccumulator=0;return(span,isLastItem)=>{spanNumber=breakpoint.lg?span.lg:breakpoint.md?span.md:span.xs,spanAccumulator=spanAccumulator+spanNumber;if(spanAccumulator>=24||isLastItem){spanAccumulator=0;return false}return true}})();return<Row gutter={gutter}>{fields.map((field,index)=>{span=calculateSpan(field),hasBorder=calculateHasBorder?.(span,index+1===fields.length);if(field.type==="divider"){return<Col xs={{span:span.xs}} offset={0} key={String(field.name)}><FormFieldsRenderer<Fields> field={{readOnly,disabled,...field}} form={form}/></Col>}return<Col xs={{span:span.xs}} md={{span:span.md}} lg={{span:span.lg}} offset={(field.layout?.offset||0)*6} key={String(field.name)} className={clsx({"brdp-form-col-with-left-border":hasBorder})}><FormFieldsRenderer<Fields> field={{readOnly,disabled,...field}} form={form}/></Col>})}</Row>}}
{business-tag-demo.tsx:BusinessTagDemo:React.FC<BusinessElementFieldsProps>=({name,value,...rest})=>{console.log("BusinessTagDemo",{...rest}),useEffect(()=>{rest.onChange&&rest.onChange(false)},[]);return<Tag color="blue" style={{width:"100%"}}><span>Business,name:{name}-{rest.options?.returnFormat?.type}</span><div><pre dir="ltr">{JSON.stringify(rest)}</pre></div></Tag>};BusinessTagDemo.displayName="BusinessTagDemo"}
{tag-field.tsx:TagField:React.FC<BusinessElementFieldsProps<{parser?:(value:unknown)=>boolean}>>=({form:_form,...props})=>{messages=getFormatMessage(),dataValue=props?.options?.extraProps?.parser!==undefined?props?.options?.extraProps?.parser(props?.value):Boolean(props?.value);return<Tag className={styles["tag-field"]} id={props?.id} color={dataValue?"success":"error"} bordered={false} icon={dataValue?<IconsList.TickIcon/>:<IconsList.CrossIcon/>}><strong>{dataValue?messages(generalMessages.has):messages(generalMessages.doesNotHave)}</strong></Tag>};TagField.displayName="TagField"}
{nest-dynamic-field.tsx:NestDynamicField:React.FC<BusinessElementFieldsProps<{cultures:CulturesType[],culturesIsFetching:boolean}>>=({form:_form,...props})=>{messages=getFormatMessage(),[cultureValues,setCultureValues]=useState<CultureValuesType[]>((props.value as CultureValuesType[])||[{culture:undefined,value:""}]),allOptions=props?.options?.extraProps?.cultures,getAvailableOptions=(currentIndex)=>{selectedCultures=cultureValues.map((cv,i)=>(i!==currentIndex?cv.culture:null)).filter(Boolean);return allOptions?.filter((option)=>!selectedCultures.includes(option.value))},allCulturesSelected=allOptions?.length===cultureValues.filter((cv)=>cv.culture).length,addTranslation=()=>{!allCulturesSelected&&setCultureValues([...cultureValues,{culture:undefined,value:""}])},removeTranslation=(index)=>{newCultureValues=[...cultureValues],newCultureValues.splice(index,1),setCultureValues(newCultureValues),props.onChange?.(newCultureValues)},handleChange=({name,value,index})=>{newCultureValues=[...cultureValues];newCultureValues[index]&&(newCultureValues[index][name]=value,setCultureValues(newCultureValues),props.onChange?.(newCultureValues))};return<Flex vertical style={{width:"50%"}} gap="small"><Flex vertical gap="small">{cultureValues.map((cultureValue,index)=><Flex gap="small" key={index}><Select allowClear direction="rtl" loading={props?.options?.extraProps?.culturesIsFetching} style={{width:"50%"}} options={getAvailableOptions(index)} value={cultureValue.culture} onChange={(value)=>handleChange({name:"culture",value,index})} placeholder={messages(generalMessages.language)}/><Input name="value" value={cultureValue.value} onChange={(e)=>handleChange({name:e.target.name as keyof CultureValuesType,value:e.target.value,index})} placeholder={messages(generalMessages.value)}/><MinusCircleOutlined onClick={()=>removeTranslation(index)}/></Flex>)}</Flex><Flex justify="start"><Button label={messages(generalMessages.newTranslation)} icon={<PlusOutlined/>} onClick={addTranslation} disabled={allCulturesSelected}/></Flex></Flex>};NestDynamicField.displayName="NestDynamicField"}
{iban-field.tsx:formatIban=(value)=>{parts=[value?.slice(0,2),value?.slice(2,6),value?.slice(6,10),value?.slice(10,14),value?.slice(14,18),value?.slice(18,24)]?.filter(Boolean);return parts.join("-")},extractDigits=(iban="")=>iban?.replace(/^IR/i,"")?.replace(/[^0-9]/g,"")?.slice(0,24);IbanField:React.FC<BusinessElementFieldsProps<{placeholder?:string,addIR?:boolean}>>=({form:_form,...props})=>{displayedValue=extractDigits(props.value as string),placeholder=props?.options?.extraProps?.placeholder||"",addIR=props?.options?.extraProps?.addIR===true?true:false,handleChange=(e)=>{rawInput=e.target.value,digitsOnly=extractDigits(rawInput),ibanWithIR=addIR&&digitsOnly.length>0?"IR"+digitsOnly:digitsOnly,props.onChange?.({...e,target:{...e.target,value:ibanWithIR}})};return<Input disabled={props.options?.disabled as boolean} readOnly={props?.options?.readOnly} placeholder={placeholder} id={props?.id} name={props?.name} value={formatIban(displayedValue)} onChange={handleChange} addonAfter={"IR"} dir="ltr" style={{textAlign:"left"}} maxLength={29} className={`${props.options?.readOnly?"brdp-field-iban brdp-field-iban--readonly":"brdp-field-iban"}`}/>};IbanField.displayName="IbanField"}
{file-uploader-field.tsx:checkPropsExist=(props)=>{const{accept}=props??{};if(!accept||!Array.isArray(accept)||accept.length===0||!accept.every((item)=>mimeTypes[item])){throw new Error("Prop `accept` is required but was not provided or is invalid.")}return props as ExtraProps},getFileExtension=(fileName)=>{match=/\.([0-9a-z]+)$/i.exec(fileName);return match&&match[0]?(match[0].toLowerCase().trim() as Extensions):undefined},checkIsValidFile=(file,accept)=>{if(!file)throw new Error("فایلی ارسال نشده است.");ext=getFileExtension(file.name);if(!ext)throw new Error("فایل ارسال شده فاقد پسوند می‌باشد.");matchedExtension=accept.find((item)=>item.toLowerCase().trim()===ext);if(!matchedExtension)throw new Error("پسوند فایل ارسال شده معتبر نمی‌باشد.");fileMimeType=file.type.toLowerCase().trim();if(fileMimeType!==mimeTypes[matchedExtension])throw new Error("فایل ارسال شده معتبر نمی‌باشد.")};FileUploaderField=({id,name,...props}:BusinessElementFieldsProps<ExtraProps>)=>{messages=getFormatMessage(),{accept,disabled}=checkPropsExist(props.options?.extraProps),{message}=App.useApp(),[fileList,setFileList]=useState<UploadFile|undefined>(undefined),[error,setError]=useState<string|undefined>(undefined);return<Upload.Dragger name={name} id={String(id)} disabled={disabled} accept={accept.join(",")} showUploadList={false} multiple={false} maxCount={1} beforeUpload={async(file)=>{try{checkIsValidFile(file,accept),props.onChange?.(file),setFileList(file)}catch(error){error instanceof Error?(message.error(error.message),setError(error.message),setFileList(undefined)):console.error(error)}return false}} onDrop={(e)=>{files=Array.from(e.dataTransfer.files),file=files[0];try{checkIsValidFile(file,accept)}catch(error){error instanceof Error?message.error(error.message):console.error(error)}}} className={[classes.fileParserWrapper,...(error?[classes.errorBorder]:[]),...(fileList?[classes.nonePointer]:[])].join(" ")}>{fileList?<Flex gap="0.25rem" justify="center" align="stretch" wrap><p className="ant-upload-text" style={{paddingTop:"6px"}}>{fileList.name}</p><span className={classes.separator}/><Button icon={<DeleteOutlined/>} color="danger" variant="outlined" htmlType="button" style={{pointerEvents:"auto"}} onClick={(e)=>{e.stopPropagation(),setFileList(undefined)}}/></Flex>:<Flex gap="0.75rem" justify="center" align="center" wrap><p className="ant-upload-drag-icon" style={{paddingLeft:"20px"}}><CloudUploadOutlined/></p><p className="ant-upload-text">{messages(generalMessages.dropFileHere)}</p><p className="ant-upload-text" style={{minWidth:"50px"}}>{
