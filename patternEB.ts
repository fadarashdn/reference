//=====IMPORTS=====
import{queryClient,useGet,usePost,usePatch,useDelete,showToast}from"@brdp/engine";import{Content,GenerativeTable,IconsList,ErrorAlert,Spin,Button,Typography,Tag,useTablePagination,Steps,Tabs,DocumentWithLinesIcon,DeleteIcon,DownloadIcon,PlusCircleIcon,ManagementIcon,EyeIcon,EditIcon}from"@brdp/ui";import{useControlledForm,FormGenerator}from"@brdp/ui/form";import{generalMessages,getFormatMessage,requiredFiled,removeEmptyValues,defineMessages,objectToQueryString,validateMaxLength,validateExactLength,numbersOnly,numbersOnlyNotStartWithZero,validateMinNumber,validateMaxEqualNumber,currentJalali,ISOToJalaaliDateTime,ISOToJalaaliDate}from"@brdp/utils";

//=====API-SERVICES=====
const Services={Configuration:{GET_HISTORY:()=>`/${General.BASE}/configuration/history`,GET_INFO:()=>`/${General.BASE}/configuration/info`,POST_NEW:()=>`/${General.BASE}/configuration/add`}as const satisfies URLDefinition,
CommissionRate:{CREATE:()=>`/${General.BASE}/basic-info/commission-rate/create`,UPDATE:()=>`/${General.BASE}/basic-info/commission-rate/update`,SEARCH:(params:GeneralObject)=>`/${General.BASE}/basic-info/commission-rate/search?${objectToQueryString(params)}`},
ProofType:{GET:()=>`/${General.BASE}/basic-info/proof-type`,SEARCH:(params:GeneralObject)=>`/${General.BASE}/basic-info/proof-type/search?${objectToQueryString(params)}`,UPDATE:(code:string)=>`/${General.BASE}/basic-info/proof-type/${code}/update`,CREATE:()=>`/${General.BASE}/basic-info/proof-type/create`,DEACTIVATE:(code:string)=>`/${General.BASE}/basic-info/proof-type/${code}/deactivate`,ACTIVATE:(code:string)=>`/${General.BASE}/basic-info/proof-type/${code}/activate`},
EbillTypesManagement:{GET_EBILL_TYPE_BY_CODE:(code:string)=>`/${General.BASE}/type/get-by-code?code=${code}`,GET_EBILL_TYPES:(params:{code?:string;deletedType?:boolean;pageSize:number;pageNumber:number})=>`/${General.BASE}/type/search?${objectToQueryString(params)}`,POST_EBILL_TYPE:()=>`/${General.BASE}/type/create`,PATCH_EBILL_TYPE:()=>`/${General.BASE}/type/update`,DELETE_EBILL_TYPE:({code}:{code:string})=>`/${General.BASE}/type/${code}/delete`},
EbillFilesManagement:{GET_EBILL_FILES:(params:EbillFilesManagementDataType)=>`/${General.BASE}/search?${objectToQueryString(params)}`,POST_CUSTOMER_ISSUANCE:()=>`/${General.BASE}/customer-issuance`,POST_CUSTOMER_ISSUANCE_BACK:()=>`/${General.BASE}/customer-issuance-back`,POST_BANK_ISSUANCE:()=>`/${General.BASE}/bank-issuance`,CREATE:()=>`/${General.BASE}/create`,LOAD:(params:EditBaratFileQuery)=>`/${General.BASE}/load?${objectToQueryString(params)}`,UPDATE:()=>`/${General.BASE}/update`,GET_EBILL_DETAIL:(billNumber:string)=>`/${General.BASE}/load-view-data?billNumber=${billNumber}`,CREATE_ASSURANCE:()=>`${General.BASE}/assurance/add`,GET_ASSURANCE_DATA:(billNumber:string)=>`/${General.BASE}/assurance/data?billNumber=${billNumber}`},
Sanction:{GET_CAN_ADD_ITEM:(billNumber:string)=>`/${General.BASE}/sanction/can-add-item?billNumber=${billNumber}`,APPROVE_SANCTION:()=>`/${General.BASE}/sanction/approve`,GET_SANCTIONS_DATA:(billNumber:string)=>`/${General.BASE}/sanction/data?billNumber=${billNumber}`,GET_SANCTION_DETAILS:(sanctionSerial:number)=>`/${General.BASE}/sanction/details?sanctionSerial=${sanctionSerial}`,ADD_SANCTION:()=>`/${General.BASE}/sanction/add`},
Proof:{LOAD:(billNumber:string)=>`/${General.BASE}/proof/load?billNumber=${billNumber}`,DELETE:({billNumber,proofType}:{billNumber:string;proofType:string})=>`/${General.BASE}/proof/${billNumber}/${proofType}/delete`,GET_PROOF_TYPES:()=>`/${General.BASE}/proof`,ADD:()=>`/${General.BASE}/proof/add`},
Spm:{SEARCH:(params:{pageSize:number;pageNumber:number;billNumber:string})=>`/${General.BASE}/spm/search?${objectToQueryString(params)}`,VIEW:(params:ViewRequestDetailsProps)=>`/${General.BASE}/spm/view?${objectToQueryString(params)}`,UNIQUE_NUMBER_PRE_ACTION:(billNumber:string)=>`/${General.BASE}/spm/unique-number/pre-action?billNumber=${billNumber}`,UNIQUE_NUMBER_DATA:(billNumber:string)=>`/${General.BASE}/spm/unique-number/data?billNumber=${billNumber}`,UNIQUE_NUMBER_REQUEST:()=>`/${General.BASE}/spm/unique-number/request`},
ReceiveAmount:{GET_PRIMARY_DATA:(params:{billNumber:string;branchCode:string})=>`/${General.BASE}/receive-amount/load?${objectToQueryString(params)}`,GET_RECEIVED_AMOUNTS:(params:{billNumber:string;branchCode:string})=>`/${General.BASE}/receive-amount/get-received-amounts?${objectToQueryString(params)}`,RETURN:`/${General.BASE}/receive-amount/return`,RECEIVE:`/${General.BASE}/receive-amount/receive`},
ExternalServices:{GET_ASSURANCE_TYPE:()=>`/${General.EXTERNAL}/GetAssuranceType`,SEARCH_HISTORY:(params?:IBaratSearchHistoryParams)=>`/${General.EXTERNAL}/GetConfigurationHistory?${objectToQueryString(params)}`,GET_CITY:()=>`/${General.EXTERNAL}/GetCity`,GET_PROOF_LOAD:(billNumber:string)=>`/${General.EXTERNAL}/GetProofLoad?billNumber=${billNumber}`,GET_APPROVAL_REFERENCE:()=>`/${General.EXTERNAL}/GetApprovalReference`,GET_CONVERT_DEBT_TYPE:()=>`/${General.EXTERNAL}/GetConvertDebtType`,GET_ECONOMICAL_SECTION:()=>`/${General.EXTERNAL}/GetEconomicalSection`,GET_ECONOMICAL_SUB:(params?:string)=>`/${General.EXTERNAL}/GetEconomicalSection/${params}`},
EbillServices:{GET_ALL_BILL_TYPES:()=>`/${General.BASE}/service/bill-types`,GET_ALL_BILL_STATUS:()=>`/${General.BASE}/service/bill-status`,GET_GENDER:()=>`/${General.BASE}/gender`,GET_BENEFICIARY_TYPES:()=>`/${General.BASE}/beneficiary-types`,GET_PERSON_TYPES:()=>`/${General.BASE}/person-types`}}as const;

//===== HOOKS=====
const useGetResource=(pageNumber:number,pageSize:number,resetPage:()=>void)=>{const[params,setParams]=useState<SearchParams>();const url=params?Services.Module.SEARCH({...params,pageNumber,pageSize}):"";const{data,isLoading,isFetching,error,mutate}=useGet<IApiResultData<T>>(["query-key",params],url,{raw:true,hasPagination:true,enable:false});const handleSubmit=async(formValue?:SearchParams)=>{setParams(formValue);try{await mutate();resetPage()}catch(error){console.error("Search error:",error)}};return{searchParams:params,handleSubmit,data,isLoading,isFetching,error}};
const useCreateResource=()=>{const messages=getFormatMessage();const{mutate,isLoading,error}=usePost<R,P>(Services.Module.CREATE(),{raw:true});const handleSubmit=async(values:P)=>{const res=await mutate(values);if(res?.isSuccess){showToast({title:messages(generalMessages.successful),description:res?.message},"success");hideAppModal("id")}};return{handleSubmit,isLoading,error}};
const useGetBillType=()=>{const url=Services.EbillServices.GET_ALL_BILL_TYPES();const{data,isLoading:billTypeLoading}=useGet<BillTypeDataType[]>(["bill-types"],url);const uniqueBillTypes=data?.resultData?.filter(item=>item.enable).map(item=>({label:`${item.name} - ${item.code}`,value:item.code}))||[];return{billTypeLoading,uniqueBillTypes,mutateBillType:mutate}};
const useGetAssuranceType=()=>{const url=Services.ExternalServices.GET_ASSURANCE_TYPE();const{data,isLoading:assuranceTypeLoading}=useGet<AssuranceType[]>(["assurance-type"],url);const assuranceTypeResponse=data?.resultData.map(item=>({label:`${item.name} - ${item.code}`,value:item.code}))||[];return{assuranceTypeLoading,assuranceTypeResponse}};
const useGetCommissionRate=(pageNumber:number,pageSize:number,resetPage:()=>void)=>{const[params,setParams]=useState<IPayloadSearchCommissionRate>();const url=params?Services.CommissionRate.SEARCH({...params,pageNumber,pageSize}):"";const{data:commissionRateResponse,isLoading:commissionRateLoading,isFetching:commissionRateFetching,mutate:commissionRateMutate}=useGet<IApiResultData<ICommissionRate>|undefined>(["search-commission-rate"],url);const handleSubmit=async(formValue?:IPayloadSearchCommissionRate)=>{setParams(formValue);try{await commissionRateMutate();resetPage()}catch(error){console.error("Search error:",error)}};return{searchParams:params,handleSubmit,commissionRateResponse,commissionRateLoading,commissionRateFetching}};
const useActivationProofType=(handleSubmit?:(formValue?:IPayloadProofType)=>Promise<void>,searchParams?:IPayloadProofType)=>{const messages=getFormatMessage();const activateUrlFn=(params:unknown)=>{const code=(params as{code:string}).code;return Services.ProofType.ACTIVATE(code)};const deactivateUrlFn=(params:unknown)=>{const code=(params as{code:string}).code;return Services.ProofType.DEACTIVATE(code)};const{mutate:activateMutate,isLoading:activateLoading}=usePatch<unknown,unknown>(activateUrlFn,{raw:true});const{mutate:deactivateMutate,isLoading:deactivateLoading}=usePatch<unknown,unknown>(deactivateUrlFn,{raw:true});const handleAction=async(isActivate:boolean,{code}:IProofType)=>{const actionVerb=isActivate?messages(generalMessages.active):messages(generalMessages.deActive);try{const mutate=isActivate?activateMutate:deactivateMutate;const res=await mutate({code});if(res?.isSuccess){showToast({title:messages(generalMessages.successful),description:res.message||actionVerb},"success");handleSubmit?.(searchParams)}}catch(err){console.error(err);showToast({title:messages(generalMessages.error)},"error")}};return{openModalActivation:(proofType:IProofType)=>handleAction(true,proofType),openModalDeactivation:(proofType:IProofType)=>handleAction(false,proofType),isLoading:activateLoading||deactivateLoading}};
const useGetEconomicalSection=()=>{const url=Services.ExternalServices.GET_ECONOMICAL_SECTION();const{data:getEconomicalSectionResponse,isLoading:getEconomicalSectionLoading}=useGet<IEconomical[]|undefined>(["get-economical-section"],url);const mapEconomicalSection=useCallback((items?:IEconomical[])=>{const uniqueMap=new Map<string,IEconomical>();items?.forEach(item=>uniqueMap.set(item.code,item));return Array.from(uniqueMap.values(),i=>({value:i.code,label:`${i.name} - ${i.code}`}))},[]);const getEconomicalSection=useMemo(()=>mapEconomicalSection(getEconomicalSectionResponse?.resultData),[getEconomicalSectionResponse?.resultData,mapEconomicalSection]);return{getEconomicalSection,getEconomicalSectionLoading}};
const useGetSubEconomicalSection=()=>{const[params,setParams]=useState<string|undefined>();const url=params?Services.ExternalServices.GET_ECONOMICAL_SUB(params):"";const{isLoading:getSubEconomicalSectionLoading,data:getSubEconomicalSectionData,mutate}=useGet<ISubEconomical[]|undefined>(["search-commission-rate",params],url);const mapSubEconomicalSection=useCallback((items?:ISubEconomical[]):ISelectOption[]=>{if(!items)return[];const uniqueMap=new Map<string,ISubEconomical>();items.forEach(item=>uniqueMap.set(item.code,item));return Array.from(uniqueMap.values(),i=>({value:i.code,label:`${i.name} - ${i.code}`}))},[]);const handleSubmitSub=async(formValue?:ISubEconomicalSectionCode):Promise<ISelectOption[]|undefined>=>{try{setParams(formValue?.economicalSectionValue||"");if(!formValue)return undefined;const response=await mutate();const result=await response?.promise;if(!result?.resultData)throw new Error("No data returned");return mapSubEconomicalSection(result.resultData)}catch(error){console.error("Fetch error:",error);throw new Error(error instanceof Error?error.message:"Failed to fetch data")}};return{handleSubmitSub,getSubEconomicalSectionLoading,mapSubEconomicalSection}};

//=====COMPONENTS=====
const ManagementPage:React.FC=()=>{const messages=getFormatMessage();const{billTypeLoading,uniqueBillTypes}=useGetBillType();const[searchData,setSearchData]=useState<EbillFilesManagementFormType>({billTypeCode:"",customerNumber:"",centralBankCode:"",billNumber:"",startDateFrom:"",startDateTo:"",expireDateFrom:"",expireDateTo:"",amountFrom:0,amountTo:0,status:""});const{tableConfig,PAGE_SIZE,resetPage,tableFromIndex,currentPage}=useTablePagination();const{ControlledForm}=useControlledForm<EbillFilesManagementFormType>({id:"ebillFilesManagementForm"});const{data:allBillStatusData,isFetching:allBillStatusIsFetching}=useGet<SelectboxDataType[]>(["all-bill-status"],Services.EbillServices.GET_ALL_BILL_STATUS());const{data,isFetching,isLoading,mutate}=useGet<EbillFilesManagementResponseType>(["ebill-files-management"],Services.EbillFilesManagement.GET_EBILL_FILES({pageSize:PAGE_SIZE,pageNumber:currentPage,...removeEmptyValues<Partial<EbillFilesManagementFormType>>({...searchData})}),{enable:false,hasPagination:true});const handleSearch=(values:EbillFilesManagementFormType)=>{flushSync(()=>setSearchData(values));mutate().then(result=>{if(result?.status==="success"&&!result?.data?.isSuccess){showToast({title:messages(generalMessages.error),description:messages(generalMessages.errorBadResponse)},"error","ebill-files-management")}});resetPage()};useEffect(()=>{if(data?.resultData){mutate()}},[currentPage,PAGE_SIZE]);return(<Content title={messages(ebillMessages.ebillFilesManagement)}><ControlledForm isSubmitting={isLoading}submitLabel={messages(generalMessages.search)}submitButtonIcon={<IconsList.SearchIcon/>}onSubmit={values=>handleSearch(values)}fields={[{name:"billTypeCode",type:"select",label:messages(ebillMessages.ebillTypeCodeName),loading:billTypeLoading,options:{placeholder:messages(generalMessages.doChoose),searchable:true},data:{static:uniqueBillTypes}},{type:"business",name:"customerNumber",label:messages(generalMessages.customerNumber),element:CustomerSearch},{name:"centralBankCode",type:"input",label:messages(ebillMessages.centralBankCode),validation:{rules:[validateExactLength(16),numbersOnly()]}},{name:"billNumber",type:"input",label:messages(ebillMessages.ebillFileNumber)},{name:"startDateFrom",type:"business",element:FormGenerator.DatePickerField,label:messages(ebillMessages.creationDateFrom),options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{maxDate:"startDateTo"}}},{name:"startDateTo",type:"business",element:FormGenerator.DatePickerField,label:messages(ebillMessages.creationDateTo),options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{minDate:"startDateFrom"}}},{name:"amountFrom",type:"input",label:messages(ebillMessages.ebillAmountFrom),validation:{rules:[validateMaxLength(15),numbersOnly()]}},{name:"amountTo",type:"input",label:messages(ebillMessages.ebillAmountTo),validation:{rules:[validateMaxLength(15),numbersOnly()]}},{name:"status",type:"select",label:messages(generalMessages.status),loading:allBillStatusIsFetching,options:{placeholder:messages(generalMessages.doChoose)},data:{static:allBillStatusData?convertSelectboxData(allBillStatusData?.resultData):[]}}]}/><GenerativeTable<EbillFileType>rowKey="billNumber"fromIndex={tableFromIndex}data={data?.resultData?.items||[]}pagination={tableConfig(data?.resultData?.totalCount||0)}title={`${messages(generalMessages.tableRowsCount)}:${data?.resultData?.totalCount||0}`}loading={isFetching}tableHeaderActions={[{id:"barat-file",mode:"expanded",actions:[{id:"add-barat-file",appearance:{icon:<IconsList.PlusCircleIcon/>,tooltip:messages(ebillMessages.addNewBarat)},action:()=>showAppModal({id:"add-barat-file",title:messages(ebillMessages.addNewBarat),element:<AddBaratFile mutate={mutate}/>,options:{size:"default",closable:true}})}]}]}columns={[{key:"billNumber",dataIndex:"billNumber",title:messages(ebillMessages.ebillFileNumber),align:"center"},{key:"customerNumber",dataIndex:"customerNumber",title:messages(generalMessages.customerNumber),align:"center"},{key:"centralBankCode",dataIndex:"centralBankCode",title:messages(ebillMessages.centralBankCode),align:"center"},{key:"startDate",dataIndex:"startDate",title:messages(ebillMessages.fileCreationDate),align:"center",sorter:(a,b)=>a.startDate.localeCompare(b.startDate)},{key:"endDate",dataIndex:"endDate",title:messages(ebillMessages.fileExpirationDate),align:"center",sorter:(a,b)=>a.endDate.localeCompare(b.endDate)},{key:"amount",dataIndex:"amount",title:messages(ebillMessages.ebillAmount),render:col=><p>{formatNumber(col)+" "+messages(ebillMessages.rial)}</p>,align:"center",sorter:(a,b)=>Number(a.amount)-Number(b.amount)},{key:"statusName",dataIndex:"statusName",title:messages(generalMessages.status),render:(col,row)=><CustomTag title={col}type={row.statusCode}/>,align:"center"}]}rowActions={[{id:"1",appearance:{icon:<IconsList.EyeIcon/>,tooltip:messages(generalMessages.actionView)},action:value=>showAppModal({id:"ebill-detail-view",icon:<IconsList.EyeIcon/>,title:messages(ebillMessages.viewDetailBaratManagement),element:<ViewEbillDetail billNumber={value.billNumber}/>,options:{onCancel:()=>{},size:"wide",closable:true,cancelText:messages(ebillMessages.closeWindow)}}),permissionField:record=>record.action.view},{id:"2",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(generalMessages.actionEdit)},action:value=>showAppModal({id:"edit-barat-file",title:messages(ebillMessages.editFileBarat,{billNumber:value?.billNumber||""}),element:<EditBaratFile mutate={mutate}billNumber={value?.billNumber||""}/>,options:{size:"default",closable:true}})},{id:"4",appearance:{icon:"",tooltip:messages(ebillMessages.certificates)},action:values=>showAppModal({id:"proofModal",title:messages(ebillMessages.certificates),element:<ProofManagement{...values}/>,options:{size:"wide",closable:true}}),permissionField:record=>record.action.certificate}]}/></Content>)};
const ModalComponent=({billNumber,customerNumber,getEbillFiles}:Props)=>{const messages=getFormatMessage();const{ControlledForm}=useControlledForm<FormType>({id:"form"});const{mutate,isLoading,error,data}=usePost<ResponseType,FormType>(Services.Module.ACTION,{raw:true});const handleSubmit=()=>{mutate({billNumber}).then(result=>{if(result?.isSuccess){showToast({title:messages(generalMessages.successful),description:result?.message||messages(generalMessages.hasSuccessResponse)},"success","id");getEbillFiles();hideAppModal("modal")}})};return<>{error&&<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>}{data?.isSuccess===false&&<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>}<Typography text={messages(ebillMessages.confirmMessage,{customerNumber,billNumber})}/><ControlledForm onSubmit={handleSubmit}isSubmitting={isLoading}submitLabel={messages(generalMessages.confirm)}reset resetLabel={messages(generalMessages.cancel)}onReset={()=>hideAppModal("modal")}fields={[]}/></>};
const MultiStepForm:React.FC<IProps>=({mutate})=>{const messages=getFormatMessage();const[current,setCurrent]=useState(0);const[formValueState,setFormValueState]=useState<BillOfExchangeForm>(initialElectronicBill);const next=useCallback(()=>setCurrent(prev=>prev+1),[]);const prev=useCallback(()=>setCurrent(prev=>prev-1),[]);const updateFormState=useCallback((updates:Partial<BillOfExchangeForm>)=>setFormValueState(prevState=>({...prevState,...updates})),[]);const steps=useMemo(()=>[{title:messages(ebillMessages.initialInfo),content:<InitialInfoFirstStep formValueState={formValueState}updateFormState={updateFormState}next={next}/>},{title:messages(ebillMessages.billSpecifications),content:<BillSpecificationsSecondStep formValueState={formValueState}updateFormState={updateFormState}next={next}prev={prev}/>},{title:messages(ebillMessages.samatInfo),content:<SamatThirdStep formValueState={formValueState}updateFormState={updateFormState}next={next}prev={prev}/>},{title:messages(ebillMessages.beneficiaryInfo),content:<BeneficiaryFourthStep formValueState={formValueState}updateFormState={updateFormState}next={next}prev={prev}/>},{title:messages(ebillMessages.guaranteeInfo),content:<GuarantorFifthStep prev={prev}updateFormState={updateFormState}formValueState={formValueState}mutate={mutate}/>}],[formValueState,messages,next,prev,updateFormState]);return<Steps current={current}steps={steps}/>};
const ProofManagement=({billNumber,startDate,endDate,amount,billTypeCode,billTypeName,duration,customerNumber}:ProofManagementProps)=>{const messages=getFormatMessage();const{tableConfig,tableFromIndex}=useTablePagination();const{ControlledForm}=useControlledForm<ProofManagementFormType>({id:"ebillFileDetailForm"});const{data,isFetching,mutate}=useGet<ProofManagementResponseType[]>(["proof-management"],Services.ExternalServices.GET_PROOF_LOAD(billNumber),{hasPagination:true});return<><ControlledForm reset={false}initialValues={{billNumber,startDate,endDate,amount,duration:duration+" "+messages(generalMessages.day),customerNumber,billType:billTypeName+" - "+billTypeCode}}fields={[{type:"business",label:messages(ebillMessages.ebillFileInfo),name:"__ebillFileDetailsCollapse",layout:{span:4},readOnly:true,element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"billNumber",label:messages(ebillMessages.ebillFileNumber),type:"input",layout:{span:2}},{name:"billType",label:messages(ebillMessages.billType),type:"input",layout:{span:2}},{name:"startDate",label:messages(ebillMessages.fileCreationDate),type:"input",layout:{span:2}},{name:"endDate",label:messages(ebillMessages.fileExpirationDate),type:"input",layout:{span:2}},{name:"amount",label:messages(ebillMessages.ebillAmount),type:"business",element:FormGenerator.AmountField,layout:{span:2}},{name:"customerNumber",label:messages(generalMessages.customerNumber),type:"input",layout:{span:2}},{name:"duration",label:messages(ebillMessages.billDuration),type:"input",layout:{span:2}}]}}},{type:"business",label:messages(ebillMessages.proofsList),name:"__proofsListCollapse",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{fields:[{name:"proofTable",label:"",type:"business",layout:{span:4},element:()=><GenerativeTable<ProofManagementResponseType>rowKey="proofTypeCode"fromIndex={tableFromIndex}data={data?.resultData||[]}pagination={tableConfig(data?.resultData?.length||0)}title={`${messages(generalMessages.tableRowsCount)}:${data?.resultData?.length||0}`}loading={isFetching}columns={[{key:"fileName",dataIndex:"fileName",title:messages(generalMessages.fileName),align:"center"},{key:"proofTypeName",dataIndex:"proofTypeName",title:messages(ebillMessages.proofType),align:"center"},{key:"comment",dataIndex:"comment",title:messages(generalMessages.description),align:"center"}]}rowActions={[{id:"1",appearance:{icon:<DownloadIcon/>,tooltip:messages(ebillMessages.downloadProof)},action:values=>downloadBase64File({file:values.file,fileName:values.fileName,extension:values.extension})},{id:"2",appearance:{icon:<DeleteIcon/>,tooltip:messages(generalMessages.actionDelete)},action:values=>showAppModal({id:"deleteProofModal",title:messages(ebillMessages.deleteProof),icon:<DeleteIcon/>,element:<DeleteProof billNumber={billNumber}proofType={values.proofTypeName}fileName={values.fileName}mutateProof={mutate}/>,options:{closable:true,size:"small"}})}]}tableHeaderActions={[{id:"proofTableHeaderActions",mode:"expanded",actions:[{id:"addProof",action:()=>showAppModal({id:"addProofModal",title:messages(ebillMessages.addProof),icon:<PlusCircleIcon/>,element:<AddProof billNumber={billNumber}mutateProof={mutate}/>,options:{closable:true,size:"small"}}),appearance:{tooltip:messages(ebillMessages.addProof),icon:<PlusCircleIcon/>}}]}]}/>}]}}}]}/></>};

//=====FORM-FIELDS=====
const fields={input:{type:"input",name:"field",label:messages(label),layout:{span:2},validation:{rules:[requiredFiled(),validateMaxLength(255),{pattern:/^\d+$/,message:messages(error)}]}},
select:{type:"select",name:"select",data:{static:convertSelectboxData(data)},loading:isLoading,options:{placeholder:messages(generalMessages.doChoose),searchable:true,multiple:false},layout:{span:2}},
date:{type:"business",name:"date",element:FormGenerator.DatePickerField,options:{placeholder:messages(ebillMessages.placeholderDate_slash_template),returnFormat:{type:"string",template:"YYYY/MM/DD"},extraProps:{minDate:"start",maxDate:"end"}},layout:{span:2}},
amount:{type:"business",name:"amount",element:FormGenerator.AmountField,layout:{span:2},validation:{rules:[requiredFiled()]}},
textarea:{type:"textarea",name:"desc",options:{maxLength:200},layout:{span:4},validation:{rules:[{max:200,message:messages(max200)}]}},
checkbox:{type:"checkbox",name:"active",label:messages(label),layout:{span:1}},
radio:{type:"radio-button",name:"option",data:{static:options},layout:{span:4}},
custom:{type:"business",name:"custom",element:CustomerSearch,layout:{span:2}},
collapse:{type:"business",label:messages(title),name:"__section",layout:{span:4},element:FormGenerator.CollapseField,options:{extraProps:{defaultOpen:true,fields:nestedFields}}},
dynamicList:{type:"business",name:"items",element:FormGenerator.DynamicListField,options:{extraProps:{addButtonLabel:messages(add),formTitle:messages(title),fields:itemFields}},layout:{span:4}},
iban:{type:"business",name:"iban",element:FormGenerator.IBANField,options:{extraProps:{addIR:true}},layout:{span:2}},
file:{type:"business",name:"file",element:FormGenerator.FileParserField,layout:{span:4},options:{extraProps:{accept:[".png",".jpg",".pdf"],parser:"byteArray",sizeLimit:4*1024*1024,sizeLimitValidationMessage:messages(generalMessages.fileSizeValidation,{fileSize:"4 مگابایت"})}}},
conditional:{type:"input",name:"conditional",dependencies:["other"],disabled:({values}:{values:FormType})=>!values.other||isBankCustomer,validation:{rules:isRequired?[requiredFiled()]:[]}},
watchField:{name:"field",disabled:()=>{if(watchValue){setFieldsValue({field:""})}return true}}};

//======TYPED-FIELDS-EXPLICITLY======
import{FormFields}from"@brdp/ui/form";type SearchFields=FormFields<{billNumber:string;status:string;amount:number}>;const searchFields:SearchFields=[{name:"billNumber",type:"input",label:messages(ebillMessages.billNumber)},{name:"status",type:"select",label:messages(generalMessages.status)},{name:"amount",type:"business",element:FormGenerator.AmountField}];type CommissionFields=FormFields<{billTypeCode:string;assuranceTypeCode:string;commissionRate:number}>;const commissionFields:CommissionFields=[{type:"select",name:"billTypeCode",label:messages(ebillMessages.billType),data:{static:billTypes},validation:{rules:[requiredFiled()]}},{type:"select",name:"assuranceTypeCode",label:messages(ebillMessages.assuranceType),data:{static:assuranceTypes}},{type:"input",name:"commissionRate",label:messages(ebillMessages.rate),validation:{rules:[{pattern:/^[0-9.]+$/}]}}];type StepFields=FormFields<BillOfExchangeForm>;const stepFields:StepFields=[{type:"select",name:"billTypeCode",data:{static:uniqueBillTypes},loading:billTypeLoading,options:{searchable:true},validation:{rules:[requiredFiled()]},layout:{span:2}},{type:"input",name:"depositNumber",validation:{rules:[requiredFiled(),{pattern:/^[\d.]+$/}]},layout:{span:2}},{type:"business",name:"customerNumber",element:CustomerSearch,validation:{rules:[requiredFiled()]},layout:{span:2}}];//RULE:ALWAYS-type-fields-with-FormFields<T>-when-defined-outside-component

//=====TABLE-CONFIG=====
const columns=[{key:"id",dataIndex:"id",title:messages(id),align:"center",sorter:(a,b)=>a.id-b.id},
{key:"name",dataIndex:"name",title:messages(name),align:"center"},
{key:"status",dataIndex:"status",title:messages(status),render:status=>status?<Tag color="green">{messages(generalMessages.active)}</Tag>:<Tag color="red">{messages(generalMessages.deActive)}</Tag>},
{key:"amount",dataIndex:"amount",title:messages(amount),render:col=>formatNumber(col)+" "+messages(ebillMessages.rial),sorter:(a,b)=>Number(a.amount)-Number(b.amount)},
{key:"date",dataIndex:"date",title:messages(date),render:col=>ISOToJalaaliDateTime(col),sorter:(a,b)=>a.date.localeCompare(b.date)}];
const rowActions=[{id:"view",appearance:{icon:<IconsList.EyeIcon/>,tooltip:messages(generalMessages.actionView)},action:record=>showAppModal({id:"view",title:messages(view),element:<ViewComponent data={record}/>,options:{size:"wide",closable:true}}),permissionField:record=>record.canView},
{id:"edit",appearance:{icon:<IconsList.EditIcon/>,tooltip:messages(generalMessages.actionEdit)},action:record=>showEditModal(record),disabled:record=>!record.isEditable},
{id:"delete",appearance:{icon:<IconsList.DeleteIcon/>,tooltip:messages(generalMessages.actionDelete)},action:handleDelete,confirmMessage:record=>messages(deleteConfirm,{name:record.name})}];
const tableHeaderActions=[{id:"header",mode:"expanded",actions:[{id:"add",appearance:{icon:<IconsList.PlusCircleIcon/>,tooltip:messages(add)},action:()=>showAppModal({id:"add",title:messages(add),element:<AddComponent onSuccess={refetch}/>,options:{size:"default",closable:true}})}]}];

//=====VALIDATIONS=====
const v={req:requiredFiled(),max:validateMaxLength(255),min:validateMinLength(5),exact:validateExactLength(16),nums:numbersOnly(),numsNoZero:numbersOnlyNotStartWithZero(),minNum:validateMinNumber(0,"number"),maxNum:validateMaxNumber(100,"number"),minEq:validateMinEqualNumber(0,"number"),maxEq:validateMaxEqualNumber(100,"number"),
custom:{validator:(_,value)=>{if(condition)return Promise.reject(messages(error));return Promise.resolve()}},
pattern:{pattern:/^[0-9]{10}$/,message:messages(error)},
conditional:isRequired?[requiredFiled()]:[],
complex:{validator:(_,value)=>{if(watchPersonType==="REAL"&&value.length!==10)return Promise.reject(messages(ebillMessages.nationalCodeMustBe10Digits));if(watchPersonType==="LEGAL"&&value.length!==11)return Promise.reject(messages(ebillMessages.nationalIdMustBe11Digits));if(isForeignPerson&&(value.length<8||value.length>13))return Promise.reject(messages(ebillMessages.foreignCodeBetween8To13Digits));if(value===formValueState.nationalCode)return Promise.reject(messages(ebillMessages.beneficiaryCannotBeSameAsDrawer));return Promise.resolve()}}};

//=====CONVERTERS=====
const c={select:data=>data?.map(item=>({value:item.code,label:item.name})),
selectWithCode:data=>data?.map(item=>({value:item.code,label:`${item.name} - ${item.code}`})),
approval:data=>data?.map(item=>({value:item.number,label:`${item.name} - ${item.number}`})),
empty:obj=>Object.fromEntries(Object.entries(obj).filter(([_,v])=>v!=null&&v!=="")),
num:(value,group=true)=>new Intl.NumberFormat("fa-IR",{useGrouping:group}).format(Number(value)),
query:params=>new URLSearchParams(params).toString(),
download:({file,fileName,extension})=>{const mimeTypes:{[key:string]:string}={pdf:"application/pdf",png:"image/png",jpg:"image/jpeg",xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",xls:"application/vnd.ms-excel",docx:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",doc:"application/msword",txt:"text/plain",csv:"text/csv",zip:"application/zip",default:"application/octet-stream"};const mimeType=mimeTypes[extension.toLowerCase()]||mimeTypes.default;const byteCharacters=atob(file);const byteNumbers=Array.from(byteCharacters,c=>c.charCodeAt(0));const byteArray=new Uint8Array(byteNumbers);const blob=new Blob([byteArray],{type:mimeType});const link=document.createElement("a");link.href=URL.createObjectURL(blob);link.download=fileName;link.click();URL.revokeObjectURL(link.href)}};

//=====i18n=====
const ebillMessages=defineMessages({title:{id:"ebill.title",defaultMessage:"عنوان"},dynamic:{id:"ebill.dynamic",defaultMessage:"مقدار {value}"},ebillFileNumber:{id:"ebill.ebillFileNumber",defaultMessage:"شماره پرونده"},customerNumber:{id:"ebill.customerNumber",defaultMessage:"شماره مشتری"}});
const messages=getFormatMessage();

//=====ERROR-HANDLING=====
const eh={api:async()=>{try{const r=await apiCall();if(r?.isSuccess)showToast({title:messages(generalMessages.successful),description:r?.message},"success");else showToast({title:messages(generalMessages.error),description:r?.message},"error")}catch(e){console.error(e);showToast({title:messages(generalMessages.error)},"error")}},
comp:<>{error&&<ErrorAlert errorMessage={error?.message||messages(generalMessages.errorBadHappened)}/>}{data?.isSuccess===false&&<ErrorAlert errorMessage={data?.message||messages(generalMessages.errorBadHappened)}/>}</>,
loading:isLoading?<Spin caption={messages(generalMessages.isFetchingData)}/>:<Content/>,
full:<Spin fullscreen size="large"spinning={isLoading}/>};

//=====ROUTER=====
const routes=createBrowserRouter([{path:Paths.Dashboard,Component:AppConfigProvider,errorElement:<ErrorPage/>,children:[{index:true,element:<DashboardPage/>},{path:Paths.configurations,element:<BaratConfigurations/>},{path:Paths.commissionRate,element:<CommissionRate/>},{path:Paths.proofTypes,element:<ProofType/>},{path:Paths.filesManagement,element:<EbillFilesManagement/>},{path:Paths.typesManagement,element:<EbillTypesManagement/>},{path:"*",element:<Typography text="زیرسامانه مورد نظر پیدا نشد!"/>}]},{path:"*",element:<Navigate to={Paths.Dashboard}replace/>}]);

//=====TYPES=====
interface APIResponseType<T>{isSuccess:boolean;message?:string;resultData?:T;status?:string}
interface PaginatedResponse<T>{items:T[];pageNumber:number;pageSize:number;totalCount:number}
interface IApiResultData<T>{items:T[];pageNumber:number;pageSize:number;totalCount:number}
type FormFieldType={type:"input"|"select"|"textarea"|"checkbox"|"business";name:string;label:string;validation?:ValidationRules;layout?:{span:number};disabled?:boolean|((values:FormValues)=>boolean);dependencies?:string[];options?:FieldOptions}
type EbillFilesManagementDataType={billTypeCode?:string;customerNumber?:string;centralBankCode?:string;billNumber?:string;startDateFrom?:string;startDateTo?:string;expireDateFrom?:string;expireDateTo?:string;amountFrom?:number;amountTo?:number;status?:string;pageSize:number;pageNumber:number}
type BillOfExchangeForm={billTypeCode:string;depositNumber:string;ibanNumber:string;customerNumber:string;nationalCode:string;billApplicantPlace:string;billApplicantSanaCode:string;centralBankCode:string;taxStampNumber:string;requestDate:string;transferable:boolean;startDate:string;expireDate:string;billTakerName:string;billTakerPlace:string;billTakerSanaCode:string;billPayPlace:string;advisorName:string;advisorCode:string;advisorSwiftCode:string;advisorBranchCode:string;economicalSection:string;subEconomicalSection:string;inquiryNumber:string;billTotalWorth:string;intermediaryDeposit:string;comment:string;taxComment:string;isBankCustomer:"BANK_CUSTOMER"|"OTHER_BANK_CUSTOMER";beneficiaryCustomerNumber:string;beneficiaryNationalCode:string;beneficiaryName:string;beneficiaryBirthCertificateNumber:string;beneficiaryRegisterNumber:string;beneficiaryShahabCode:string;beneficiaryBirthDate:string;beneficiaryRegisterDate:string;beneficiaryPhoneNumber:string;beneficiaryBirthCity:string;beneficiaryRegisterCity:string;beneficiaryPostalCode:string;beneficiaryIbanNumber:string;beneficiarySanaCode:string;beneficiaryAddress:string;noneBeneficiaryType:string;noneBeneficiaryGender:string;guarantors:guarantors;user:string;currentBranchCode:string;branchName:string}

//=====PATTERNS=====
//Lifecycle:1.Hooks 2.State 3.Memos 4.Callbacks 5.Effects 6.Conditional-returns 7.Main-render
//Naming:Pages:module-name-page.tsx,Components:component-name.tsx,Hooks:use-hook-name.ts,Services:service-name.ts
//Imports:1.External 2.@brdp/* 3.Services 4.Components 5.Hooks 6.Utils 7.Types 8.Styles
//State:useState(local),useCallback/useMemo(perf),flushSync(immediate)
//API:Handle loading/error/success,raw:true,toast,cleanup
//Forms:Controlled,validation,dependencies,reset,loading
//Tables:Pagination,sorting,filtering,row/header-actions
//Modals:Unique-IDs,callbacks,close-options,cleanup
//never use interface just use type of typescript
//if the fields defin out of the form it must has correct type
// ALWAYS use 'type' instead of 'interface'
// ALWAYS provide explicit type for fields if defined outside FormGenerator/ControlledForm
// Always use meaningful names everywhere
// Do not use anything directly from Ant; always ask me first if needed
// I prefer the simplest approach, even if it takes more code, because I want everything to be clear and understandable for other developers.
// Never use a direct string. Always create a message object first, then pass it to the place where you need it.
// Follow the established pattern: create each thing in its own place (message objects, URLs, routes, custom hooks, etc.), not all in one place.

