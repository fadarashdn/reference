MODULE:array
FN:arrayIsEmpty(array:any[]):boolean|!Array.isArray(array)||array.length===0
FN:isArray(value:any):boolean|Array.isArray(value)
FN:sortNumberArr(value1:number,value2:number)|value1-value2
FN:arrayEqual(array1:any[],array2:any[]):boolean|arr.length.eq&every.idx.eq
FN:removeByIndex<T>(array:T[],index:number):T[]|[...array].splice(index,1)
FN:removeByReference<T>(array:T[],item:T):T[]|removeByIndex([...array],array.indexOf(item))
FN:removeFromArray<T>(array:T[],ref:T):T[]|!ref?array:removeByReference
FN:addIndexToListItem<T extends{}>(list:T[]):T[]|(T&{index:number})[]|map.add.index
FN:splitArray(arr:any[],num:number):any[]|while.splice(0,num)
FN:isNotEmptyArray(value:any[]):boolean|isArray(value)&&value.length>0
FN:arrayFromObject<T,K extends keyof T>(sourceObject:T):[K,T[K]][]|Object.values
FN:removeDuplicates<T>(array:T[],propertyToCheck?:(keyof T)[]):T[]|filter.unique.by.prop
FN:makeFlatArray<T>(array:T[],dataAddress:string):unknown|map.findByStringAddress
IMPORT:../common:isObject
IMPORT:../object:findByStringAddress

MODULE:common
FN:exist(value:any):boolean|value!==null&&value!==undefined
FN:notEmpty(value:any):boolean|exist(value)&&value!==""
FN:isNumber(value:any):value is number|typeof.number||/^\d+$/g.test
FN:isString(value:any):value is string|typeof.string
FN:isObject<T={[key:string]:any}>(value:any):value is T|typeof.object&&!Array&&!null
FN:isFunction(value:any):value is Function|typeof.function
FN:isBoolean(value:any):value is boolean|typeof.boolean||"true"||"false"
FN:isPrimitive(value:any)|/^[sbn]/.test(typeof value)
FN:extractValues(valuesAddresses:object,data:object|object[]):any|recursive.extract
FN:strictEqual(value:any,otherValue:any,customCompare?):boolean|isEqualWith
FN:dateDiff(firstDate:string|Date,secondDate:string|Date,negative=false):number|days.diff
FN:base64DecodeUnicode(str:string):string|decodeURIComponent(atob.split.map)
FN:csvToJSON(csv:string):any[]|split.lines.headers.map
FN:base64ToJSON(str:string):any[]|base64DecodeUnicode.csvToJSON
FN:jsonArrayToCSV(arr:GeneralObject[],omitFields?:string[],shouldMaps?:GeneralObject):string
FN:generateUuidV4()|uuidV4()
FN:pxToRem(px:`${number}px`|number,base:number=16):string|px/base+"rem"
FN:numberSeparator(value:string|number,separator=',')|\B(?=(\d{3})+(?!\d))/g
TYPE:GeneralObject={[key:string]:any}
CONST:DataTypes={Number,String,Object,Function,Boolean}
IMPORT:../array:isArray
IMPORT:../object:findByStringAddress
IMPORT:lodash.isequalwith:isEqualWith
IMPORT:uuid:v4 as uuidV4

MODULE:business
TYPE:CategoriesResponseType={name:string;id:null|number;details:Array<{code:string;value:string;id:null|number}>}
FN:convertCategoryData(data:CategoriesResponseType[])|map.details.to.label.value
FN:addCommaToAmount(amount,num=3,isZ=true,isFloat=false,separator=",")|splitNumber.join
FN:wordifyfa(input:number|string,level:number=0):string|persian.number.to.words

MODULE:date
FN:formatJalaliString(inputDate:string,{inputFormat?,outputFormat?}={inputFormat:"jYYYY/jMM/jDD-HH:mm.ss.SSS",outputFormat:"YYYY/MM/DD-HH:mm"}):string|parse.format
FN:parseJalaliString(inputDate:string,{inputFormat?}={inputFormat:"jYYYY/jMM/jDD-HH:mm.ss.SSS"}):Dayjs|moment.from.fa.to.dayjs
FN:dateToJalaaliString(date:Date|Dayjs,_separator?:string):string|Jalaali.toJalaali.format
FN:stringToGregorianDate(str:string,_splitWith?:string):Date|split.toGregorian.setDate
FN:convertJalaaliToGregorian(stringDate:string,_separator?:string,_splitWith?:string)|toGregorian.format
FN:convertNumbers2English(number:string|number)|replace.persian.arabic.to.english
FN:stringToDate(value:string):Date|split.setFullYear.setMonth.setDate
FN:parseJalaliStringToDate(value:string,calendar=calendars.JALAALI):Dayjs|dayjs.jalali
FN:parseTimeToDate(time:string):Dayjs|split.set.hour.minute
FN:dateToString(date:Date):string|getFullYear.getMonth.getDate
FN:jalaaliToGregorian(value:string)|stringToGregorianDate.dateToString
FN:gregorianToJalaaliDate(value:string)|stringToDate.dateToJalaaliString
FN:dateToISO(date:string):string|getLocaleTZOffset.toISOString
FN:getLocaleTZOffset()|getTimezoneOffset()*60000
FN:jalaaliToISO(date:string):string|convertJalaaliToGregorian.dateToISO
FN:ISOToDate(value:string)|split("T")[0].replaceAll("-","/")
FN:currentJalali()|gregorianToJalaaliDate(dateToString(new Date()))
FN:ISOToTime(value:string)|getUTCHours.getUTCMinutes.getUTCSeconds
FN:ISOToJalaaliDate(value:string)|gregorianToJalaaliDate(ISOToDate(value))
FN:ISOToJalaaliDateTime(isoDateTime:string,format:string="YYYY/MM/DD-HH:mm"):string|dayjs.locale("fa").format
FN:jalaliStringToTimestamp(data:string|undefined)|parseJalaliString?.toDate?.getTime()
TYPE:dateConverter=(value:string|Date)=>string|Date
ENUM:DateConvert={ISOToDate,ISOToTime,ISOToJalaaliDate,JalaaliTOISO,DateToISO}
CONST:dateConverters:Map<DateConvert,dateConverter>
IMPORT:ts-jalaali:Jalaali,Ijdate
IMPORT:../locale/index:calendars
IMPORT:dayjs:dayjs,Dayjs,isDayjs
IMPORT:jalali-moment:moment,Moment

MODULE:dom
FN:attachEvent(element:GlobalEvent,event:string,callback:(e:Event)=>void):()=>void|addEventListener||attachEvent
TYPE:GlobalEvent=EventTarget&{attachEvent?:(event:string,listener:EventListener)=>boolean;detachEvent?:(event:string,listener:EventListener)=>void}
IMPORT:../string:uppercaseFirst

MODULE:function
CONST:emptyFunction=(...params:any[])=>{}
FN:debounce(method:(...params:any[])=>void,context:any,duration=250)|timeoutId.setTimeout.clear

MODULE:object/index
FN:findByStringAddress(data:any,path:string,defaultValue?:any):any|path.split(".").reduce
FN:extractValues(valuesAddresses:any,data:any):any|recursive.extract.map
FN:buildValuesForOption(rootData:any,sourcePath:string,valuePath:string,textPath:string)|map.text.value
FN:makeFlatArray(arrayList:any[],dataAddress:string)|map.findByStringAddress
FN:getFieldTextByValue(arr:any[],field:string,value?:string|number):string|number|filter.find.text
FN:getCellValue(row:any,key:any)|key.split(".").reduce.array.access
FN:setByStringAddress(obj:any,path:string,value:any)|pList.reduce.pointer[key]=value
FN:getObjectValue(value:any,path:string="value")|array|string|object[path]|number.toString
IMPORT:../common:isObject,isArray,isString,isNumber

MODULE:object/index(2)
FN:findByStringAddress(data:any,path:string,defaultValue?:any):any|same.as.above
FN:setByStringAddress(obj:object,path:string,value:any):void|mutates.object
FN:objectIsEmpty(obj:object)|Object.keys(obj).length===0
FN:shallowClone<T extends object>(obj:T):T|copy.hasOwnProperty
FN:deepEqualObjects(obj1:object,obj2:object,exceptionProperties:string[]=[])|strictEqual.customCompare
FN:shallowObjectMapper(sourceObj:any,schemaObj:any,valueKey:any="",del:boolean=false):any|map.keys
FN:getObjectDiff(target:Record<string,any>,source:Record<string,any>,map:Record<string,any>={})|Object.keys.diff
FN:shallowEqual(objA:object,objB:object):boolean|keys.length.hasOwnProperty
FN:deepEqual(obj1:any,obj2:any,exceptionProperties?:string[])|recursive.compare
FN:removeProp(obj:object,propToDelete:string)|recursive.delete
FN:hasProperty(obj:object,property:string)|obj.hasOwnProperty
FN:objectToQueryString(object:GeneralObject={}):string|stringify({arrayFormat:'repeat',encode:true})
FN:removeEmptyValues<T>(object:T):Partial<T>|delete.empty.null.undefined.arrays.objects
IMPORT:../array:arrayIsEmpty
IMPORT:../common:isObject
IMPORT:qs:stringify

MODULE:i18n
TYPE:MessageType={id:string;defaultMessage:string}
TYPE:MessageObjectType={[key:string]:MessageType}
VAR:_app_messages=new Map()
FN:defineMessages(messages:MessageObjectType):MessageObjectType|map.set.messages
FN:getFormatMessage()|(messageObject:MessageType,args?:{[key:string]:string|number}):string=>_app_messages.get.replaceWithObjectKey
IMPORT:../object:objectIsEmpty
IMPORT:../string:replaceWithObjectKey

MODULE:locale
TYPE:LocaleInfo={key:string;localName:string;englishName:string;direction:Property.Direction;firstDayOfWeek?:number;calendar:string}
ENUM:calendars={JALAALI="jalaali",GREGORIAN="gregorian"}
ENUM:localesKey={Persian="fa-IR",English="en-US"}
CONST:locales:LocaleInfo[]=[{English},{Persian}]
CONST:defaultLocale:LocaleInfo={Persian}
IMPORT:csstype:Property

MODULE:string
FN:uppercaseFirst(str:string):string|charAt(0).toUpperCase()+substr(1)
FN:parseArabic(str:string):number|replace.arabic.persian.to.number
FN:isEmpty(value:string|undefined|null)|===""||===undefined||===null
FN:isEmptyStrict(value:string|undefined|null)|isEmpty||trim().length===0
FN:replaceWithObjectKey(string:string,keyValue:{[key:string]:string}):string|replaceAll(`{${key}}`,value)
FN:truncate(str:string,length:number=16,delimiter?:string)|slice(0,length)+(delimiter||"â€¦")

MODULE:timezone
TYPE:TimeZone={value:string;abbr?:string;offset:number;isdst?:boolean;text:string;utc?:string[]}
FN:getTimeZone():TimeZone|cookie.load("timeZone").JSON.parse
FN:setTimezone(timezone:TimeZone)|cookie.save("timeZone",timezone)
CONST:timeZones:TimeZone[]=[...timezones.data]
CONST:defaultTimeZone:TimeZone={Iran.Standard.Time}
IMPORT:../cookie:cookie

MODULE:validation/rules
FN:capitalEnLettersOnly(errorMsg?:string)|pattern:/^[A-Z]+$/
FN:enLettersAndNumbersOnly(errorMsg?:string)|pattern:/^[A-Za-z0-9]+$/
FN:numbersOnly(errorMsg?:string)|pattern:/^[0-9]*$/
FN:numbersOnlyExceptZero(errorMsg?:string)|pattern:/^[1-9]*$/
FN:numbersOnlyNotStartWithZero(errorMsg?:string)|pattern:/^[1-9][0-9]*$/
FN:requiredFiled(errorMsg?:string)|required:true
IMPORT:../locale/i18n:getFormatMessage
IMPORT:../locale/messages/general-messages:generalMessages

MODULE:validation/validator
FN:toDayjsOrNull(date:dayjs.Dayjs|null)|date?dayjs(date):null
FN:validateDateOrder(start:dayjs.Dayjs|null,end:dayjs.Dayjs|null,errorMsg:string)|start.isAfter(end)?reject
FN:validateExactLength(exactLength:number,type:"number"|"string"="number",errorMsg?:string)|value.length!==exactLength?reject
FN:validateMaxLength(maxLength:number,errorMsg?:string)|value.length>maxLength?reject
FN:validateMinLength(minLength:number,errorMsg?:string)|value.length<minLength?reject
FN:validateMaxNumber(maxNumber:number,type?:"number"|"money",errorMsg?:string)|Number(value)>=maxNumber?reject
FN:validateMaxEqualNumber(maxEqualNumber:number,type?:"number"|"money",errorMsg?:string)|Number(value)>maxEqualNumber?reject
FN:validateMinNumber(minNumber:number,type?:"number"|"money",errorMsg?:string)|Number(value)<=minNumber?reject
FN:validateMinEqualNumber(minEqualNumber:number,type?:"number"|"money",errorMsg?:string)|Number(value)<minEqualNumber?reject
IMPORT:dayjs:dayjs
IMPORT:../locale/i18n:getFormatMessage
IMPORT:../locale/messages/general-messages:generalMessages
